#
# DO NOT MODIFY!!!!
# This file is automatically generated by Racc 1.4.14
# from Racc grammer file "".
#

require 'racc/parser.rb'
class Ruby22Parser < RubyParser::Parser


require "ruby_lexer"
require "ruby_parser_extras"

# :stopdoc:

# Local Variables: **
# racc-token-length-max:14 **
# End: **
##### State transition tables begin ###

clist = [
'-504,584,584,218,219,584,-518,-504,-504,-504,221,584,-504,-504,-504',
'271,-504,756,-615,3,218,219,218,219,-504,112,-504,-504,-504,-98,665',
'271,-99,-92,747,584,-504,-504,748,-504,-504,-504,-504,-504,209,-106',
'222,-101,-103,215,708,-100,-105,222,264,83,214,541,-101,-103,540,265',
'-98,84,664,212,271,-504,-504,-504,-504,-504,-504,-504,-504,-504,-504',
'-504,-504,-504,-504,736,736,-504,-504,-504,-100,-504,-504,736,271,-504',
'210,222,-504,-504,-418,-504,211,-504,-92,-504,270,-504,-504,-504,-504',
'-504,-504,-504,222,-504,222,-504,217,116,116,-102,270,116,115,115,939',
'755,115,116,-504,-504,-504,-504,115,-504,-507,-504,-89,-92,-102,-90',
'-92,-507,-507,-507,116,-504,-507,-507,-507,115,-507,116,-97,-94,-92',
'270,115,707,-507,-96,-507,-507,-507,-101,-103,-92,-94,-100,-101,-103',
'-507,-507,-100,-507,-507,-507,-507,-507,-104,270,-519,116,261,116,116',
'-603,115,610,115,115,626,116,665,-91,116,456,115,320,529,115,665,-507',
'-507,-507,-507,-507,-507,-507,-507,-507,-507,-507,-507,-507,-507,629',
'-603,-507,-507,-507,-94,-507,-507,321,-93,-507,664,222,-507,-507,665',
'-507,-600,-507,664,-507,-99,-507,-507,-507,-507,-507,-507,-507,-604',
'-507,357,-507,612,611,608,-106,-102,625,-105,-94,610,-102,-94,610,-507',
'-507,-507,-507,664,-507,-289,-507,790,680,381,791,-94,-289,-289,-289',
'116,-507,628,-289,-289,115,-289,-95,564,-504,561,560,559,384,562,-504',
'-504,-507,-601,-427,887,-600,-504,387,-507,-504,-289,-289,-514,-289',
'-289,-289,-289,-289,564,-514,561,560,559,390,562,612,611,-600,612,611',
'94,95,-101,-607,766,-103,825,768,590,94,95,-289,-289,-289,-289,-289',
'-289,-289,-289,-289,-289,-289,-289,-289,-289,-507,-427,-289,-289,-289',
'-100,648,-507,-427,610,-289,406,-601,-289,610,851,-507,-427,-289,411',
'-289,455,-289,-289,-289,-289,-289,-289,-289,569,-289,-607,-289,610,-601',
'-427,457,216,-607,-607,572,985,-513,-603,-607,-289,-289,-607,-95,-513',
'-289,-607,-607,-607,96,97,569,-607,-607,-515,-607,-512,-104,96,97,-607',
'-515,572,-512,-607,612,611,608,580,579,612,611,613,610,-97,-607,-607',
'-337,-607,-607,-607,-607,-607,-518,-337,-519,458,-607,-106,612,611,618',
'610,-337,-607,580,579,610,-509,-603,615,541,573,-607,543,-509,-607,-607',
'-607,-607,-607,-607,-607,-607,-607,-607,-607,-607,-607,-607,221,-607',
'-607,-607,-607,-89,649,-90,541,573,-607,543,529,-607,612,611,623,642',
'-607,-98,-607,-99,-607,-607,-607,-607,-607,-607,-607,-84,-607,-607,-607',
'612,611,630,643,776,612,611,-510,489,-511,-70,-607,-607,-607,-510,-93',
'-511,-607,-607,-607,-607,-96,273,-607,-607,-607,-92,-607,564,-102,561',
'560,559,242,562,-105,-607,-607,-607,-607,-101,541,215,499,543,-94,-91',
'-607,-607,453,-607,-607,-607,-607,-607,264,502,-516,454,-103,-100,-517',
'265,504,-516,239,722,222,-517,241,240,237,238,-516,-69,725,222,-517',
'-607,-607,-607,-607,-607,-607,-607,-607,-607,-607,-607,-607,-607,-607',
'515,215,-607,-607,-607,-280,792,-607,522,516,-607,523,-280,-607,-607',
'276,-607,520,-607,222,-607,-280,-607,-607,-607,-607,-607,-607,-607,116',
'-607,-607,-607,564,115,561,560,559,569,562,119,120,121,122,123,-607',
'-607,-607,-607,572,-607,-289,-607,222,215,273,1009,526,-289,-289,-289',
'532,-102,-289,-289,-289,530,-289,408,215,454,567,550,410,409,242,593',
'-289,-289,-289,577,576,580,579,116,591,242,-289,-289,115,-289,-289,-289',
'-289,-289,564,538,561,560,559,544,562,564,590,561,560,559,239,562,400',
'116,241,240,237,238,115,573,594,-289,-289,-289,-289,-289,-289,-289,-289',
'-289,-289,-289,-289,-289,-289,595,722,-289,-289,-289,-290,793,-289,722',
'617,-289,621,-290,-289,-289,624,-289,725,-289,627,-289,-290,-289,-289',
'-289,-289,-289,-289,-289,242,-289,564,-289,561,560,559,963,562,561,560',
'559,634,562,-262,215,-289,-289,-289,-289,636,-289,750,-289,222,8,72',
'73,74,12,60,752,239,-104,66,67,241,240,640,70,722,68,69,71,33,34,75',
'76,641,931,218,219,273,32,31,30,104,103,105,106,878,879,22,652,880,110',
'111,653,11,48,10,13,108,107,109,98,59,100,99,101,242,102,110,111,242',
'94,95,242,45,46,44,242,246,251,252,253,248,250,258,259,254,255,242,235',
'236,-290,116,256,257,222,43,115,-290,36,218,219,61,62,242,222,63,-290',
'38,239,222,245,47,241,240,237,238,249,247,243,23,244,218,219,-84,91',
'83,85,86,87,89,580,579,684,84,92,239,260,222,-239,241,240,65,855,825',
'81,88,90,218,219,96,97,296,72,73,74,12,60,855,825,215,66,67,534,695',
'700,70,966,68,69,71,33,34,75,76,701,752,704,504,710,32,31,30,104,103',
'105,106,713,714,22,716,718,720,728,637,11,48,729,13,108,107,109,98,59',
'100,99,101,730,102,110,111,732,94,95,590,45,46,44,242,246,251,252,253',
'248,250,258,259,254,255,-289,235,236,215,739,256,257,-289,43,769,966',
'298,-604,770,61,62,-289,771,63,752,38,239,-263,245,47,241,240,237,238',
'249,247,243,23,244,777,489,-289,91,83,85,86,87,89,-289,-516,489,84,92',
'-604,260,222,-516,-289,795,65,261,502,81,88,90,-516,504,96,97,296,72',
'73,74,12,60,695,222,-517,66,67,273,273,695,70,-517,68,69,71,33,34,75',
'76,242,-517,825,222,222,32,31,30,104,103,105,106,849,222,22,825,859',
'222,-264,653,11,48,886,13,108,107,109,98,59,100,99,101,889,102,110,111',
'713,94,95,892,45,46,44,242,246,251,252,253,248,250,258,259,254,255,215',
'235,236,-280,895,256,257,1016,43,897,-280,36,899,222,61,62,1014,901',
'63,-280,38,239,902,245,47,241,240,237,238,249,247,243,23,244,695,910',
'-290,91,83,85,86,87,89,-290,-289,-262,84,92,914,260,916,-289,-290,917',
'65,222,-604,81,88,90,-289,713,96,97,296,72,73,74,12,60,920,922,924,66',
'67,926,926,222,70,932,68,69,71,33,34,75,76,119,120,121,122,123,32,31',
'30,104,103,105,106,934,963,22,561,560,559,936,562,11,48,222,13,108,107',
'109,98,59,100,99,101,946,102,110,111,947,94,95,222,45,46,44,242,246',
'251,252,253,248,250,258,259,254,255,950,235,236,-265,960,256,257,967',
'43,968,970,36,971,987,61,62,989,990,63,994,38,239,713,245,47,241,240',
'237,238,249,247,243,23,244,999,1001,1003,91,83,85,86,87,89,1005,1005',
'1012,84,92,1017,260,1018,926,926,926,65,1023,987,81,88,90,-604,-603',
'96,97,296,72,73,74,12,60,700,987,1046,66,67,1047,1048,1049,70,1005,68',
'69,71,33,34,75,76,119,120,121,122,123,32,31,30,104,103,105,106,1005',
'1005,22,119,120,121,122,123,11,48,222,13,108,107,109,98,59,100,99,101',
'926,102,110,111,987,94,95,1005,45,46,44,242,246,251,252,253,248,250',
'258,259,254,255,,235,236,,,256,257,,43,,,298,,,61,62,,,63,,38,239,,245',
'47,241,240,237,238,249,247,243,23,244,,,,91,83,85,86,87,89,,,,84,92',
',260,,,,,65,,,81,88,90,,,96,97,296,72,73,74,12,60,,,,66,67,,,,70,,68',
'69,71,33,34,75,76,,,,,,32,31,30,104,103,105,106,,,22,,,,,,11,48,,13',
'108,107,109,98,59,100,99,101,,102,110,111,,94,95,,45,46,44,242,246,251',
'252,253,248,250,258,259,254,255,,235,236,,,256,257,,43,,,298,,,61,62',
',,63,,38,239,,245,47,241,240,237,238,249,247,243,23,244,,,,91,83,85',
'86,87,89,,,,84,92,,260,,,,,65,,,81,88,90,,,96,97,296,72,73,74,12,60',
',,,66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31,30,104,103,105,106,',
',22,,,,,,11,48,,13,108,107,109,98,59,100,99,101,,102,110,111,,94,95',
',45,46,44,242,246,251,252,253,248,250,258,259,254,255,,235,236,,,256',
'257,,43,,,36,,,61,62,,,63,,38,239,,245,47,241,240,237,238,249,247,243',
'23,244,,,,91,83,85,86,87,89,,,,84,92,222,260,,,,,65,,,81,88,90,,,96',
'97,8,72,73,74,12,60,,,,66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31',
'30,104,103,105,106,,,22,,,,,,11,48,10,13,108,107,109,98,59,100,99,101',
',102,110,111,,94,95,,45,46,44,242,246,251,252,253,248,250,258,259,254',
'255,,235,236,,,256,257,,43,,,36,,,61,62,,,63,,38,239,,245,47,241,240',
'237,238,249,247,243,23,244,,,,91,83,85,86,87,89,,,,84,92,,260,,,,,65',
',,81,88,90,,,96,97,296,72,73,74,12,60,,,,66,67,,,,70,,68,69,71,33,34',
'75,76,,,,,,32,31,30,104,103,105,106,,,22,,,,,,11,48,,13,108,107,109',
'98,59,100,99,101,,102,110,111,,94,95,,45,46,44,242,246,251,252,253,248',
'250,258,259,254,255,,235,236,,,256,257,,43,,,36,,,61,62,,,63,,38,239',
',245,47,241,240,237,238,249,247,243,23,244,,,,91,83,85,86,87,89,,,,84',
'92,,260,,,,,65,,,81,88,90,,,96,97,296,72,73,74,12,60,,,,66,67,,,,70',
',68,69,71,33,34,75,76,,,,,,32,31,30,104,103,105,106,,,22,,,,,,11,48',
',13,108,107,109,98,59,100,99,101,,102,110,111,,94,95,,45,46,44,242,246',
'251,252,253,248,250,258,259,254,255,,235,236,,,256,257,,43,,,36,,,61',
'62,,,63,,38,239,,245,47,241,240,237,238,249,247,243,23,244,,,,91,83',
'85,86,87,89,,,,84,92,,260,,,,,65,,,81,88,90,,,96,97,296,72,73,74,12',
'60,,,,66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31,30,104,103,105,106',
',,22,,,,,,11,48,,13,108,107,109,98,59,100,99,101,,102,110,111,,94,95',
',45,46,44,242,246,251,252,253,248,250,258,259,254,255,,235,236,,,256',
'257,,43,,,36,,,61,62,,,63,,38,239,,245,47,241,240,237,238,249,247,243',
'23,244,,,,91,83,85,86,87,89,,,,84,92,,260,,,,,65,,,81,88,90,,,96,97',
'296,72,73,74,12,60,,,,66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31,30',
'104,103,105,106,,,22,,,,,,11,48,,13,108,107,109,98,59,100,99,101,,102',
'110,111,,94,95,,45,46,44,242,246,251,252,253,248,250,258,259,254,255',
',235,236,,,256,257,,43,,,36,,,61,62,,,63,,38,239,,245,47,241,240,237',
'238,249,247,243,23,244,,,,91,83,85,86,87,89,,,,84,92,,260,,,,,65,,,81',
'88,90,,,96,97,296,72,73,74,12,60,,,,66,67,,,,70,,68,69,71,33,34,75,76',
',,,,,32,31,30,104,103,105,106,,,22,,,,,,11,48,,13,108,107,109,98,59',
'100,99,101,,102,110,111,,94,95,,45,46,44,242,246,251,252,253,248,250',
'258,259,254,255,,235,236,,,256,257,,43,,,36,,,61,62,,,63,,38,239,,245',
'47,241,240,237,238,249,247,243,23,244,,,,91,83,85,86,87,89,,,,84,92',
',260,,,,,65,,,81,88,90,,,96,97,296,72,73,74,12,60,,,,66,67,,,,70,,68',
'69,71,33,34,75,76,,,,,,32,31,30,104,103,105,106,,,22,,,,,,11,48,,13',
'108,107,109,98,59,100,99,101,,102,110,111,,94,95,,45,46,44,242,246,251',
'252,253,248,250,258,259,254,255,,235,236,,,256,257,,43,,,36,,,61,62',
',,63,,38,239,,245,47,241,240,237,238,249,247,243,23,244,,,,91,83,85',
'86,87,89,,,,84,92,,260,,,,,65,,,81,88,90,,,96,97,296,72,73,74,12,60',
',,,66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31,30,104,103,105,106,',
',22,,,,,,11,48,,13,108,107,109,98,59,100,99,101,,102,110,111,,94,95',
',45,46,44,242,246,251,252,253,248,250,258,259,254,255,,235,236,,,256',
'257,,43,,,36,,,61,62,,,63,,38,239,,245,47,241,240,237,238,249,247,243',
'23,244,,,,91,83,85,86,87,89,,,,84,92,,260,,,,,65,,,81,88,90,,,96,97',
'296,72,73,74,12,60,,,,66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31,30',
'104,103,105,106,,,22,,,,,,11,48,,13,108,107,109,98,59,100,99,101,,102',
'110,111,,94,95,,45,46,44,242,246,251,252,253,248,250,258,259,254,255',
',235,236,,,256,257,,43,,,36,,,61,62,,,63,,38,239,,245,47,241,240,237',
'238,249,247,243,23,244,,,,91,83,85,86,87,89,,,,84,92,,260,,,,,65,,,81',
'88,90,,,96,97,296,72,73,74,12,60,,,,66,67,,,,70,,68,69,71,33,34,75,76',
',,,,,32,31,30,104,103,105,106,,,22,,,,,,11,48,,13,108,107,109,98,59',
'100,99,101,,102,110,111,,94,95,,45,46,44,242,246,251,252,253,248,250',
'258,259,254,255,,235,236,,,256,257,,43,,,36,,,61,62,,,63,,38,239,,245',
'47,241,240,237,238,249,247,243,23,244,,,,91,83,85,86,87,89,,,,84,92',
',260,,,,,65,,,81,88,90,,,96,97,296,72,73,74,12,60,,,,66,67,,,,70,,68',
'69,71,33,34,75,76,,,,,,32,31,30,104,103,105,106,,,22,,,,,,11,48,,13',
'108,107,109,98,59,100,99,101,,102,110,111,,94,95,,45,46,44,242,246,251',
'252,253,248,250,258,259,254,255,,-627,-627,,,256,257,,43,,,36,,,61,62',
',,63,,38,239,,245,47,241,240,237,238,249,247,243,23,244,,,,91,83,85',
'86,87,89,,,,84,92,,564,,561,560,559,65,562,,81,88,90,,,96,97,296,72',
'73,74,12,60,,,,66,67,,,,70,,68,69,71,33,34,75,76,722,,,,,32,31,30,104',
'103,105,106,,,22,,,,,,11,48,,13,108,107,109,98,59,100,99,101,,102,110',
'111,,94,95,,45,46,44,242,246,251,252,253,248,250,258,259,254,255,,-627',
'-627,,,256,257,,43,,,36,,,61,62,,,63,,38,239,,245,47,241,240,237,238',
'249,247,243,23,244,,,,91,83,85,86,87,89,,,,84,92,,564,,561,560,559,65',
'562,,81,88,90,,,96,97,296,72,73,74,12,60,,,,66,67,,,,70,,68,69,71,33',
'34,75,76,722,,,,,32,31,30,104,103,105,106,,564,22,561,560,559,,562,11',
'48,,13,108,107,109,98,59,100,99,101,,102,110,111,,94,95,,45,46,44,242',
'-627,-627,-627,-627,248,250,,722,-627,-627,,,,,,256,257,,43,,,36,,,61',
'62,,,63,,38,239,,245,47,241,240,237,238,249,247,243,23,244,,,,91,83',
'85,86,87,89,,,,84,92,,564,,561,560,559,65,562,,81,88,90,,,96,97,296',
'72,73,74,12,60,,,,66,67,,,,70,,68,69,71,33,34,75,76,722,,,,,32,31,30',
'104,103,105,106,,,22,,,,,,11,48,,13,108,107,109,98,59,100,99,101,,102',
'110,111,,94,95,,45,46,44,242,,,,,,,,,,,,,,,,256,257,,43,,,36,,242,61',
'62,,,63,,38,239,,245,47,241,240,237,238,256,257,243,23,244,,,,91,83',
'85,86,87,89,,,239,84,92,,241,240,237,238,,65,,,81,88,90,,,96,97,296',
'72,73,74,12,60,,,,66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31,30,104',
'103,105,106,,,22,,,,,,11,48,,13,108,107,109,98,59,100,99,101,,102,110',
'111,,94,95,,45,46,44,242,,,,,,,,,,,,,,,,256,257,,43,,,36,,,61,62,,,63',
',38,239,,245,47,241,240,237,238,,,243,23,244,,,,91,83,85,86,87,89,,',
',84,92,,,,,,,65,,,81,88,90,,,96,97,296,72,73,74,12,60,,,,66,67,,,,70',
',68,69,71,33,34,75,76,,,,,,32,31,30,104,103,105,106,,,22,,,,,,11,48',
',13,108,107,109,98,59,100,99,101,,102,110,111,,94,95,,45,46,44,242,',
',,,,,,,,,,,,,,256,257,,43,,,36,,,61,62,,,63,,38,239,,245,47,241,240',
'237,238,,,243,23,244,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88',
'90,,,96,97,296,72,73,74,12,60,,,,66,67,,,,70,,68,69,71,33,34,75,76,',
',,,,32,31,30,104,103,105,106,,,22,,,,,,11,48,,13,108,107,109,98,59,100',
'99,101,,102,110,111,,94,95,,45,46,44,242,,,,,,,,,,,,,,,,256,257,,43',
',,36,,,61,62,,,63,,38,239,,245,47,241,240,237,238,,,243,23,244,,,,91',
'83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,296,72,73,74,12',
'60,,,,66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31,30,104,103,105,106',
',,22,,,,,,11,48,,13,108,107,109,98,59,100,99,101,,102,110,111,,94,95',
',45,46,44,242,-627,-627,-627,-627,248,250,,,-627,-627,,,,,,256,257,',
'43,,,36,,,61,62,,,63,,38,239,,245,47,241,240,237,238,249,247,243,23',
'244,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,296,72',
'73,74,12,60,,,,66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31,30,104,103',
'105,106,,,22,,,,,,11,48,,13,108,107,109,98,59,100,99,101,,102,110,111',
',94,95,,45,46,44,242,-627,-627,-627,-627,248,250,,,-627,-627,,,,,,256',
'257,,43,,,36,,,61,62,,,63,,38,239,,245,47,241,240,237,238,249,247,243',
'23,244,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,296',
'72,73,74,12,60,,,,66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31,30,104',
'103,105,106,,,22,,,,,,11,48,,13,108,107,109,98,59,100,99,101,,102,110',
'111,,94,95,,45,46,44,242,-627,-627,-627,-627,248,250,,,-627,-627,,,',
',,256,257,,43,,,36,,,61,62,,,63,,38,239,,245,47,241,240,237,238,249',
'247,243,23,244,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96',
'97,296,72,73,74,12,60,,,,66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31',
'30,104,103,105,106,,,22,,,,,,11,48,,13,108,107,109,98,59,100,99,101',
',102,110,111,,94,95,,45,46,44,242,-627,-627,-627,-627,248,250,,,-627',
'-627,,,,,,256,257,,43,,,36,,,61,62,,,63,,38,239,,245,47,241,240,237',
'238,249,247,243,23,244,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88',
'90,,,96,97,296,72,73,74,12,60,,,,66,67,,,,70,,68,69,71,33,34,75,76,',
',,,,32,31,30,104,103,105,106,,,22,,,,,,11,48,,13,108,107,109,98,59,100',
'99,101,,102,110,111,,94,95,,45,46,44,242,-627,-627,-627,-627,248,250',
',,-627,-627,,,,,,256,257,,43,,,36,,,61,62,,,63,,38,239,,245,47,241,240',
'237,238,249,247,243,23,244,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,',
'81,88,90,,,96,97,296,72,73,74,12,60,,,,66,67,,,,70,,68,69,71,33,34,75',
'76,,,,,,32,31,30,104,103,105,106,,,22,,,,,,11,48,,13,108,107,109,98',
'59,100,99,101,,102,110,111,,94,95,,45,46,44,242,246,251,252,253,248',
'250,,,254,255,,,,,,256,257,,43,,,36,,,61,62,,,63,,38,239,,245,47,241',
'240,237,238,249,247,243,23,244,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65',
',,81,88,90,,,96,97,72,73,74,12,60,,,,66,67,,,,70,,68,69,71,33,34,75',
'76,,,,,,32,31,30,104,103,105,106,,,22,,,,,,11,48,10,13,108,107,109,98',
'59,100,99,101,,102,110,111,,94,95,,45,46,44,242,246,251,252,253,248',
'250,258,,254,255,,,,,,256,257,,43,,,36,,,61,62,,,63,,38,239,,245,47',
'241,240,237,238,249,247,243,23,244,,,,91,83,85,86,87,89,,,,84,92,,,',
',,,65,,,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,33,34',
'75,76,,,,,,32,31,30,104,103,105,106,,,234,,,,,,,48,,,108,107,109,98',
'59,100,99,101,,102,110,111,,94,95,,45,46,44,242,,,,,,,,,,,,,,,,256,257',
',227,,,233,,,61,62,,,63,,,239,,245,47,241,240,237,238,,,,232,,,,,91',
'83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,',
'66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31,30,104,103,105,106,,,234',
',,,,,,48,,,108,107,109,98,59,100,99,101,289,102,110,111,,94,95,,45,46',
'44,242,,,,,,,,,,,,,,,,256,257,,227,,,233,,,61,62,,,63,,285,239,283,245',
'47,241,240,237,238,,,,232,,,,,91,286,85,86,87,89,,,,84,287,,,,,,,65',
',290,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,33,34,75',
'76,,,,,,32,31,30,104,103,105,106,,,234,,,,,,,48,,,108,107,109,98,59',
'100,99,101,289,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,227,',
',233,,,61,62,,,63,,285,,283,,47,,,,,,,,232,,,,,91,286,85,86,87,89,,',
',84,287,,,,,,,65,,290,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,',
'68,69,71,33,34,75,76,,,,,,32,31,30,104,103,105,106,,,234,,,,,,,48,,',
'108,107,109,98,59,100,99,101,289,102,110,111,,94,95,,45,46,44,,,,,,',
',,,,,,,,,,,,,227,,,233,,,61,62,,,63,,285,,283,,47,,,,,,,,232,,,,,91',
'286,85,86,87,89,,,,84,287,,,,,,,65,,290,81,88,90,,,96,97,72,73,74,,60',
',,,66,67,,,,70,,68,69,71,313,314,75,76,,,,,,309,310,316,104,103,105',
'106,,,234,,,,,,,311,,,108,107,109,98,59,100,99,101,,102,110,111,,94',
'95,,,,317,,,,,,,,,,,,,,,,,,,,307,,,303,,,61,62,,,63,,302,,,,,,,,,,,',
',,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74',
',60,,,,66,67,,,,70,,68,69,71,313,314,75,76,,,,,,309,310,316,104,103',
'105,106,,,234,,,,,,,311,,,108,107,109,98,59,100,99,101,,102,110,111',
',94,95,,,,317,,,,,,,,,,,,,,,,,,,,307,,,233,,,61,62,,,63,,,,,,,,,,,,',
',,,,,,91,83,85,86,87,89,,,,84,92,,,,319,,,65,,,81,88,90,,,96,97,72,73',
'74,,60,,,,66,67,,,,70,,68,69,71,313,314,75,76,,,,,,309,310,316,104,103',
'105,106,,,234,,,,,,,48,,,108,107,109,98,59,100,99,101,,102,110,111,',
'94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,227,,,233,,,61,62,,,63,,,,,,47,,',
',,,,,232,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97',
'72,73,74,,60,,,,66,67,,,,70,,68,69,71,313,314,75,76,,,,,,309,310,316',
'104,103,105,106,,,234,,,,,,,48,,,108,107,109,98,59,100,99,101,,102,110',
'111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,227,,,233,,,61,62,,,63,,,,,',
'47,,,,,,,,232,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96',
'97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,313,314,75,76,,,,,,309,310',
'316,104,103,105,106,,,234,,,,,,,48,,,108,107,109,98,59,100,99,101,,102',
'110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,227,,,233,,,61,62,,,63,',
',,,,47,,,,,,,,232,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90',
',,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,313,314,75,76,,,,,,309',
'310,316,104,103,105,106,,,234,,,,,,,48,,,108,107,109,98,59,100,99,101',
'289,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,227,,,233,,,61,62',
',,63,,285,,,,47,,,,,,,,232,,,,,91,286,85,86,87,89,,,,84,287,,,,,,,65',
',290,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,33,34,75',
'76,,,,,,32,31,30,104,103,105,106,,,22,,,,,,,48,,,108,107,109,98,59,100',
'99,101,,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,227,,,233,,',
'61,62,,,63,,,,,,47,,,,,,,,23,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65',
',,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,33,34,75,76',
',,,,,32,31,30,104,103,105,106,,,22,,,,,,,48,,,108,107,109,98,59,100',
'99,101,,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,227,,,233,,',
'61,62,,,63,,,,,,47,,,,,,,,23,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65',
',,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,33,34,75,76',
',,,,,32,31,30,104,103,105,106,,,22,,,,,,,48,,,108,107,109,98,59,100',
'99,101,,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,227,,,233,,',
'61,62,,,63,,,,,,47,,,,,,,,23,,,,,91,83,85,86,87,89,,,,84,92,116,,,,',
'115,65,,,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,313',
'314,75,76,,,,,,309,310,316,104,103,105,106,,,234,,,,,,,311,,,108,107',
'109,98,59,100,99,101,,102,110,111,,94,95,,,,317,,,,,,,,,,,,,,,,,,,,351',
',,36,,,61,62,,,63,,38,,,,,,,,,,,,,,,,,91,83,85,86,87,89,,,,84,92,,,',
',,,65,,,81,88,90,,,96,97,72,73,74,12,60,,,,66,67,,,,70,,68,69,71,33',
'34,75,76,,,,,,32,31,30,104,103,105,106,,,22,,,,,,11,48,10,13,108,107',
'109,98,59,100,99,101,,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,',
',,43,,,36,,,61,62,,,63,,38,,,,47,,,,,,,,23,,,,,91,83,85,86,87,89,,,',
'84,92,,,,,,400,65,,,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68',
'69,71,33,34,75,76,,,,,,32,31,30,104,103,105,106,,,22,,,,,,,48,,,108',
'107,109,98,59,100,99,101,,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,',
',,,,,,227,,,233,,,61,62,,,63,,,,,,47,,,,,,,,23,,,,,91,83,85,86,87,89',
',,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68',
'69,71,33,34,75,76,,,,,,32,31,30,104,103,105,106,,,22,,,,,,,48,,,108',
'107,109,98,59,100,99,101,,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,',
',,,,,,227,,,233,,,61,62,,,63,,,,,,47,,,,,,,,23,,,,,91,83,85,86,87,89',
',,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68',
'69,71,33,34,75,76,,,,,,32,31,30,104,103,105,106,,,22,,,,,,,48,,,108',
'107,109,98,59,100,99,101,,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,',
',,,,,,227,,,233,,,61,62,,,63,,,,,,47,,,,,,,,23,,,,,91,83,85,86,87,89',
',,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68',
'69,71,33,34,75,76,,,,,,32,31,30,104,103,105,106,,,22,,,,,,,48,,,108',
'107,109,98,59,100,99,101,,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,',
',,,,,,227,,,233,,,61,62,,,63,,,,,,47,,,,,,,,23,,,,,91,83,85,86,87,89',
',,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,12,60,,,,66,67,,,,70,',
'68,69,71,33,34,75,76,,,,,,32,31,30,104,103,105,106,,,22,,,,,,11,48,',
'13,108,107,109,98,59,100,99,101,,102,110,111,,94,95,,45,46,44,,,,,,',
',,,,,,,,,,,,,43,,,36,,,61,62,,,63,,38,,,,47,,,,,,,,23,,,,,91,83,85,86',
'87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,',
'70,,68,69,71,33,34,75,76,,,,,,32,31,30,104,103,105,106,,,234,,,,,,,48',
',,108,107,109,98,59,100,99,101,,102,110,111,,94,95,,45,46,44,,,,,,,',
',,,,,,,,,,,,227,,,233,,,61,62,,,63,,416,,,,47,,,,,,,,232,,,,,91,83,85',
'86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,,66,67',
',,,70,,68,69,71,33,34,75,76,,,,,,32,31,30,104,103,105,106,,,234,,,,',
',,48,,,108,107,109,98,59,100,99,101,,102,110,111,,94,95,,45,46,44,,',
',,,,,,,,,,,,,,,,,227,,,233,,,61,62,,,63,,,,,,47,,,,,,,,232,,,,,91,83',
'85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,,66',
'67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31,30,104,103,105,106,,,234,',
',,,,,48,,,108,107,109,98,59,100,99,101,289,102,110,111,,94,95,,45,46',
'44,,,,,,,,,,,,,,,,,,,,227,,,233,,,61,62,,,63,,285,,283,,47,,,,,,,,232',
',,,,91,286,85,86,87,89,,,,84,287,,,,,,,65,,290,81,88,90,,,96,97,72,73',
'74,,60,,,,66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31,30,104,103,105',
'106,,,234,,,,,,,48,,,108,107,109,98,59,100,99,101,,102,110,111,,94,95',
',45,46,44,,,,,,,,,,,,,,,,,,,,227,,,233,,,61,62,,,63,,,,,,47,,,,,,,,232',
',,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74',
',60,,,,66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31,30,104,103,105,106',
',,234,,,,,,,48,,,108,107,109,98,59,100,99,101,,102,110,111,,94,95,,45',
'46,44,,,,,,,,,,,,,,,,,,,,227,,,233,,,61,62,,,63,,416,,,,47,,,,,,,,232',
',,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74',
',60,,,,66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31,30,104,103,105,106',
',,22,,,,,,,48,,,108,107,109,98,59,100,99,101,,102,110,111,,94,95,,45',
'46,44,,,,,,,,,,,,,,,,,,,,227,,,233,,,61,62,,,63,,,,,,47,,,,,,,,23,,',
',,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,,60',
',,,66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31,30,104,103,105,106,',
',22,,,,,,,48,,,108,107,109,98,59,100,99,101,,102,110,111,,94,95,,45',
'46,44,,,,,,,,,,,,,,,,,,,,227,,,233,,,61,62,,,63,,,,,,47,,,,,,,,23,,',
',,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,,60',
',,,66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31,30,104,103,105,106,',
',22,,,,,,,48,,,108,107,109,98,59,100,99,101,,102,110,111,,94,95,,45',
'46,44,,,,,,,,,,,,,,,,,,,,227,,,233,,,61,62,,,63,,,,,,47,,,,,,,,23,,',
',,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,,60',
',,,66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31,30,104,103,105,106,',
',22,,,,,,,48,,,108,107,109,98,59,100,99,101,,102,110,111,,94,95,,45',
'46,44,,,,,,,,,,,,,,,,,,,,227,,,233,,,61,62,,,63,,,,,,47,,,,,,,,23,,',
',,91,83,85,86,87,89,,,,84,92,222,,,,,,65,,,81,88,90,,,96,97,72,73,74',
',60,,,,66,67,,,,70,,68,69,71,313,314,75,76,,,,,,309,310,316,104,103',
'105,106,,,234,,,,,,,48,,,108,107,109,98,59,100,99,101,,102,110,111,',
'94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,227,,,233,,,61,62,,,63,,,,,,47,,',
',,,,,232,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97',
'72,73,74,,60,,,,66,67,,,,70,,68,69,71,313,314,75,76,,,,,,309,310,316',
'104,103,105,106,,,234,,,,,,,48,,,108,107,109,98,59,100,99,101,,102,110',
'111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,227,,,233,,,61,62,,,63,,,,,',
'47,,,,,,,,232,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96',
'97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,313,314,75,76,,,,,,309,310',
'316,104,103,105,106,,,234,,,,,,,48,,,108,107,109,98,59,100,99,101,,102',
'110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,227,,,233,,,61,62,,,63,',
',,,,47,,,,,,,,232,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90',
',,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,313,314,75,76,,,,,,309',
'310,316,104,103,105,106,,,234,,,,,,,48,,,108,107,109,98,59,100,99,101',
',102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,227,,,233,,,61,62,',
',63,,,,,,47,,,,,,,,232,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81',
'88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,313,314,75,76,,',
',,,309,310,316,104,103,105,106,,,234,,,,,,,48,,,108,107,109,98,59,100',
'99,101,,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,227,,,233,,',
'61,62,,,63,,,,,,47,,,,,,,,232,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65',
',,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,313,314,75',
'76,,,,,,309,310,316,104,103,105,106,,,234,,,,,,,48,,,108,107,109,98',
'59,100,99,101,,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,227,',
',233,,,61,62,,,63,,,,,,47,,,,,,,,232,,,,,91,83,85,86,87,89,,,,84,92',
',,,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,313',
'314,75,76,,,,,,309,310,316,104,103,105,106,,,234,,,,,,,48,,,108,107',
'109,98,59,100,99,101,,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,',
',,227,,,233,,,61,62,,,63,,,,,,47,,,,,,,,232,,,,,91,83,85,86,87,89,,',
',84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69',
'71,313,314,75,76,,,,,,309,310,316,104,103,105,106,,,234,,,,,,,48,,,108',
'107,109,98,59,100,99,101,,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,',
',,,,,,227,,,233,,,61,62,,,63,,,,,,47,,,,,,,,232,,,,,91,83,85,86,87,89',
',,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68',
'69,71,313,314,75,76,,,,,,309,310,316,104,103,105,106,,,234,,,,,,,48',
',,108,107,109,98,59,100,99,101,,102,110,111,,94,95,,45,46,44,,,,,,,',
',,,,,,,,,,,,227,,,233,,,61,62,,,63,,,,,,47,,,,,,,,232,,,,,91,83,85,86',
'87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,',
'70,,68,69,71,313,314,75,76,,,,,,309,310,316,104,103,105,106,,,234,,',
',,,,48,,,108,107,109,98,59,100,99,101,,102,110,111,,94,95,,45,46,44',
',,,,,,,,,,,,,,,,,,,227,,,233,,,61,62,,,63,,,,,,47,,,,,,,,232,,,,,91',
'83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,',
'66,67,,,,70,,68,69,71,313,314,75,76,,,,,,309,310,316,104,103,105,106',
',,234,,,,,,,48,,,108,107,109,98,59,100,99,101,,102,110,111,,94,95,,45',
'46,44,,,,,,,,,,,,,,,,,,,,227,,,233,,,61,62,,,63,,,,,,47,,,,,,,,232,',
',,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,',
'60,,,,66,67,,,,70,,68,69,71,313,314,75,76,,,,,,309,310,316,104,103,105',
'106,,,234,,,,,,,48,,,108,107,109,98,59,100,99,101,,102,110,111,,94,95',
',45,46,44,,,,,,,,,,,,,,,,,,,,227,,,233,,,61,62,,,63,,,,,,47,,,,,,,,232',
',,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74',
',60,,,,66,67,,,,70,,68,69,71,313,314,75,76,,,,,,309,310,316,104,103',
'105,106,,,234,,,,,,,48,,,108,107,109,98,59,100,99,101,,102,110,111,',
'94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,227,,,233,,,61,62,,,63,,,,,,47,,',
',,,,,232,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97',
'72,73,74,,60,,,,66,67,,,,70,,68,69,71,313,314,75,76,,,,,,309,310,316',
'104,103,105,106,,,234,,,,,,,48,,,108,107,109,98,59,100,99,101,,102,110',
'111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,227,,,233,,,61,62,,,63,,,,,',
'47,,,,,,,,232,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96',
'97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,313,314,75,76,,,,,,309,310',
'316,104,103,105,106,,,234,,,,,,,48,,,108,107,109,98,59,100,99,101,,102',
'110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,227,,,233,,,61,62,,,63,',
',,,,47,,,,,,,,232,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90',
',,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,313,314,75,76,,,,,,309',
'310,316,104,103,105,106,,,234,,,,,,,48,,,108,107,109,98,59,100,99,101',
',102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,227,,,233,,,61,62,',
',63,,,,,,47,,,,,,,,232,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81',
'88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,313,314,75,76,,',
',,,309,310,316,104,103,105,106,,,234,,,,,,,48,,,108,107,109,98,59,100',
'99,101,,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,227,,,233,,',
'61,62,,,63,,,,,,47,,,,,,,,232,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65',
',,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,313,314,75',
'76,,,,,,309,310,316,104,103,105,106,,,234,,,,,,,48,,,108,107,109,98',
'59,100,99,101,,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,227,',
',233,,,61,62,,,63,,,,,,47,,,,,,,,232,,,,,91,83,85,86,87,89,,,,84,92',
',,,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,313',
'314,75,76,,,,,,309,310,316,104,103,105,106,,,234,,,,,,,48,,,108,107',
'109,98,59,100,99,101,,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,',
',,227,,,233,,,61,62,,,63,,,,,,47,,,,,,,,232,,,,,91,83,85,86,87,89,,',
',84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69',
'71,313,314,75,76,,,,,,309,310,316,104,103,105,106,,,234,,,,,,,48,,,108',
'107,109,98,59,100,99,101,,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,',
',,,,,,227,,,233,,,61,62,,,63,,,,,,47,,,,,,,,232,,,,,91,83,85,86,87,89',
',,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68',
'69,71,313,314,75,76,,,,,,309,310,316,104,103,105,106,,,234,,,,,,,48',
',,108,107,109,98,59,100,99,101,,102,110,111,,94,95,,45,46,44,,,,,,,',
',,,,,,,,,,,,227,,,233,,,61,62,,,63,,,,,,47,,,,,,,,232,,,,,91,83,85,86',
'87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,',
'70,,68,69,71,313,314,75,76,,,,,,309,310,316,104,103,105,106,,,234,,',
',,,,48,,,108,107,109,98,59,100,99,101,,102,110,111,,94,95,,45,46,44',
',,,,,,,,,,,,,,,,,,,227,,,233,,,61,62,,,63,,,,,,47,,,,,,,,232,,,,,91',
'83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,',
'66,67,,,,70,,68,69,71,313,314,75,76,,,,,,309,310,316,104,103,105,106',
',,234,,,,,,,48,,,108,107,109,98,59,100,99,101,,102,110,111,,94,95,,45',
'46,44,,,,,,,,,,,,,,,,,,,,227,,,233,,,61,62,,,63,,,,,,47,,,,,,,,232,',
',,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,',
'60,,,,66,67,,,,70,,68,69,71,313,314,75,76,,,,,,309,310,316,104,103,105',
'106,,,234,,,,,,,48,,,108,107,109,98,59,100,99,101,,102,110,111,,94,95',
',45,46,44,,,,,,,,,,,,,,,,,,,,227,,,233,,,61,62,,,63,,,,,,47,,,,,,,,232',
',,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74',
',60,,,,66,67,,,,70,,68,69,71,313,314,75,76,,,,,,309,310,316,104,103',
'105,106,,,234,,,,,,,48,,,108,107,109,98,59,100,99,101,,102,110,111,',
'94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,227,,,233,,,61,62,,,63,,,,,,47,,',
',,,,,232,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97',
'72,73,74,,60,,,,66,67,,,,70,,68,69,71,313,314,75,76,,,,,,309,310,316',
'104,103,105,106,,,234,,,,,,,48,,,108,107,109,98,59,100,99,101,,102,110',
'111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,227,,,233,,,61,62,,,63,,,,,',
'47,,,,,,,,232,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96',
'97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,313,314,75,76,,,,,,309,310',
'316,104,103,105,106,,,234,,,,,,,48,,,108,107,109,98,59,100,99,101,,102',
'110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,227,,,233,,,61,62,,,63,',
',,,,47,,,,,,,,232,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90',
',,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31',
'30,104,103,105,106,,,234,,,,,,,48,,,108,107,109,98,59,100,99,101,289',
'102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,227,,,233,,,61,62,,',
'63,,285,,283,,47,,,,,,,,232,,,,,91,286,85,86,87,89,,,,84,287,,,,,,,65',
',290,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,33,34,75',
'76,,,,,,32,31,30,104,103,105,106,,,234,,,,,,,48,,,108,107,109,98,59',
'100,99,101,289,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,227,',
',233,,,61,62,,,63,,285,,283,,47,,,,,,,,232,,,,,91,286,85,86,87,89,,',
',84,287,,,,,,,65,,290,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,',
'68,69,71,33,34,75,76,,,,,,32,31,30,104,103,105,106,,,234,,,,,,,48,,',
'108,107,109,98,59,100,99,101,289,102,110,111,,94,95,,45,46,44,,,,,,',
',,,,,,,,,,,,,227,,,233,,,61,62,,,63,,285,,283,,47,,,,,,,,232,,,,,91',
'286,85,86,87,89,,,,84,287,222,,,,,,65,,290,81,88,90,,,96,97,72,73,74',
',60,,,,66,67,,,,70,,68,69,71,313,314,75,76,,,,,,309,310,316,104,103',
'105,106,,,234,,,,,,,48,,,108,107,109,98,59,100,99,101,,102,110,111,',
'94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,227,,,233,,,61,62,,,63,,,,,,47,,',
',,,,,232,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97',
'72,73,74,,60,,,,66,67,,,,70,,68,69,71,313,314,75,76,,,,,,309,310,316',
'104,103,105,106,,,234,,,,,,,48,,,108,107,109,98,59,100,99,101,,102,110',
'111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,227,,,233,,,61,62,,,63,,,,,',
'47,,,,,,,,232,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96',
'97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,313,314,75,76,,,,,,309,310',
'316,104,103,105,106,,,234,,,,,,,48,,,108,107,109,98,59,100,99,101,,102',
'110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,227,,,233,,,61,62,,,63,',
',,,,47,,,,,,,,232,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90',
',,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,313,314,75,76,,,,,,309',
'310,316,104,103,105,106,,,234,,,,,,,48,,,108,107,109,98,59,100,99,101',
',102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,227,,,233,,,61,62,',
',63,,,,,,47,,,,,,,,232,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81',
'88,90,,,96,97,72,73,74,12,60,,,,66,67,,,,70,,68,69,71,33,34,75,76,,',
',,,32,31,30,104,103,105,106,,,22,,,,,,11,48,,13,108,107,109,98,59,100',
'99,101,,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,43,,,36,,,61',
'62,,,63,,38,,,,47,,,,,,,,23,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65',
',,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,313,314,75',
'76,,,,,,309,310,316,104,103,105,106,,,234,,,,,,,311,,,108,107,109,98',
'59,100,99,101,,102,110,111,,94,95,,,,317,,,,,,,,,,,,,,,,,,,,307,,,233',
',,61,62,,,63,,,,,,,,,,,,,,,,,,,91,83,85,86,87,89,,,,84,92,,,,518,,,65',
',,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,313,314,75',
'76,,,,,,309,310,316,104,103,105,106,,,234,,,,,,,311,,,108,107,109,98',
'59,100,99,101,,102,110,111,,94,95,,,,317,,,,,,,,,,,,,,,,,,,,307,,,303',
',,61,62,,,63,,,,,,,,,,,,,,,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,',
',81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,313,314,75,76',
',,,,,309,310,316,104,103,105,106,,,234,,,,,,,48,,,108,107,109,98,59',
'100,99,101,,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,227,,,233',
'534,,61,62,,,63,,,,,,47,,,,,,,,232,,,,,91,83,85,86,87,89,,,,84,92,,',
',,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,33,34',
'75,76,,,,,,32,31,30,104,103,105,106,,,22,,,,,,,48,,,108,107,109,98,59',
'100,99,101,,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,227,,,233',
',,61,62,,,63,,,,,,47,,,,,,,,23,,,,,91,83,85,86,87,89,,,,84,92,,,,,,',
'65,,,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,313,314',
'75,76,,,,,,309,310,316,104,103,105,106,,,234,,,,,,,48,,,108,107,109',
'98,59,100,99,101,289,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,',
',227,,,233,,,61,62,,,63,,,,,,47,,,,,,,,232,,,,,91,286,85,86,87,89,,',
',84,287,,,,,,,65,,290,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,',
'68,69,71,33,34,75,76,,,,,,32,31,30,104,103,105,106,,,22,,,,,,,48,,,108',
'107,109,98,59,100,99,101,,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,',
',,,,,,227,,,233,,,61,62,,,63,,,,,,47,,,,,,,,23,,,,,91,83,85,86,87,89',
',,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68',
'69,71,33,34,75,76,,,,,,32,31,30,104,103,105,106,,,22,,,,,,,48,,,108',
'107,109,98,59,100,99,101,,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,',
',,,,,,227,,,233,,,61,62,,,63,,,,,,47,,,,,,,,23,,,,,91,83,85,86,87,89',
',,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68',
'69,71,313,314,75,76,,,,,,309,310,316,104,103,105,106,,,234,,,,,,,311',
',,108,107,109,596,59,100,99,597,,102,110,111,,94,95,,,,317,,,,,,,,,',
',,,,,,,,,,598,,,233,,,61,62,,,63,,,,,,,,,,,,,,,,,,,91,83,85,86,87,89',
',,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68',
'69,71,313,314,75,76,,,,,,309,310,316,104,103,105,106,,,234,,,,,,,311',
',,108,107,109,596,59,100,99,597,,102,110,111,,94,95,,,,317,,,,,,,,,',
',,,,,,,,,,598,,,233,,,61,62,,,63,,,,,,,,,,,,,,,,,,,91,83,85,86,87,89',
',,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68',
'69,71,313,314,75,76,,,,,,309,310,316,104,103,105,106,,,234,,,,,,,48',
',,108,107,109,98,59,100,99,101,,102,110,111,,94,95,,45,46,44,,,,,,,',
',,,,,,,,,,,,227,,,233,,,61,62,,,63,,,,,,47,,,,,,,,232,,,,,91,83,85,86',
'87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,',
'70,,68,69,71,33,34,75,76,,,,,,32,31,30,104,103,105,106,,,234,,,,,,,48',
',,108,107,109,98,59,100,99,101,289,102,110,111,,94,95,,45,46,44,,,,',
',,,,,,,,,,,,,,,227,,,233,,,61,62,,,63,,285,,283,,47,,,,,,,,232,,,,,91',
'286,85,86,87,89,,,,84,287,,,,,,,65,,290,81,88,90,,,96,97,72,73,74,,60',
',,,66,67,,,,70,,68,69,71,313,314,75,76,,,,,,309,310,316,104,103,105',
'106,,,234,,,,,,,48,,,108,107,109,98,59,100,99,101,,102,110,111,,94,95',
',45,46,44,,,,,,,,,,,,,,,,,,,,227,,,233,,,61,62,,,63,,,,,,47,,,,,,,,232',
',,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74',
',60,,,,66,67,,,,70,,68,69,71,313,314,75,76,,,,,,309,310,316,104,103',
'105,106,,,234,,,,,,,48,,,108,107,109,98,59,100,99,101,,102,110,111,',
'94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,227,,,233,,,61,62,,,63,,,,,,47,,',
',,,,,232,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97',
'72,73,74,,60,,,,66,67,,,,70,,68,69,71,313,314,75,76,,,,,,309,310,316',
'104,103,105,106,,,234,,,,,,,48,,,108,107,109,98,59,100,99,101,,102,110',
'111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,227,,,233,,,61,62,,,63,,,,,',
'47,,,,,,,,232,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96',
'97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,313,314,75,76,,,,,,309,310',
'316,104,103,105,106,,,234,,,,,,,48,,,108,107,109,98,59,100,99,101,289',
'102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,227,,,233,,,61,62,,',
'63,,677,,283,,47,,,,,,,,232,,,,,91,286,85,86,87,89,,,,84,287,,,,,,,65',
',290,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,313,314',
'75,76,,,,,,309,310,316,104,103,105,106,,,234,,,,,,,48,,,108,107,109',
'98,59,100,99,101,289,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,',
',227,,,233,,,61,62,,,63,,,,283,,47,,,,,,,,232,,,,,91,286,85,86,87,89',
',,,84,287,,,,,,,65,,290,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70',
',68,69,71,313,314,75,76,,,,,,309,310,316,104,103,105,106,,,234,,,,,',
',48,,,108,107,109,98,59,100,99,101,,102,110,111,,94,95,,45,46,44,,,',
',,,,,,,,,,,,,,,,227,,,233,,,61,62,,,63,,,,,,47,,,,,,,,232,,,,,91,83',
'85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,,66',
'67,,,,70,,68,69,71,313,314,75,76,,,,,,309,310,316,104,103,105,106,,',
'234,,,,,,,48,,,108,107,109,98,59,100,99,101,,102,110,111,,94,95,,45',
'46,44,,,,,,,,,,,,,,,,,,,,227,,,233,,,61,62,,,63,,,,,,47,,,,,,,,232,',
',,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,12',
'60,,,,66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31,30,104,103,105,106',
',,22,,,,,,11,48,,13,108,107,109,98,59,100,99,101,,102,110,111,,94,95',
',45,46,44,,,,,,,,,,,,,,,,,,,,43,,,36,,,61,62,,,63,,38,,,,47,,,,,,,,23',
',,,,91,83,85,86,87,89,,,,84,92,,,,,,400,65,,,81,88,90,,,96,97,72,73',
'74,,60,,,,66,67,,,,70,,68,69,71,313,314,75,76,,,,,,309,310,316,104,103',
'105,106,,,234,,,,,,,311,,,108,107,109,98,59,100,99,101,,102,110,111',
',94,95,,,,317,,,,,,,,,,,,,,,,,,,,307,,,303,,,61,62,,,63,,,,,,,,,,,,',
',,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74',
',60,,,,66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31,30,104,103,105,106',
',,234,,,,,,,48,,,108,107,109,98,59,100,99,101,289,102,110,111,,94,95',
',45,46,44,,,,,,,,,,,,,,,,,,,,227,,,233,,,61,62,,,63,,285,,283,,47,,',
',,,,,232,,,,,91,286,85,86,87,89,,,,84,287,,,,,,,65,,290,81,88,90,,,96',
'97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,313,314,75,76,,,,,,309,310',
'316,104,103,105,106,,,234,,,,,,,311,,,108,107,109,98,59,100,99,101,',
'102,110,111,,94,95,,,,317,,,,,,,,,,,,,,,,,,,,307,,,303,,,61,62,,,63',
',,,,,,,,,,,,,,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96',
'97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,313,314,75,76,,,,,,309,310',
'316,104,103,105,106,,,234,,,,,,,48,,,108,107,109,98,59,100,99,101,,102',
'110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,227,,,233,,,61,62,,,63,',
',,,,47,,,,,,,,232,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90',
',,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,313,314,75,76,,,,,,309',
'310,316,104,103,105,106,,,234,,,,,,,48,,,108,107,109,98,59,100,99,101',
',102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,227,,,233,,,61,62,',
',63,,,,,,47,,,,,,,,232,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81',
'88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,33,34,75,76,,,,',
',32,31,30,104,103,105,106,,,22,,,,,,,48,,,108,107,109,98,59,100,99,101',
',102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,227,,,233,,,61,62,',
',63,,,,,,47,,,,,,,,23,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88',
'90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,313,314,75,76,,,,,',
'309,310,316,104,103,105,106,,,234,,,,,,,48,,,108,107,109,98,59,100,99',
'101,289,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,227,,,233,,',
'61,62,,,63,,677,,,,47,,,,,,,,232,,,,,91,286,85,86,87,89,,,,84,287,,',
',,,,65,,290,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,313',
'314,75,76,,,,,,309,310,316,104,103,105,106,,,234,,,,,,,48,,,108,107',
'109,98,59,100,99,101,289,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,',
',,,,,227,,,233,,,61,62,,,63,,,,,,47,,,,,,,,232,,,,,91,286,85,86,87,89',
',,,84,287,,,,,,,65,,290,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70',
',68,69,71,313,314,75,76,,,,,,309,310,316,104,103,105,106,,,234,,,,,',
',48,,,108,107,109,98,59,100,99,101,,102,110,111,,94,95,,45,46,44,,,',
',,,,,,,,,,,,,,,,227,,,233,,,61,62,,,63,,,,,,47,,,,,,,,232,,,,,91,83',
'85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,,66',
'67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31,30,104,103,105,106,,,234,',
',,,,,48,,,108,107,109,98,59,100,99,101,289,102,110,111,,94,95,,45,46',
'44,,,,,,,,,,,,,,,,,,,,227,,,233,,,61,62,,,63,,285,,283,,47,,,,,,,,232',
',,,,91,286,85,86,87,89,,,,84,287,,,,,,,65,,290,81,88,90,,,96,97,72,73',
'74,,60,,,,66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31,30,104,103,105',
'106,,,22,,,,,,,48,,,108,107,109,98,59,100,99,101,,102,110,111,,94,95',
',45,46,44,,,,,,,,,,,,,,,,,,,,227,,,233,,,61,62,,,63,,,,,,47,,,,,,,,23',
',,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74',
',60,,,,66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31,30,104,103,105,106',
',,22,,,,,,,48,,,108,107,109,98,59,100,99,101,,102,110,111,,94,95,,45',
'46,44,,,,,,,,,,,,,,,,,,,,227,,,233,,,61,62,,,63,,,,,,47,,,,,,,,23,,',
',,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,,60',
',,,66,67,,,,70,,68,69,71,313,314,75,76,,,,,,309,310,316,104,103,105',
'106,,,234,,,,,,,48,,,108,107,109,98,59,100,99,101,,102,110,111,,94,95',
',45,46,44,,,,,,,,,,,,,,,,,,,,227,,,233,,,61,62,,,63,,774,,,,47,,,,,',
',,232,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,72',
'73,74,,60,,,,66,67,,,,70,,68,69,71,313,314,75,76,,,,,,309,310,316,104',
'103,105,106,,,234,,,,,,,48,,,108,107,109,98,59,100,99,101,,102,110,111',
',94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,227,,,233,,,61,62,,,63,,,,,,47,',
',,,,,,232,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97',
'72,73,74,,60,,,,66,67,,,,70,,68,69,71,313,314,75,76,,,,,,309,310,316',
'104,103,105,106,,,234,,,,,,,48,,,108,107,109,98,59,100,99,101,289,102',
'110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,227,,,233,,,61,62,,,63,',
'677,,283,,47,,,,,,,,232,,,,,91,286,85,86,87,89,,,,84,287,,,,,,,65,,290',
'81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,313,314,75,76',
',,,,,309,310,316,104,103,105,106,,,234,,,,,,,48,,,108,107,109,98,59',
'100,99,101,289,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,227,',
',233,,,61,62,,,63,,,,283,,47,,,,,,,,232,,,,,91,286,85,86,87,89,,,,84',
'287,,,,,,,65,,290,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69',
'71,33,34,75,76,,,,,,32,31,30,104,103,105,106,,,234,,,,,,,48,,,108,107',
'109,98,59,100,99,101,,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,',
',,227,,,233,,,61,62,,,63,,,,,,47,,,,,,,,232,,,,,91,83,85,86,87,89,,',
',84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69',
'71,33,34,75,76,,,,,,32,31,30,104,103,105,106,,,234,,,,,,,48,,,108,107',
'109,98,59,100,99,101,,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,',
',,227,,,233,,,61,62,,,63,,,,,,47,,,,,,,,232,,,,,91,83,85,86,87,89,,',
',84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69',
'71,33,34,75,76,,,,,,32,31,30,104,103,105,106,,,234,,,,,,,48,,,108,107',
'109,98,59,100,99,101,,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,',
',,227,,,233,,,61,62,,,63,,,,,,47,,,,,,,,232,,,,,91,83,85,86,87,89,,',
',84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69',
'71,33,34,75,76,,,,,,32,31,30,104,103,105,106,,,234,,,,,,,48,,,108,107',
'109,98,59,100,99,101,,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,',
',,227,,,233,,,61,62,,,63,,,,,,47,,,,,,,,232,,,,,91,83,85,86,87,89,,',
',84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69',
'71,33,34,75,76,,,,,,32,31,30,104,103,105,106,,,234,,,,,,,48,,,108,107',
'109,98,59,100,99,101,,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,',
',,227,,,233,,,61,62,,,63,,,,,,47,,,,,,,,232,,,,,91,83,85,86,87,89,,',
',84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69',
'71,313,314,75,76,,,,,,309,310,316,104,103,105,106,,,234,,,,,,,48,,,108',
'107,109,98,59,100,99,101,,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,',
',,,,,,227,,,233,,,61,62,,,63,,,,,,47,,,,,,,,232,,,,,91,83,85,86,87,89',
',,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68',
'69,71,313,314,75,76,,,,,,309,310,316,104,103,105,106,,,234,,,,,,,48',
',,108,107,109,98,59,100,99,101,,102,110,111,,94,95,,45,46,44,,,,,,,',
',,,,,,,,,,,,227,,,233,,,61,62,,,63,,,,,,47,,,,,,,,232,,,,,91,83,85,86',
'87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,',
'70,,68,69,71,313,314,75,76,,,,,,309,310,316,104,103,105,106,,,234,,',
',,,,48,,,108,107,109,98,59,100,99,101,,102,110,111,,94,95,,45,46,44',
',,,,,,,,,,,,,,,,,,,227,,,233,,,61,62,,,63,,,,,,47,,,,,,,,232,,,,,91',
'83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,',
'66,67,,,,70,,68,69,71,313,314,75,76,,,,,,309,310,316,104,103,105,106',
',,234,,,,,,,311,,,108,107,109,98,59,100,99,101,,102,110,111,,94,95,',
',,317,,,,,,,,,,,,,,,,,,,,307,,,303,,,61,62,,,63,,,,,,,,,,,,,,,,,,,91',
'83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,',
'66,67,,,,70,,68,69,71,313,314,75,76,,,,,,309,310,316,104,103,105,106',
',,234,,,,,,,311,,,108,107,109,98,59,100,99,101,,102,110,111,,94,95,',
',,317,,,,,,,,,,,,,,,,,,,,307,,,303,,,61,62,,,63,,,,,,,,,,,,,,,,,,,91',
'83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,',
'66,67,,,,70,,68,69,71,313,314,75,76,,,,,,309,310,316,104,103,105,106',
',,234,,,,,,,48,,,108,107,109,98,59,100,99,101,,102,110,111,,94,95,,45',
'46,44,,,,,,,,,,,,,,,,,,,,227,,,233,,,61,62,,,63,,416,,,,47,,,,,,,,232',
',,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74',
',60,,,,66,67,,,,70,,68,69,71,313,314,75,76,,,,,,309,310,316,104,103',
'105,106,,,234,,,,,,,48,,,108,107,109,98,59,100,99,101,,102,110,111,',
'94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,227,,,233,,,61,62,,,63,,,,,,47,,',
',,,,,232,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97',
'72,73,74,,60,,,,66,67,,,,70,,68,69,71,313,314,75,76,,,,,,309,310,316',
'104,103,105,106,,,234,,,,,,,48,,,108,107,109,98,59,100,99,101,,102,110',
'111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,227,,,233,,,61,62,,,63,,285',
',,,47,,,,,,,,232,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90',
',,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31',
'30,104,103,105,106,,,22,,,,,,,48,,,108,107,109,98,59,100,99,101,,102',
'110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,227,,,233,,,61,62,,,63,',
',,,,47,,,,,,,,23,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90',
',,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31',
'30,104,103,105,106,,,234,,,,,,,48,,,108,107,109,98,59,100,99,101,289',
'102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,227,,,233,,,61,62,,',
'63,,285,,283,,47,,,,,,,,232,,,,,91,286,85,86,87,89,,,,84,287,,,,,,,65',
',290,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,313,314',
'75,76,,,,,,309,310,316,104,103,105,106,,,234,,,,,,,48,,,108,107,109',
'98,59,100,99,101,,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,227',
',,233,,,61,62,,,63,,,,,,47,,,,,,,,232,,,,,91,83,85,86,87,89,,,,84,92',
',,,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,33',
'34,75,76,,,,,,32,31,30,104,103,105,106,,,234,,,,,,,48,,,108,107,109',
'98,59,100,99,101,,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,227',
',,233,,,61,62,,,63,,,,,,47,,,,,,,,232,,,,,91,83,85,86,87,89,,,,84,92',
',,,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,313',
'314,75,76,,,,,,309,310,316,104,103,105,106,,,234,,,,,,,48,,,108,107',
'109,98,59,100,99,101,,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,',
',,227,,,233,,,61,62,,,63,,,,,,47,,,,,,,,232,,,,,91,83,85,86,87,89,,',
',84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69',
'71,313,314,75,76,,,,,,309,310,316,104,103,105,106,,,234,,,,,,,48,,,108',
'107,109,98,59,100,99,101,,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,',
',,,,,,227,,,233,,,61,62,,,63,,,,,,47,,,,,,,,232,,,,,91,83,85,86,87,89',
',,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68',
'69,71,313,314,75,76,,,,,,309,310,316,104,103,105,106,,,234,,,,,,,48',
',,108,107,109,98,59,100,99,101,,102,110,111,,94,95,,45,46,44,,,,,,,',
',,,,,,,,,,,,227,,,233,,,61,62,,,63,,,,,,47,,,,,,,,232,,,,,91,83,85,86',
'87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,',
'70,,68,69,71,313,314,75,76,,,,,,309,310,316,104,103,105,106,,,234,,',
',,,,48,,,108,107,109,98,59,100,99,101,,102,110,111,,94,95,,45,46,44',
',,,,,,,,,,,,,,,,,,,227,,,233,,,61,62,,,63,,,,,,47,,,,,,,,232,,,,,91',
'83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,',
'66,67,,,,70,,68,69,71,313,314,75,76,,,,,,309,310,316,104,103,105,106',
',,234,,,,,,,48,,,108,107,109,98,59,100,99,101,,102,110,111,,94,95,,45',
'46,44,,,,,,,,,,,,,,,,,,,,227,,,233,,,61,62,,,63,,,,,,47,,,,,,,,232,',
',,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,',
'60,,,,66,67,,,,70,,68,69,71,313,314,75,76,,,,,,309,310,316,104,103,105',
'106,,,234,,,,,,,311,,,108,107,109,98,59,100,99,101,,102,110,111,,94',
'95,,,,317,,,,,,,,,,,,,,,,,,,,904,,,233,,,61,62,,,63,,,,,,,,,,,,,,,,',
',,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,,60',
',,,66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31,30,104,103,105,106,',
',22,,,,,,,48,,,108,107,109,98,59,100,99,101,,102,110,111,,94,95,,45',
'46,44,,,,,,,,,,,,,,,,,,,,227,,,233,,,61,62,,,63,,,,,,47,,,,,,,,23,,',
',,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,,60',
',,,66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31,30,104,103,105,106,',
',22,,,,,,,48,,,108,107,109,98,59,100,99,101,,102,110,111,,94,95,,45',
'46,44,,,,,,,,,,,,,,,,,,,,227,,,233,,,61,62,,,63,,,,,,47,,,,,,,,23,,',
',,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,,60',
',,,66,67,,,,70,,68,69,71,313,314,75,76,,,,,,309,310,316,104,103,105',
'106,,,234,,,,,,,48,,,108,107,109,98,59,100,99,101,289,102,110,111,,94',
'95,,45,46,44,,,,,,,,,,,,,,,,,,,,227,,,233,,,61,62,,,63,,,,283,,47,,',
',,,,,232,,,,,91,286,85,86,87,89,,,,84,287,,,,,,,65,,290,81,88,90,,,96',
'97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,313,314,75,76,,,,,,309,310',
'316,104,103,105,106,,,234,,,,,,,48,,,108,107,109,98,59,100,99,101,,102',
'110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,227,,,233,,,61,62,,,63,',
',,,,47,,,,,,,,232,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90',
',,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,313,314,75,76,,,,,,309',
'310,316,104,103,105,106,,,234,,,,,,,311,,,108,107,109,98,59,100,99,101',
',102,110,111,,94,95,,,,317,,,,,,,,,,,,,,,,,,,,904,,,233,,,61,62,,,63',
',,,,,,,,,,,,,,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96',
'97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,313,314,75,76,,,,,,309,310',
'316,104,103,105,106,,,234,,,,,,,311,,,108,107,109,98,59,100,99,101,',
'102,110,111,,94,95,,,,317,,,,,,,,,,,,,,,,,,,,977,,,233,,,61,62,,,63',
',,,,,,,,,,,,,,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96',
'97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,313,314,75,76,,,,,,309,310',
'316,104,103,105,106,,,234,,,,,,,48,,,108,107,109,98,59,100,99,101,,102',
'110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,227,,,233,,,61,62,,,63,',
'677,,,,47,,,,,,,,232,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88',
'90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32',
'31,30,104,103,105,106,,,234,,,,,,,48,,,108,107,109,98,59,100,99,101',
'289,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,227,,,233,,,61,62',
',,63,,285,,283,,47,,,,,,,,232,,,,,91,286,85,86,87,89,,,,84,287,,,,,',
',65,,290,81,88,90,-281,,96,97,,,,-281,-281,-281,,,-281,-281,-281,564',
'-281,561,560,559,569,562,,,,,-281,-281,-281,,,572,,,,,-281,-281,,-281',
'-281,-281,-281,-281,,,,,,,,,,567,,,,,,,,,577,576,580,579,,-281,-281',
'-281,-281,-281,-281,-281,-281,-281,-281,-281,-281,-281,-281,,,-281,-281',
'-281,,,-281,,,-281,,,-281,-281,,-281,573,-281,,-281,,-281,-281,-281',
'-281,-281,-281,-281,,-281,,-281,,,,,,,,,,,,,-281,-281,-281,-281,-608',
'-281,,-281,,,,-608,-608,-608,,,-608,-608,-608,564,-608,561,560,559,569',
'562,,,,-608,-608,-608,-608,,,572,,,,,-608,-608,,-608,-608,-608,-608',
'-608,,,,,,,,,,567,760,,,,,,,,577,576,580,579,,-608,-608,-608,-608,-608',
'-608,-608,-608,-608,-608,-608,-608,-608,-608,,,-608,-608,-608,,,-608',
',,-608,,,-608,-608,,-608,573,-608,,-608,,-608,-608,-608,-608,-608,-608',
'-608,,-608,-608,-608,,,,,,,,,,,,,-608,-608,-608,-608,-609,-608,,-608',
',,,-609,-609,-609,,,-609,-609,-609,564,-609,561,560,559,569,562,,,,-609',
'-609,-609,-609,,,572,,,,,-609,-609,,-609,-609,-609,-609,-609,,,,,,,',
',,567,,,,,,,,,577,576,580,579,,-609,-609,-609,-609,-609,-609,-609,-609',
'-609,-609,-609,-609,-609,-609,,,-609,-609,-609,,,-609,,222,-609,,,-609',
'-609,,-609,573,-609,,-609,,-609,-609,-609,-609,-609,-609,-609,,-609',
'-609,-609,,,,,,,,,,,,,-609,-609,-609,-609,,-609,,-609,176,187,177,200',
'173,193,183,182,203,204,198,181,180,175,201,205,206,185,174,188,192',
'194,186,179,,,,195,202,197,196,189,199,184,172,191,190,,,,,,171,178',
'169,170,166,167,168,127,129,126,,128,,,,,,,,,161,162,,157,139,140,141',
'148,145,147,,,142,143,,,,163,164,149,150,,,,,,,,,,,,,,154,153,,138,160',
'156,155,151,152,146,144,136,159,137,,,165,91,,,,,,,,,,92,,,,,,,,,158',
'176,187,177,200,173,193,183,182,203,204,198,181,180,175,201,205,206',
'185,174,188,192,194,186,179,,,,195,202,197,196,189,199,184,172,191,190',
',,,,,171,178,169,170,166,167,168,127,129,,,128,,,,,,,,,161,162,,157',
'139,140,141,148,145,147,,,142,143,,,,163,164,149,150,,,,,,,,,,,,,,154',
'153,,138,160,156,155,151,152,146,144,136,159,137,,,165,91,,,,,,,,,,92',
',,,,,,,,158,176,187,177,200,173,193,183,182,203,204,198,181,180,175',
'201,205,206,185,174,188,192,194,186,179,,,,195,202,197,366,365,367,364',
'172,191,190,,,,,,171,178,169,170,361,362,363,359,129,100,99,360,,102',
',,,,,,161,162,,157,139,140,141,148,145,147,,,142,143,,,,163,164,149',
'150,,,,,,373,,,,,,,,154,153,,138,160,156,155,151,152,146,144,136,159',
'137,,,165,,,,,,,,,,,,,,,,,,,,158,176,187,177,200,173,193,183,182,203',
'204,198,181,180,175,201,205,206,185,174,188,192,194,186,179,,,,195,202',
'197,196,189,199,184,172,191,190,,,,,,171,178,169,170,166,167,168,127',
'129,397,396,128,,398,,,,,,,161,162,,157,139,140,141,148,145,147,,,142',
'143,,,,163,164,149,150,,,,,,,,,,,,,,154,153,,138,160,156,155,151,152',
'146,144,136,159,137,,,165,,,,,,,,,,,,,,,,,,,,158,176,187,177,200,173',
'193,183,182,203,204,198,181,180,175,201,205,206,185,174,188,192,194',
'186,179,,,,195,202,197,196,189,199,184,172,191,190,,,,,,171,178,169',
'170,166,167,168,127,129,,,128,,,,,,,,,161,162,,157,139,140,141,148,145',
'147,,,142,143,,,,163,164,149,150,,,,,,,,,,,,,,154,153,,138,160,156,155',
'151,152,146,144,136,159,137,,,165,91,,,,,,,,,,92,,,,,,,,,158,176,187',
'177,200,173,193,183,182,203,204,198,181,180,175,201,205,206,185,174',
'188,192,194,186,179,,,,195,202,197,196,189,199,184,172,191,190,,,,,',
'171,178,169,170,166,167,168,127,129,,,128,,,,,,,,,161,162,,157,139,140',
'141,148,145,147,,,142,143,,,,163,164,149,150,,,,,,,,,,,,,,154,153,,138',
'160,156,155,151,152,146,144,136,159,137,,,165,91,,,,,,,,,,92,,,,,,,',
',158,176,187,177,200,173,193,183,182,203,204,198,181,180,175,201,205',
'206,185,174,188,192,194,186,179,,,,195,202,197,196,189,199,184,172,191',
'190,,,,,,171,178,169,170,166,167,168,127,129,,,128,,,,,,,,,161,162,',
'157,139,140,141,148,145,147,,,142,143,,,,163,164,149,150,,,,,,,,,,,',
',,154,153,,138,160,156,155,151,152,146,144,136,159,137,-426,,165,,,',
',-426,-426,-426,,,-426,-426,-426,564,-426,561,560,559,569,562,158,,',
'-426,-426,-426,,,,572,,,,,-426,-426,,-426,-426,-426,-426,-426,,,,,,',
',,,567,,,,,,,,,577,576,580,579,,-426,-426,-426,-426,-426,-426,-426,-426',
'-426,-426,-426,-426,-426,-426,,,-426,-426,-426,,,-426,,273,-426,,,-426',
'-426,,-426,573,-426,,-426,,-426,-426,-426,-426,-426,-426,-426,,-426',
'-426,-426,,,,,,,,,,,,-297,-426,-426,,-426,,-426,-297,-297,-297,,,-297',
'-297,-297,564,-297,561,560,559,569,562,,,,,-297,-297,,,,572,,,,,-297',
'-297,,-297,-297,-297,-297,-297,,,,,,,,,,567,,,,,,,,,577,576,580,579',
',-297,-297,-297,-297,-297,-297,-297,-297,-297,-297,-297,-297,-297,-297',
',,-297,-297,-297,,,-297,,276,-297,,,-297,-297,,-297,573,-297,,-297,',
'-297,-297,-297,-297,-297,-297,-297,,-297,,-297,,,,,,,,,,,,-626,-297',
'-297,,-297,,-297,-626,-626,-626,,,-626,-626,-626,564,-626,561,560,559',
'569,562,,,,-626,-626,-626,,,,572,,,,,-626,-626,,-626,-626,-626,-626',
'-626,,,,,,,,,,567,,,,,,,,,,,580,579,,-626,-626,-626,-626,-626,-626,-626',
'-626,-626,-626,-626,-626,-626,-626,,,-626,-626,-626,,,-626,,273,-626',
',,-626,-626,,-626,573,-626,,-626,,-626,-626,-626,-626,-626,-626,-626',
',-626,-626,-626,,,,,,,,,,,,-626,-626,-626,,-626,,-626,-626,-626,-626',
',,-626,-626,-626,564,-626,561,560,559,569,562,,,,-626,-626,,,,,572,',
',,,-626,-626,,-626,-626,-626,-626,-626,,,,,,,,,,567,,564,,561,560,559',
'569,562,577,576,580,579,,,,,,572,,,,,,,-626,,,,,,,-626,,,,,273,-626',
',567,,,,,573,,,,426,430,580,579,427,,,,,,-626,-626,,161,162,,157,139',
'140,141,148,145,147,,-626,142,143,,,-626,163,164,149,150,,,573,,,273',
',,,,,,,154,153,,138,160,156,155,151,152,146,144,136,159,137,,,165,,',
',,433,437,,,432,,,,,,,,,161,162,158,157,139,140,141,148,145,147,,,142',
'143,,,,163,164,149,150,,,,,,273,,,,,,,,154,153,,138,160,156,155,151',
'152,146,144,136,159,137,,,165,,,,,487,430,,,488,,,,,,,,,161,162,158',
'157,139,140,141,148,145,147,,,142,143,,,,163,164,149,150,,,,,,,,,,,',
',,154,153,,138,160,156,155,151,152,146,144,136,159,137,,,165,,,,,655',
'430,,,656,,,,,,,,,161,162,158,157,139,140,141,148,145,147,,,142,143',
',,,163,164,149,150,,,,,,273,,,,,,,,154,153,,138,160,156,155,151,152',
'146,144,136,159,137,,,165,,,,,657,437,,,658,,,,,,,,,161,162,158,157',
'139,140,141,148,145,147,,,142,143,,,,163,164,149,150,,,,,,273,,,,,,',
',154,153,,138,160,156,155,151,152,146,144,136,159,137,,,165,,,,,688',
'430,,,689,,,,,,,,,161,162,158,157,139,140,141,148,145,147,,,142,143',
',,,163,164,149,150,,,,,,273,,,,,,,,154,153,,138,160,156,155,151,152',
'146,144,136,159,137,,,165,,,,,691,437,,,692,,,,,,,,,161,162,158,157',
'139,140,141,148,145,147,,,142,143,,,,163,164,149,150,,,,,,273,,,,,,',
',154,153,,138,160,156,155,151,152,146,144,136,159,137,,,165,,,,,655',
'430,,,656,,,,,,,,,161,162,158,157,139,140,141,148,145,147,,,142,143',
',,,163,164,149,150,,,,,,273,,,,,,,,154,153,,138,160,156,155,151,152',
'146,144,136,159,137,,,165,,,,,657,437,,,658,,,,,,,,,161,162,158,157',
'139,140,141,148,145,147,,,142,143,,,,163,164,149,150,,,,,,273,,,,,,',
',154,153,,138,160,156,155,151,152,146,144,136,159,137,,,165,,,,,742',
'430,,,743,,,,,,,,,161,162,158,157,139,140,141,148,145,147,,,142,143',
',,,163,164,149,150,,,,,,273,,,,,,,,154,153,,138,160,156,155,151,152',
'146,144,136,159,137,,,165,,,,,744,437,,,745,,,,,,,,,161,162,158,157',
'139,140,141,148,145,147,,,142,143,,,,163,164,149,150,,,,,,273,,,,,,',
',154,153,,138,160,156,155,151,152,146,144,136,159,137,,,165,,,,,863',
'437,,,864,,,,,,,,,161,162,158,157,139,140,141,148,145,147,,,142,143',
',,,163,164,149,150,,,,,,273,,,,,,,,154,153,,138,160,156,155,151,152',
'146,144,136,159,137,,,165,,,,,487,430,,,488,,,,,,,,,161,162,158,157',
'139,140,141,148,145,147,,,142,143,,,,163,164,149,150,,,,,,273,,,,,,',
',154,153,,138,160,156,155,151,152,146,144,136,159,137,,564,165,561,560',
'559,569,562,564,,561,560,559,569,562,,,572,,,,,158,,572,564,,561,560',
'559,569,562,,,,,,,,567,,572,,,,,567,,577,576,580,579,,,,577,576,580',
'579,,,,564,567,561,560,559,569,562,,,,577,576,580,579,,564,572,561,560',
'559,569,562,573,,,,,,,573,,572,,,,,,,567,564,,561,560,559,569,562,573',
',,580,579,,,567,564,572,561,560,559,569,562,,,,580,579,,,,,572,,,,,',
',567,,,,,,573,,,,,580,579,,,567,760,,1011,437,,573,1010,,577,576,580',
'579,,,,161,162,,157,139,140,141,148,145,147,,,142,143,573,,,163,164',
'149,150,,,,,,273,,,573,,,,,154,153,,138,160,156,155,151,152,146,144',
'136,159,137,,564,165,561,560,559,569,562,564,,561,560,559,569,562,,',
'572,,,,,158,,572,564,,561,560,559,569,562,,,,,,,,567,,572,,,,,567,,577',
'576,580,579,,,,,,580,579,,,,564,567,561,560,559,569,562,,,,,,580,579',
',,572,,,,,,573,,,,,,,573,,,,,,,,,567,1039,430,,,1040,,,573,,,580,579',
',161,162,,157,139,140,141,148,145,147,,,142,143,,,,163,164,149,150,',
',,,,273,,,,,573,,,154,153,,138,160,156,155,151,152,146,144,136,159,137',
',,165,,,,,1041,437,,,1042,,,,,,,,,161,162,158,157,139,140,141,148,145',
'147,,,142,143,,,,163,164,149,150,,,,,,273,,,,,,,,154,153,,138,160,156',
'155,151,152,146,144,136,159,137,,564,165,561,560,559,569,562,564,,561',
'560,559,569,562,,,572,,,,,158,,572,,,,,,,,,,,,,,,567,,,,,,,567,,,,580',
'579,,,,,,580,579,,,,,,,,,,,,,,,,,,,,,,,,,,573,,,,,,,573' ]
        racc_action_table = arr = ::Array.new(26543, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

clist = [
'98,341,342,450,450,860,225,98,98,98,22,913,98,98,98,64,98,602,61,1,698',
'698,763,763,98,3,98,98,98,348,485,29,349,688,598,935,98,98,598,98,98',
'98,98,98,13,352,22,1039,1040,17,549,1054,594,61,27,80,17,333,742,743',
'333,27,225,80,485,17,312,98,98,98,98,98,98,98,98,98,98,98,98,98,98,586',
'587,98,98,98,861,98,98,862,668,98,15,450,98,98,29,98,16,98,688,98,64',
'98,98,98,98,98,98,98,698,98,763,98,19,341,342,744,29,860,341,342,860',
'602,860,913,98,98,98,98,913,98,101,98,348,688,1041,349,688,101,101,101',
'602,98,101,101,101,602,101,935,352,689,688,312,935,549,101,594,101,101',
'101,1039,1040,742,743,1054,1039,1040,101,101,1054,101,101,101,101,101',
'745,668,226,5,25,586,587,744,5,506,586,587,388,862,493,861,293,228,862',
'40,455,293,494,101,101,101,101,101,101,101,101,101,101,101,101,101,101',
'391,1041,101,101,101,689,101,101,43,744,101,493,48,101,101,669,101,596',
'101,494,101,226,101,101,101,101,101,101,101,745,101,72,101,506,506,506',
'228,1041,388,455,689,619,1041,689,622,101,101,101,101,669,101,432,101',
'655,506,87,656,689,432,432,432,345,101,391,432,432,345,432,745,725,596',
'725,725,725,88,725,359,596,360,597,820,794,596,359,89,360,596,432,432',
'361,432,432,432,432,432,931,361,931,931,931,90,931,619,619,596,622,622',
'44,44,655,691,619,656,992,622,992,317,317,432,432,432,432,432,432,432',
'432,432,432,432,432,432,432,597,820,432,432,432,794,432,597,820,375',
'432,124,597,432,377,725,597,820,432,207,432,227,432,432,432,432,432',
'432,432,710,432,691,432,382,597,820,229,18,691,863,710,931,362,691,433',
'432,432,691,432,362,432,433,433,433,44,44,889,433,433,363,433,364,432',
'317,317,691,363,889,364,433,375,375,375,710,710,377,377,377,385,18,433',
'433,49,433,433,433,433,433,41,49,42,230,863,18,382,382,382,393,49,863',
'889,889,379,365,863,379,334,710,863,334,365,433,433,433,433,433,433',
'433,433,433,433,433,433,433,433,234,863,433,433,433,41,433,42,547,889',
'433,547,321,433,385,385,385,426,433,41,433,42,433,433,433,433,433,433',
'433,683,433,433,433,393,393,393,427,638,379,379,366,266,367,683,657',
'433,433,366,433,367,433,657,657,657,321,269,657,657,657,426,657,567',
'433,567,567,567,480,567,321,657,657,657,657,426,703,224,280,703,427',
'638,657,657,224,657,657,657,657,657,369,281,304,224,427,638,305,369',
'284,304,480,567,289,305,480,480,480,480,304,297,567,299,305,657,657',
'657,657,657,657,657,657,657,657,657,657,657,657,300,306,657,657,657',
'308,657,657,306,301,657,307,308,657,657,310,657,306,657,311,657,308',
'657,657,657,657,657,657,657,756,657,657,657,339,756,339,339,339,339',
'339,9,9,9,9,9,657,657,657,657,339,657,658,657,961,323,316,961,318,658',
'658,658,323,657,658,658,658,322,658,126,350,323,339,339,126,126,481',
'350,658,658,658,339,339,339,339,761,350,325,658,658,761,658,658,658',
'658,658,851,331,851,851,851,335,851,722,346,722,722,722,481,722,347',
'870,481,481,481,481,870,339,351,658,658,658,658,658,658,658,658,658',
'658,658,658,658,658,353,851,658,658,658,523,658,658,722,381,658,384',
'523,658,658,387,658,722,658,390,658,523,658,658,658,658,658,658,658',
'461,658,849,658,849,849,849,901,849,901,901,901,412,901,415,600,658',
'658,658,658,417,658,600,658,421,2,2,2,2,2,2,600,461,658,2,2,461,461',
'424,2,849,2,2,2,2,2,2,2,425,849,20,20,434,2,2,2,2,2,2,2,764,764,2,442',
'764,764,764,445,2,2,2,2,2,2,2,2,2,2,2,2,463,2,2,2,464,2,2,465,2,2,2',
'445,445,445,445,445,445,445,445,445,445,445,466,445,445,748,944,445',
'445,495,2,944,748,2,340,340,2,2,462,496,2,748,2,445,513,445,2,445,445',
'445,445,445,445,445,2,445,537,537,514,2,2,2,2,2,2,713,713,517,2,2,462',
'445,519,445,462,462,2,731,731,2,2,2,757,757,2,2,36,36,36,36,36,36,1025',
'1025,903,36,36,524,527,535,36,903,36,36,36,36,36,36,36,536,903,545,548',
'552,36,36,36,36,36,36,36,553,555,36,556,557,566,574,420,36,36,578,36',
'36,36,36,36,36,36,36,36,581,36,36,36,583,36,36,588,36,36,36,420,420',
'420,420,420,420,420,420,420,420,420,692,420,420,965,589,420,420,692',
'36,626,965,36,692,629,36,36,692,631,36,965,36,420,635,420,36,420,420',
'420,420,420,420,420,36,420,639,644,864,36,36,36,36,36,36,864,974,650',
'36,36,864,420,659,974,864,661,36,667,674,36,36,36,974,676,36,36,209',
'209,209,209,209,209,685,687,975,209,209,690,693,694,209,975,209,209',
'209,209,209,209,209,697,975,699,702,709,209,209,209,209,209,209,209',
'724,726,209,733,738,741,773,660,209,209,778,209,209,209,209,209,209',
'209,209,209,796,209,209,209,797,209,209,799,209,209,209,660,660,660',
'660,660,660,660,660,660,660,660,976,660,660,978,800,660,660,976,209',
'801,978,209,803,804,209,209,976,805,209,978,209,660,806,660,209,660',
'660,660,660,660,660,660,209,660,819,823,1017,209,209,209,209,209,209',
'1017,1042,826,209,209,827,660,832,1042,1017,833,209,834,1042,209,209',
'209,1042,835,209,209,233,233,233,233,233,233,839,840,842,233,233,843',
'845,848,233,850,233,233,233,233,233,233,233,295,295,295,295,295,233',
'233,233,233,233,233,233,853,1009,233,1009,1009,1009,856,1009,233,233',
'866,233,233,233,233,233,233,233,233,233,871,233,233,233,872,233,233',
'873,233,233,233,24,24,24,24,24,24,24,24,24,24,24,882,24,24,883,900,24',
'24,904,233,905,907,233,908,933,233,233,937,938,233,943,233,24,951,24',
'233,24,24,24,24,24,24,24,233,24,954,955,956,233,233,233,233,233,233',
'957,959,969,233,233,977,24,980,981,982,983,233,984,986,233,233,233,1010',
'1011,233,233,298,298,298,298,298,298,1013,1024,1029,298,298,1030,1031',
'1032,298,1033,298,298,298,298,298,298,298,512,512,512,512,512,298,298',
'298,298,298,298,298,1034,1035,298,682,682,682,682,682,298,298,1038,298',
'298,298,298,298,298,298,298,298,1043,298,298,298,1044,298,298,1056,298',
'298,298,278,278,278,278,278,278,278,278,278,278,278,,278,278,,,278,278',
',298,,,298,,,298,298,,,298,,298,278,,278,298,278,278,278,278,278,278',
'278,298,278,,,,298,298,298,298,298,298,,,,298,298,,278,,,,,298,,,298',
'298,298,,,298,298,303,303,303,303,303,303,,,,303,303,,,,303,,303,303',
'303,303,303,303,303,,,,,,303,303,303,303,303,303,303,,,303,,,,,,303',
'303,,303,303,303,303,303,303,303,303,303,,303,303,303,,303,303,,303',
'303,303,440,440,440,440,440,440,440,440,440,440,440,,440,440,,,440,440',
',303,,,303,,,303,303,,,303,,303,440,,440,303,440,440,440,440,440,440',
'440,303,440,,,,303,303,303,303,303,303,,,,303,303,,440,,,,,303,,,303',
'303,303,,,303,303,328,328,328,328,328,328,,,,328,328,,,,328,,328,328',
'328,328,328,328,328,,,,,,328,328,328,328,328,328,328,,,328,,,,,,328',
'328,,328,328,328,328,328,328,328,328,328,,328,328,328,,328,328,,328',
'328,328,484,484,484,484,484,484,484,484,484,484,484,,484,484,,,484,484',
',328,,,328,,,328,328,,,328,,328,484,,484,328,484,484,484,484,484,484',
'484,328,484,,,,328,328,328,328,328,328,,,,328,328,484,484,,,,,328,,',
'328,328,328,,,328,328,406,406,406,406,406,406,,,,406,406,,,,406,,406',
'406,406,406,406,406,406,,,,,,406,406,406,406,406,406,406,,,406,,,,,',
'406,406,406,406,406,406,406,406,406,406,406,406,,406,406,406,,406,406',
',406,406,406,533,533,533,533,533,533,533,533,533,533,533,,533,533,,',
'533,533,,406,,,406,,,406,406,,,406,,406,533,,533,406,533,533,533,533',
'533,533,533,406,533,,,,406,406,406,406,406,406,,,,406,406,,533,,,,,406',
',,406,406,406,,,406,406,582,582,582,582,582,582,,,,582,582,,,,582,,582',
'582,582,582,582,582,582,,,,,,582,582,582,582,582,582,582,,,582,,,,,',
'582,582,,582,582,582,582,582,582,582,582,582,,582,582,582,,582,582,',
'582,582,582,696,696,696,696,696,696,696,696,696,696,696,,696,696,,,696',
'696,,582,,,582,,,582,582,,,582,,582,696,,696,582,696,696,696,696,696',
'696,696,582,696,,,,582,582,582,582,582,582,,,,582,582,,696,,,,,582,',
',582,582,582,,,582,582,585,585,585,585,585,585,,,,585,585,,,,585,,585',
'585,585,585,585,585,585,,,,,,585,585,585,585,585,585,585,,,585,,,,,',
'585,585,,585,585,585,585,585,585,585,585,585,,585,585,585,,585,585,',
'585,585,585,775,775,775,775,775,775,775,775,775,775,775,,775,775,,,775',
'775,,585,,,585,,,585,585,,,585,,585,775,,775,585,775,775,775,775,775',
'775,775,585,775,,,,585,585,585,585,585,585,,,,585,585,,775,,,,,585,',
',585,585,585,,,585,585,707,707,707,707,707,707,,,,707,707,,,,707,,707',
'707,707,707,707,707,707,,,,,,707,707,707,707,707,707,707,,,707,,,,,',
'707,707,,707,707,707,707,707,707,707,707,707,,707,707,707,,707,707,',
'707,707,707,780,780,780,780,780,780,780,780,780,780,780,,780,780,,,780',
'780,,707,,,707,,,707,707,,,707,,707,780,,780,707,780,780,780,780,780',
'780,780,707,780,,,,707,707,707,707,707,707,,,,707,707,,780,,,,,707,',
',707,707,707,,,707,707,708,708,708,708,708,708,,,,708,708,,,,708,,708',
'708,708,708,708,708,708,,,,,,708,708,708,708,708,708,708,,,708,,,,,',
'708,708,,708,708,708,708,708,708,708,708,708,,708,708,708,,708,708,',
'708,708,708,782,782,782,782,782,782,782,782,782,782,782,,782,782,,,782',
'782,,708,,,708,,,708,708,,,708,,708,782,,782,708,782,782,782,782,782',
'782,782,708,782,,,,708,708,708,708,708,708,,,,708,708,,782,,,,,708,',
',708,708,708,,,708,708,758,758,758,758,758,758,,,,758,758,,,,758,,758',
'758,758,758,758,758,758,,,,,,758,758,758,758,758,758,758,,,758,,,,,',
'758,758,,758,758,758,758,758,758,758,758,758,,758,758,758,,758,758,',
'758,758,758,785,785,785,785,785,785,785,785,785,785,785,,785,785,,,785',
'785,,758,,,758,,,758,758,,,758,,758,785,,785,758,785,785,785,785,785',
'785,785,758,785,,,,758,758,758,758,758,758,,,,758,758,,785,,,,,758,',
',758,758,758,,,758,758,759,759,759,759,759,759,,,,759,759,,,,759,,759',
'759,759,759,759,759,759,,,,,,759,759,759,759,759,759,759,,,759,,,,,',
'759,759,,759,759,759,759,759,759,759,759,759,,759,759,759,,759,759,',
'759,759,759,787,787,787,787,787,787,787,787,787,787,787,,787,787,,,787',
'787,,759,,,759,,,759,759,,,759,,759,787,,787,759,787,787,787,787,787',
'787,787,759,787,,,,759,759,759,759,759,759,,,,759,759,,787,,,,,759,',
',759,759,759,,,759,759,765,765,765,765,765,765,,,,765,765,,,,765,,765',
'765,765,765,765,765,765,,,,,,765,765,765,765,765,765,765,,,765,,,,,',
'765,765,,765,765,765,765,765,765,765,765,765,,765,765,765,,765,765,',
'765,765,765,789,789,789,789,789,789,789,789,789,789,789,,789,789,,,789',
'789,,765,,,765,,,765,765,,,765,,765,789,,789,765,789,789,789,789,789',
'789,789,765,789,,,,765,765,765,765,765,765,,,,765,765,,789,,,,,765,',
',765,765,765,,,765,765,810,810,810,810,810,810,,,,810,810,,,,810,,810',
'810,810,810,810,810,810,,,,,,810,810,810,810,810,810,810,,,810,,,,,',
'810,810,,810,810,810,810,810,810,810,810,810,,810,810,810,,810,810,',
'810,810,810,885,885,885,885,885,885,885,885,885,885,885,,885,885,,,885',
'885,,810,,,810,,,810,810,,,810,,810,885,,885,810,885,885,885,885,885',
'885,885,810,885,,,,810,810,810,810,810,810,,,,810,810,,885,,,,,810,',
',810,810,810,,,810,810,814,814,814,814,814,814,,,,814,814,,,,814,,814',
'814,814,814,814,814,814,,,,,,814,814,814,814,814,814,814,,,814,,,,,',
'814,814,,814,814,814,814,814,814,814,814,814,,814,814,814,,814,814,',
'814,814,814,888,888,888,888,888,888,888,888,888,888,888,,888,888,,,888',
'888,,814,,,814,,,814,814,,,814,,814,888,,888,814,888,888,888,888,888',
'888,888,814,888,,,,814,814,814,814,814,814,,,,814,814,,888,,,,,814,',
',814,814,814,,,814,814,815,815,815,815,815,815,,,,815,815,,,,815,,815',
'815,815,815,815,815,815,,,,,,815,815,815,815,815,815,815,,,815,,,,,',
'815,815,,815,815,815,815,815,815,815,815,815,,815,815,815,,815,815,',
'815,815,815,459,459,459,459,459,459,459,459,459,459,459,,459,459,,,459',
'459,,815,,,815,,,815,815,,,815,,815,459,,459,815,459,459,459,459,459',
'459,459,815,459,,,,815,815,815,815,815,815,,,,815,815,,932,,932,932',
'932,815,932,,815,815,815,,,815,815,825,825,825,825,825,825,,,,825,825',
',,,825,,825,825,825,825,825,825,825,932,,,,,825,825,825,825,825,825',
'825,,,825,,,,,,825,825,,825,825,825,825,825,825,825,825,825,,825,825',
'825,,825,825,,825,825,825,460,460,460,460,460,460,460,460,460,460,460',
',460,460,,,460,460,,825,,,825,,,825,825,,,825,,825,460,,460,825,460',
'460,460,460,460,460,460,825,460,,,,825,825,825,825,825,825,,,,825,825',
',985,,985,985,985,825,985,,825,825,825,,,825,825,857,857,857,857,857',
'857,,,,857,857,,,,857,,857,857,857,857,857,857,857,985,,,,,857,857,857',
'857,857,857,857,,987,857,987,987,987,,987,857,857,,857,857,857,857,857',
'857,857,857,857,,857,857,857,,857,857,,857,857,857,470,470,470,470,470',
'470,470,,987,470,470,,,,,,470,470,,857,,,857,,,857,857,,,857,,857,470',
',470,857,470,470,470,470,470,470,470,857,470,,,,857,857,857,857,857',
'857,,,,857,857,,1023,,1023,1023,1023,857,1023,,857,857,857,,,857,857',
'858,858,858,858,858,858,,,,858,858,,,,858,,858,858,858,858,858,858,858',
'1023,,,,,858,858,858,858,858,858,858,,,858,,,,,,858,858,,858,858,858',
'858,858,858,858,858,858,,858,858,858,,858,858,,858,858,858,471,,,,,',
',,,,,,,,,,471,471,,858,,,858,,469,858,858,,,858,,858,471,,471,858,471',
'471,471,471,469,469,471,858,471,,,,858,858,858,858,858,858,,,469,858',
'858,,469,469,469,469,,858,,,858,858,858,,,858,858,867,867,867,867,867',
'867,,,,867,867,,,,867,,867,867,867,867,867,867,867,,,,,,867,867,867',
'867,867,867,867,,,867,,,,,,867,867,,867,867,867,867,867,867,867,867',
'867,,867,867,867,,867,867,,867,867,867,472,,,,,,,,,,,,,,,,472,472,,867',
',,867,,,867,867,,,867,,867,472,,472,867,472,472,472,472,,,472,867,472',
',,,867,867,867,867,867,867,,,,867,867,,,,,,,867,,,867,867,867,,,867',
'867,906,906,906,906,906,906,,,,906,906,,,,906,,906,906,906,906,906,906',
'906,,,,,,906,906,906,906,906,906,906,,,906,,,,,,906,906,,906,906,906',
'906,906,906,906,906,906,,906,906,906,,906,906,,906,906,906,473,,,,,',
',,,,,,,,,,473,473,,906,,,906,,,906,906,,,906,,906,473,,473,906,473,473',
'473,473,,,473,906,473,,,,906,906,906,906,906,906,,,,906,906,,,,,,,906',
',,906,906,906,,,906,906,910,910,910,910,910,910,,,,910,910,,,,910,,910',
'910,910,910,910,910,910,,,,,,910,910,910,910,910,910,910,,,910,,,,,',
'910,910,,910,910,910,910,910,910,910,910,910,,910,910,910,,910,910,',
'910,910,910,474,,,,,,,,,,,,,,,,474,474,,910,,,910,,,910,910,,,910,,910',
'474,,474,910,474,474,474,474,,,474,910,474,,,,910,910,910,910,910,910',
',,,910,910,,,,,,,910,,,910,910,910,,,910,910,940,940,940,940,940,940',
',,,940,940,,,,940,,940,940,940,940,940,940,940,,,,,,940,940,940,940',
'940,940,940,,,940,,,,,,940,940,,940,940,940,940,940,940,940,940,940',
',940,940,940,,940,940,,940,940,940,475,475,475,475,475,475,475,,,475',
'475,,,,,,475,475,,940,,,940,,,940,940,,,940,,940,475,,475,940,475,475',
'475,475,475,475,475,940,475,,,,940,940,940,940,940,940,,,,940,940,,',
',,,,940,,,940,940,940,,,940,940,973,973,973,973,973,973,,,,973,973,',
',,973,,973,973,973,973,973,973,973,,,,,,973,973,973,973,973,973,973',
',,973,,,,,,973,973,,973,973,973,973,973,973,973,973,973,,973,973,973',
',973,973,,973,973,973,476,476,476,476,476,476,476,,,476,476,,,,,,476',
'476,,973,,,973,,,973,973,,,973,,973,476,,476,973,476,476,476,476,476',
'476,476,973,476,,,,973,973,973,973,973,973,,,,973,973,,,,,,,973,,,973',
'973,973,,,973,973,988,988,988,988,988,988,,,,988,988,,,,988,,988,988',
'988,988,988,988,988,,,,,,988,988,988,988,988,988,988,,,988,,,,,,988',
'988,,988,988,988,988,988,988,988,988,988,,988,988,988,,988,988,,988',
'988,988,477,477,477,477,477,477,477,,,477,477,,,,,,477,477,,988,,,988',
',,988,988,,,988,,988,477,,477,988,477,477,477,477,477,477,477,988,477',
',,,988,988,988,988,988,988,,,,988,988,,,,,,,988,,,988,988,988,,,988',
'988,993,993,993,993,993,993,,,,993,993,,,,993,,993,993,993,993,993,993',
'993,,,,,,993,993,993,993,993,993,993,,,993,,,,,,993,993,,993,993,993',
'993,993,993,993,993,993,,993,993,993,,993,993,,993,993,993,478,478,478',
'478,478,478,478,,,478,478,,,,,,478,478,,993,,,993,,,993,993,,,993,,993',
'478,,478,993,478,478,478,478,478,478,478,993,478,,,,993,993,993,993',
'993,993,,,,993,993,,,,,,,993,,,993,993,993,,,993,993,996,996,996,996',
'996,996,,,,996,996,,,,996,,996,996,996,996,996,996,996,,,,,,996,996',
'996,996,996,996,996,,,996,,,,,,996,996,,996,996,996,996,996,996,996',
'996,996,,996,996,996,,996,996,,996,996,996,479,479,479,479,479,479,479',
',,479,479,,,,,,479,479,,996,,,996,,,996,996,,,996,,996,479,,479,996',
'479,479,479,479,479,479,479,996,479,,,,996,996,996,996,996,996,,,,996',
'996,,,,,,,996,,,996,996,996,,,996,996,997,997,997,997,997,997,,,,997',
'997,,,,997,,997,997,997,997,997,997,997,,,,,,997,997,997,997,997,997',
'997,,,997,,,,,,997,997,,997,997,997,997,997,997,997,997,997,,997,997',
'997,,997,997,,997,997,997,482,482,482,482,482,482,482,,,482,482,,,,',
',482,482,,997,,,997,,,997,997,,,997,,997,482,,482,997,482,482,482,482',
'482,482,482,997,482,,,,997,997,997,997,997,997,,,,997,997,,,,,,,997',
',,997,997,997,,,997,997,8,8,8,8,8,,,,8,8,,,,8,,8,8,8,8,8,8,8,,,,,,8',
'8,8,8,8,8,8,,,8,,,,,,8,8,8,8,8,8,8,8,8,8,8,8,,8,8,8,,8,8,,8,8,8,483',
'483,483,483,483,483,483,483,,483,483,,,,,,483,483,,8,,,8,,,8,8,,,8,',
'8,483,,483,8,483,483,483,483,483,483,483,8,483,,,,8,8,8,8,8,8,,,,8,8',
',,,,,,8,,,8,8,8,,,8,8,23,23,23,,23,,,,23,23,,,,23,,23,23,23,23,23,23',
'23,,,,,,23,23,23,23,23,23,23,,,23,,,,,,,23,,,23,23,23,23,23,23,23,23',
',23,23,23,,23,23,,23,23,23,467,,,,,,,,,,,,,,,,467,467,,23,,,23,,,23',
'23,,,23,,,467,,467,23,467,467,467,467,,,,23,,,,,23,23,23,23,23,23,,',
',23,23,,,,,,,23,,,23,23,23,,,23,23,32,32,32,,32,,,,32,32,,,,32,,32,32',
'32,32,32,32,32,,,,,,32,32,32,32,32,32,32,,,32,,,,,,,32,,,32,32,32,32',
'32,32,32,32,32,32,32,32,,32,32,,32,32,32,468,,,,,,,,,,,,,,,,468,468',
',32,,,32,,,32,32,,,32,,32,468,32,468,32,468,468,468,468,,,,32,,,,,32',
'32,32,32,32,32,,,,32,32,,,,,,,32,,32,32,32,32,,,32,32,33,33,33,,33,',
',,33,33,,,,33,,33,33,33,33,33,33,33,,,,,,33,33,33,33,33,33,33,,,33,',
',,,,,33,,,33,33,33,33,33,33,33,33,33,33,33,33,,33,33,,33,33,33,,,,,',
',,,,,,,,,,,,,,33,,,33,,,33,33,,,33,,33,,33,,33,,,,,,,,33,,,,,33,33,33',
'33,33,33,,,,33,33,,,,,,,33,,33,33,33,33,,,33,33,34,34,34,,34,,,,34,34',
',,,34,,34,34,34,34,34,34,34,,,,,,34,34,34,34,34,34,34,,,34,,,,,,,34',
',,34,34,34,34,34,34,34,34,34,34,34,34,,34,34,,34,34,34,,,,,,,,,,,,,',
',,,,,,34,,,34,,,34,34,,,34,,34,,34,,34,,,,,,,,34,,,,,34,34,34,34,34',
'34,,,,34,34,,,,,,,34,,34,34,34,34,,,34,34,37,37,37,,37,,,,37,37,,,,37',
',37,37,37,37,37,37,37,,,,,,37,37,37,37,37,37,37,,,37,,,,,,,37,,,37,37',
'37,37,37,37,37,37,,37,37,37,,37,37,,,,37,,,,,,,,,,,,,,,,,,,,37,,,37',
',,37,37,,,37,,37,,,,,,,,,,,,,,,,,37,37,37,37,37,37,,,,37,37,,,,,,,37',
',,37,37,37,,,37,37,38,38,38,,38,,,,38,38,,,,38,,38,38,38,38,38,38,38',
',,,,,38,38,38,38,38,38,38,,,38,,,,,,,38,,,38,38,38,38,38,38,38,38,,38',
'38,38,,38,38,,,,38,,,,,,,,,,,,,,,,,,,,38,,,38,,,38,38,,,38,,,,,,,,,',
',,,,,,,,,38,38,38,38,38,38,,,,38,38,,,,38,,,38,,,38,38,38,,,38,38,45',
'45,45,,45,,,,45,45,,,,45,,45,45,45,45,45,45,45,,,,,,45,45,45,45,45,45',
'45,,,45,,,,,,,45,,,45,45,45,45,45,45,45,45,,45,45,45,,45,45,,45,45,45',
',,,,,,,,,,,,,,,,,,,45,,,45,,,45,45,,,45,,,,,,45,,,,,,,,45,,,,,45,45',
'45,45,45,45,,,,45,45,,,,,,,45,,,45,45,45,,,45,45,46,46,46,,46,,,,46',
'46,,,,46,,46,46,46,46,46,46,46,,,,,,46,46,46,46,46,46,46,,,46,,,,,,',
'46,,,46,46,46,46,46,46,46,46,,46,46,46,,46,46,,46,46,46,,,,,,,,,,,,',
',,,,,,,46,,,46,,,46,46,,,46,,,,,,46,,,,,,,,46,,,,,46,46,46,46,46,46',
',,,46,46,,,,,,,46,,,46,46,46,,,46,46,47,47,47,,47,,,,47,47,,,,47,,47',
'47,47,47,47,47,47,,,,,,47,47,47,47,47,47,47,,,47,,,,,,,47,,,47,47,47',
'47,47,47,47,47,,47,47,47,,47,47,,47,47,47,,,,,,,,,,,,,,,,,,,,47,,,47',
',,47,47,,,47,,,,,,47,,,,,,,,47,,,,,47,47,47,47,47,47,,,,47,47,,,,,,',
'47,,,47,47,47,,,47,47,62,62,62,,62,,,,62,62,,,,62,,62,62,62,62,62,62',
'62,,,,,,62,62,62,62,62,62,62,,,62,,,,,,,62,,,62,62,62,62,62,62,62,62',
'62,62,62,62,,62,62,,62,62,62,,,,,,,,,,,,,,,,,,,,62,,,62,,,62,62,,,62',
',62,,,,62,,,,,,,,62,,,,,62,62,62,62,62,62,,,,62,62,,,,,,,62,,62,62,62',
'62,,,62,62,66,66,66,,66,,,,66,66,,,,66,,66,66,66,66,66,66,66,,,,,,66',
'66,66,66,66,66,66,,,66,,,,,,,66,,,66,66,66,66,66,66,66,66,,66,66,66',
',66,66,,66,66,66,,,,,,,,,,,,,,,,,,,,66,,,66,,,66,66,,,66,,,,,,66,,,',
',,,,66,,,,,66,66,66,66,66,66,,,,66,66,,,,,,,66,,,66,66,66,,,66,66,67',
'67,67,,67,,,,67,67,,,,67,,67,67,67,67,67,67,67,,,,,,67,67,67,67,67,67',
'67,,,67,,,,,,,67,,,67,67,67,67,67,67,67,67,,67,67,67,,67,67,,67,67,67',
',,,,,,,,,,,,,,,,,,,67,,,67,,,67,67,,,67,,,,,,67,,,,,,,,67,,,,,67,67',
'67,67,67,67,,,,67,67,,,,,,,67,,,67,67,67,,,67,67,70,70,70,,70,,,,70',
'70,,,,70,,70,70,70,70,70,70,70,,,,,,70,70,70,70,70,70,70,,,70,,,,,,',
'70,,,70,70,70,70,70,70,70,70,,70,70,70,,70,70,,70,70,70,,,,,,,,,,,,',
',,,,,,,70,,,70,,,70,70,,,70,,,,,,70,,,,,,,,70,,,,,70,70,70,70,70,70',
',,,70,70,70,,,,,70,70,,,70,70,70,,,70,70,71,71,71,,71,,,,71,71,,,,71',
',71,71,71,71,71,71,71,,,,,,71,71,71,71,71,71,71,,,71,,,,,,,71,,,71,71',
'71,71,71,71,71,71,,71,71,71,,71,71,,,,71,,,,,,,,,,,,,,,,,,,,71,,,71',
',,71,71,,,71,,71,,,,,,,,,,,,,,,,,71,71,71,71,71,71,,,,71,71,,,,,,,71',
',,71,71,71,,,71,71,114,114,114,114,114,,,,114,114,,,,114,,114,114,114',
'114,114,114,114,,,,,,114,114,114,114,114,114,114,,,114,,,,,,114,114',
'114,114,114,114,114,114,114,114,114,114,,114,114,114,,114,114,,114,114',
'114,,,,,,,,,,,,,,,,,,,,114,,,114,,,114,114,,,114,,114,,,,114,,,,,,,',
'114,,,,,114,114,114,114,114,114,,,,114,114,,,,,,114,114,,,114,114,114',
',,114,114,119,119,119,,119,,,,119,119,,,,119,,119,119,119,119,119,119',
'119,,,,,,119,119,119,119,119,119,119,,,119,,,,,,,119,,,119,119,119,119',
'119,119,119,119,,119,119,119,,119,119,,119,119,119,,,,,,,,,,,,,,,,,',
',,119,,,119,,,119,119,,,119,,,,,,119,,,,,,,,119,,,,,119,119,119,119',
'119,119,,,,119,119,,,,,,,119,,,119,119,119,,,119,119,120,120,120,,120',
',,,120,120,,,,120,,120,120,120,120,120,120,120,,,,,,120,120,120,120',
'120,120,120,,,120,,,,,,,120,,,120,120,120,120,120,120,120,120,,120,120',
'120,,120,120,,120,120,120,,,,,,,,,,,,,,,,,,,,120,,,120,,,120,120,,,120',
',,,,,120,,,,,,,,120,,,,,120,120,120,120,120,120,,,,120,120,,,,,,,120',
',,120,120,120,,,120,120,121,121,121,,121,,,,121,121,,,,121,,121,121',
'121,121,121,121,121,,,,,,121,121,121,121,121,121,121,,,121,,,,,,,121',
',,121,121,121,121,121,121,121,121,,121,121,121,,121,121,,121,121,121',
',,,,,,,,,,,,,,,,,,,121,,,121,,,121,121,,,121,,,,,,121,,,,,,,,121,,,',
',121,121,121,121,121,121,,,,121,121,,,,,,,121,,,121,121,121,,,121,121',
'122,122,122,,122,,,,122,122,,,,122,,122,122,122,122,122,122,122,,,,',
',122,122,122,122,122,122,122,,,122,,,,,,,122,,,122,122,122,122,122,122',
'122,122,,122,122,122,,122,122,,122,122,122,,,,,,,,,,,,,,,,,,,,122,,',
'122,,,122,122,,,122,,,,,,122,,,,,,,,122,,,,,122,122,122,122,122,122',
',,,122,122,,,,,,,122,,,122,122,122,,,122,122,123,123,123,123,123,,,',
'123,123,,,,123,,123,123,123,123,123,123,123,,,,,,123,123,123,123,123',
'123,123,,,123,,,,,,123,123,,123,123,123,123,123,123,123,123,123,,123',
'123,123,,123,123,,123,123,123,,,,,,,,,,,,,,,,,,,,123,,,123,,,123,123',
',,123,,123,,,,123,,,,,,,,123,,,,,123,123,123,123,123,123,,,,123,123',
',,,,,,123,,,123,123,123,,,123,123,210,210,210,,210,,,,210,210,,,,210',
',210,210,210,210,210,210,210,,,,,,210,210,210,210,210,210,210,,,210',
',,,,,,210,,,210,210,210,210,210,210,210,210,,210,210,210,,210,210,,210',
'210,210,,,,,,,,,,,,,,,,,,,,210,,,210,,,210,210,,,210,,210,,,,210,,,',
',,,,210,,,,,210,210,210,210,210,210,,,,210,210,,,,,,,210,,,210,210,210',
',,210,210,211,211,211,,211,,,,211,211,,,,211,,211,211,211,211,211,211',
'211,,,,,,211,211,211,211,211,211,211,,,211,,,,,,,211,,,211,211,211,211',
'211,211,211,211,,211,211,211,,211,211,,211,211,211,,,,,,,,,,,,,,,,,',
',,211,,,211,,,211,211,,,211,,,,,,211,,,,,,,,211,,,,,211,211,211,211',
'211,211,,,,211,211,,,,,,,211,,,211,211,211,,,211,211,212,212,212,,212',
',,,212,212,,,,212,,212,212,212,212,212,212,212,,,,,,212,212,212,212',
'212,212,212,,,212,,,,,,,212,,,212,212,212,212,212,212,212,212,212,212',
'212,212,,212,212,,212,212,212,,,,,,,,,,,,,,,,,,,,212,,,212,,,212,212',
',,212,,212,,212,,212,,,,,,,,212,,,,,212,212,212,212,212,212,,,,212,212',
',,,,,,212,,212,212,212,212,,,212,212,216,216,216,,216,,,,216,216,,,',
'216,,216,216,216,216,216,216,216,,,,,,216,216,216,216,216,216,216,,',
'216,,,,,,,216,,,216,216,216,216,216,216,216,216,,216,216,216,,216,216',
',216,216,216,,,,,,,,,,,,,,,,,,,,216,,,216,,,216,216,,,216,,,,,,216,',
',,,,,,216,,,,,216,216,216,216,216,216,,,,216,216,,,,,,,216,,,216,216',
'216,,,216,216,217,217,217,,217,,,,217,217,,,,217,,217,217,217,217,217',
'217,217,,,,,,217,217,217,217,217,217,217,,,217,,,,,,,217,,,217,217,217',
'217,217,217,217,217,,217,217,217,,217,217,,217,217,217,,,,,,,,,,,,,',
',,,,,,217,,,217,,,217,217,,,217,,217,,,,217,,,,,,,,217,,,,,217,217,217',
'217,217,217,,,,217,217,,,,,,,217,,,217,217,217,,,217,217,218,218,218',
',218,,,,218,218,,,,218,,218,218,218,218,218,218,218,,,,,,218,218,218',
'218,218,218,218,,,218,,,,,,,218,,,218,218,218,218,218,218,218,218,,218',
'218,218,,218,218,,218,218,218,,,,,,,,,,,,,,,,,,,,218,,,218,,,218,218',
',,218,,,,,,218,,,,,,,,218,,,,,218,218,218,218,218,218,,,,218,218,,,',
',,,218,,,218,218,218,,,218,218,219,219,219,,219,,,,219,219,,,,219,,219',
'219,219,219,219,219,219,,,,,,219,219,219,219,219,219,219,,,219,,,,,',
',219,,,219,219,219,219,219,219,219,219,,219,219,219,,219,219,,219,219',
'219,,,,,,,,,,,,,,,,,,,,219,,,219,,,219,219,,,219,,,,,,219,,,,,,,,219',
',,,,219,219,219,219,219,219,,,,219,219,,,,,,,219,,,219,219,219,,,219',
'219,220,220,220,,220,,,,220,220,,,,220,,220,220,220,220,220,220,220',
',,,,,220,220,220,220,220,220,220,,,220,,,,,,,220,,,220,220,220,220,220',
'220,220,220,,220,220,220,,220,220,,220,220,220,,,,,,,,,,,,,,,,,,,,220',
',,220,,,220,220,,,220,,,,,,220,,,,,,,,220,,,,,220,220,220,220,220,220',
',,,220,220,,,,,,,220,,,220,220,220,,,220,220,221,221,221,,221,,,,221',
'221,,,,221,,221,221,221,221,221,221,221,,,,,,221,221,221,221,221,221',
'221,,,221,,,,,,,221,,,221,221,221,221,221,221,221,221,,221,221,221,',
'221,221,,221,221,221,,,,,,,,,,,,,,,,,,,,221,,,221,,,221,221,,,221,,',
',,,221,,,,,,,,221,,,,,221,221,221,221,221,221,,,,221,221,221,,,,,,221',
',,221,221,221,,,221,221,232,232,232,,232,,,,232,232,,,,232,,232,232',
'232,232,232,232,232,,,,,,232,232,232,232,232,232,232,,,232,,,,,,,232',
',,232,232,232,232,232,232,232,232,,232,232,232,,232,232,,232,232,232',
',,,,,,,,,,,,,,,,,,,232,,,232,,,232,232,,,232,,,,,,232,,,,,,,,232,,,',
',232,232,232,232,232,232,,,,232,232,,,,,,,232,,,232,232,232,,,232,232',
'235,235,235,,235,,,,235,235,,,,235,,235,235,235,235,235,235,235,,,,',
',235,235,235,235,235,235,235,,,235,,,,,,,235,,,235,235,235,235,235,235',
'235,235,,235,235,235,,235,235,,235,235,235,,,,,,,,,,,,,,,,,,,,235,,',
'235,,,235,235,,,235,,,,,,235,,,,,,,,235,,,,,235,235,235,235,235,235',
',,,235,235,,,,,,,235,,,235,235,235,,,235,235,236,236,236,,236,,,,236',
'236,,,,236,,236,236,236,236,236,236,236,,,,,,236,236,236,236,236,236',
'236,,,236,,,,,,,236,,,236,236,236,236,236,236,236,236,,236,236,236,',
'236,236,,236,236,236,,,,,,,,,,,,,,,,,,,,236,,,236,,,236,236,,,236,,',
',,,236,,,,,,,,236,,,,,236,236,236,236,236,236,,,,236,236,,,,,,,236,',
',236,236,236,,,236,236,237,237,237,,237,,,,237,237,,,,237,,237,237,237',
'237,237,237,237,,,,,,237,237,237,237,237,237,237,,,237,,,,,,,237,,,237',
'237,237,237,237,237,237,237,,237,237,237,,237,237,,237,237,237,,,,,',
',,,,,,,,,,,,,,237,,,237,,,237,237,,,237,,,,,,237,,,,,,,,237,,,,,237',
'237,237,237,237,237,,,,237,237,,,,,,,237,,,237,237,237,,,237,237,238',
'238,238,,238,,,,238,238,,,,238,,238,238,238,238,238,238,238,,,,,,238',
'238,238,238,238,238,238,,,238,,,,,,,238,,,238,238,238,238,238,238,238',
'238,,238,238,238,,238,238,,238,238,238,,,,,,,,,,,,,,,,,,,,238,,,238',
',,238,238,,,238,,,,,,238,,,,,,,,238,,,,,238,238,238,238,238,238,,,,238',
'238,,,,,,,238,,,238,238,238,,,238,238,239,239,239,,239,,,,239,239,,',
',239,,239,239,239,239,239,239,239,,,,,,239,239,239,239,239,239,239,',
',239,,,,,,,239,,,239,239,239,239,239,239,239,239,,239,239,239,,239,239',
',239,239,239,,,,,,,,,,,,,,,,,,,,239,,,239,,,239,239,,,239,,,,,,239,',
',,,,,,239,,,,,239,239,239,239,239,239,,,,239,239,,,,,,,239,,,239,239',
'239,,,239,239,240,240,240,,240,,,,240,240,,,,240,,240,240,240,240,240',
'240,240,,,,,,240,240,240,240,240,240,240,,,240,,,,,,,240,,,240,240,240',
'240,240,240,240,240,,240,240,240,,240,240,,240,240,240,,,,,,,,,,,,,',
',,,,,,240,,,240,,,240,240,,,240,,,,,,240,,,,,,,,240,,,,,240,240,240',
'240,240,240,,,,240,240,,,,,,,240,,,240,240,240,,,240,240,241,241,241',
',241,,,,241,241,,,,241,,241,241,241,241,241,241,241,,,,,,241,241,241',
'241,241,241,241,,,241,,,,,,,241,,,241,241,241,241,241,241,241,241,,241',
'241,241,,241,241,,241,241,241,,,,,,,,,,,,,,,,,,,,241,,,241,,,241,241',
',,241,,,,,,241,,,,,,,,241,,,,,241,241,241,241,241,241,,,,241,241,,,',
',,,241,,,241,241,241,,,241,241,242,242,242,,242,,,,242,242,,,,242,,242',
'242,242,242,242,242,242,,,,,,242,242,242,242,242,242,242,,,242,,,,,',
',242,,,242,242,242,242,242,242,242,242,,242,242,242,,242,242,,242,242',
'242,,,,,,,,,,,,,,,,,,,,242,,,242,,,242,242,,,242,,,,,,242,,,,,,,,242',
',,,,242,242,242,242,242,242,,,,242,242,,,,,,,242,,,242,242,242,,,242',
'242,243,243,243,,243,,,,243,243,,,,243,,243,243,243,243,243,243,243',
',,,,,243,243,243,243,243,243,243,,,243,,,,,,,243,,,243,243,243,243,243',
'243,243,243,,243,243,243,,243,243,,243,243,243,,,,,,,,,,,,,,,,,,,,243',
',,243,,,243,243,,,243,,,,,,243,,,,,,,,243,,,,,243,243,243,243,243,243',
',,,243,243,,,,,,,243,,,243,243,243,,,243,243,244,244,244,,244,,,,244',
'244,,,,244,,244,244,244,244,244,244,244,,,,,,244,244,244,244,244,244',
'244,,,244,,,,,,,244,,,244,244,244,244,244,244,244,244,,244,244,244,',
'244,244,,244,244,244,,,,,,,,,,,,,,,,,,,,244,,,244,,,244,244,,,244,,',
',,,244,,,,,,,,244,,,,,244,244,244,244,244,244,,,,244,244,,,,,,,244,',
',244,244,244,,,244,244,245,245,245,,245,,,,245,245,,,,245,,245,245,245',
'245,245,245,245,,,,,,245,245,245,245,245,245,245,,,245,,,,,,,245,,,245',
'245,245,245,245,245,245,245,,245,245,245,,245,245,,245,245,245,,,,,',
',,,,,,,,,,,,,,245,,,245,,,245,245,,,245,,,,,,245,,,,,,,,245,,,,,245',
'245,245,245,245,245,,,,245,245,,,,,,,245,,,245,245,245,,,245,245,246',
'246,246,,246,,,,246,246,,,,246,,246,246,246,246,246,246,246,,,,,,246',
'246,246,246,246,246,246,,,246,,,,,,,246,,,246,246,246,246,246,246,246',
'246,,246,246,246,,246,246,,246,246,246,,,,,,,,,,,,,,,,,,,,246,,,246',
',,246,246,,,246,,,,,,246,,,,,,,,246,,,,,246,246,246,246,246,246,,,,246',
'246,,,,,,,246,,,246,246,246,,,246,246,247,247,247,,247,,,,247,247,,',
',247,,247,247,247,247,247,247,247,,,,,,247,247,247,247,247,247,247,',
',247,,,,,,,247,,,247,247,247,247,247,247,247,247,,247,247,247,,247,247',
',247,247,247,,,,,,,,,,,,,,,,,,,,247,,,247,,,247,247,,,247,,,,,,247,',
',,,,,,247,,,,,247,247,247,247,247,247,,,,247,247,,,,,,,247,,,247,247',
'247,,,247,247,248,248,248,,248,,,,248,248,,,,248,,248,248,248,248,248',
'248,248,,,,,,248,248,248,248,248,248,248,,,248,,,,,,,248,,,248,248,248',
'248,248,248,248,248,,248,248,248,,248,248,,248,248,248,,,,,,,,,,,,,',
',,,,,,248,,,248,,,248,248,,,248,,,,,,248,,,,,,,,248,,,,,248,248,248',
'248,248,248,,,,248,248,,,,,,,248,,,248,248,248,,,248,248,249,249,249',
',249,,,,249,249,,,,249,,249,249,249,249,249,249,249,,,,,,249,249,249',
'249,249,249,249,,,249,,,,,,,249,,,249,249,249,249,249,249,249,249,,249',
'249,249,,249,249,,249,249,249,,,,,,,,,,,,,,,,,,,,249,,,249,,,249,249',
',,249,,,,,,249,,,,,,,,249,,,,,249,249,249,249,249,249,,,,249,249,,,',
',,,249,,,249,249,249,,,249,249,250,250,250,,250,,,,250,250,,,,250,,250',
'250,250,250,250,250,250,,,,,,250,250,250,250,250,250,250,,,250,,,,,',
',250,,,250,250,250,250,250,250,250,250,,250,250,250,,250,250,,250,250',
'250,,,,,,,,,,,,,,,,,,,,250,,,250,,,250,250,,,250,,,,,,250,,,,,,,,250',
',,,,250,250,250,250,250,250,,,,250,250,,,,,,,250,,,250,250,250,,,250',
'250,251,251,251,,251,,,,251,251,,,,251,,251,251,251,251,251,251,251',
',,,,,251,251,251,251,251,251,251,,,251,,,,,,,251,,,251,251,251,251,251',
'251,251,251,,251,251,251,,251,251,,251,251,251,,,,,,,,,,,,,,,,,,,,251',
',,251,,,251,251,,,251,,,,,,251,,,,,,,,251,,,,,251,251,251,251,251,251',
',,,251,251,,,,,,,251,,,251,251,251,,,251,251,252,252,252,,252,,,,252',
'252,,,,252,,252,252,252,252,252,252,252,,,,,,252,252,252,252,252,252',
'252,,,252,,,,,,,252,,,252,252,252,252,252,252,252,252,,252,252,252,',
'252,252,,252,252,252,,,,,,,,,,,,,,,,,,,,252,,,252,,,252,252,,,252,,',
',,,252,,,,,,,,252,,,,,252,252,252,252,252,252,,,,252,252,,,,,,,252,',
',252,252,252,,,252,252,253,253,253,,253,,,,253,253,,,,253,,253,253,253',
'253,253,253,253,,,,,,253,253,253,253,253,253,253,,,253,,,,,,,253,,,253',
'253,253,253,253,253,253,253,,253,253,253,,253,253,,253,253,253,,,,,',
',,,,,,,,,,,,,,253,,,253,,,253,253,,,253,,,,,,253,,,,,,,,253,,,,,253',
'253,253,253,253,253,,,,253,253,,,,,,,253,,,253,253,253,,,253,253,254',
'254,254,,254,,,,254,254,,,,254,,254,254,254,254,254,254,254,,,,,,254',
'254,254,254,254,254,254,,,254,,,,,,,254,,,254,254,254,254,254,254,254',
'254,,254,254,254,,254,254,,254,254,254,,,,,,,,,,,,,,,,,,,,254,,,254',
',,254,254,,,254,,,,,,254,,,,,,,,254,,,,,254,254,254,254,254,254,,,,254',
'254,,,,,,,254,,,254,254,254,,,254,254,255,255,255,,255,,,,255,255,,',
',255,,255,255,255,255,255,255,255,,,,,,255,255,255,255,255,255,255,',
',255,,,,,,,255,,,255,255,255,255,255,255,255,255,,255,255,255,,255,255',
',255,255,255,,,,,,,,,,,,,,,,,,,,255,,,255,,,255,255,,,255,,,,,,255,',
',,,,,,255,,,,,255,255,255,255,255,255,,,,255,255,,,,,,,255,,,255,255',
'255,,,255,255,256,256,256,,256,,,,256,256,,,,256,,256,256,256,256,256',
'256,256,,,,,,256,256,256,256,256,256,256,,,256,,,,,,,256,,,256,256,256',
'256,256,256,256,256,,256,256,256,,256,256,,256,256,256,,,,,,,,,,,,,',
',,,,,,256,,,256,,,256,256,,,256,,,,,,256,,,,,,,,256,,,,,256,256,256',
'256,256,256,,,,256,256,,,,,,,256,,,256,256,256,,,256,256,257,257,257',
',257,,,,257,257,,,,257,,257,257,257,257,257,257,257,,,,,,257,257,257',
'257,257,257,257,,,257,,,,,,,257,,,257,257,257,257,257,257,257,257,,257',
'257,257,,257,257,,257,257,257,,,,,,,,,,,,,,,,,,,,257,,,257,,,257,257',
',,257,,,,,,257,,,,,,,,257,,,,,257,257,257,257,257,257,,,,257,257,,,',
',,,257,,,257,257,257,,,257,257,258,258,258,,258,,,,258,258,,,,258,,258',
'258,258,258,258,258,258,,,,,,258,258,258,258,258,258,258,,,258,,,,,',
',258,,,258,258,258,258,258,258,258,258,,258,258,258,,258,258,,258,258',
'258,,,,,,,,,,,,,,,,,,,,258,,,258,,,258,258,,,258,,,,,,258,,,,,,,,258',
',,,,258,258,258,258,258,258,,,,258,258,,,,,,,258,,,258,258,258,,,258',
'258,259,259,259,,259,,,,259,259,,,,259,,259,259,259,259,259,259,259',
',,,,,259,259,259,259,259,259,259,,,259,,,,,,,259,,,259,259,259,259,259',
'259,259,259,,259,259,259,,259,259,,259,259,259,,,,,,,,,,,,,,,,,,,,259',
',,259,,,259,259,,,259,,,,,,259,,,,,,,,259,,,,,259,259,259,259,259,259',
',,,259,259,,,,,,,259,,,259,259,259,,,259,259,260,260,260,,260,,,,260',
'260,,,,260,,260,260,260,260,260,260,260,,,,,,260,260,260,260,260,260',
'260,,,260,,,,,,,260,,,260,260,260,260,260,260,260,260,,260,260,260,',
'260,260,,260,260,260,,,,,,,,,,,,,,,,,,,,260,,,260,,,260,260,,,260,,',
',,,260,,,,,,,,260,,,,,260,260,260,260,260,260,,,,260,260,,,,,,,260,',
',260,260,260,,,260,260,267,267,267,,267,,,,267,267,,,,267,,267,267,267',
'267,267,267,267,,,,,,267,267,267,267,267,267,267,,,267,,,,,,,267,,,267',
'267,267,267,267,267,267,267,267,267,267,267,,267,267,,267,267,267,,',
',,,,,,,,,,,,,,,,,267,,,267,,,267,267,,,267,,267,,267,,267,,,,,,,,267',
',,,,267,267,267,267,267,267,,,,267,267,,,,,,,267,,267,267,267,267,,',
'267,267,273,273,273,,273,,,,273,273,,,,273,,273,273,273,273,273,273',
'273,,,,,,273,273,273,273,273,273,273,,,273,,,,,,,273,,,273,273,273,273',
'273,273,273,273,273,273,273,273,,273,273,,273,273,273,,,,,,,,,,,,,,',
',,,,,273,,,273,,,273,273,,,273,,273,,273,,273,,,,,,,,273,,,,,273,273',
'273,273,273,273,,,,273,273,,,,,,,273,,273,273,273,273,,,273,273,276',
'276,276,,276,,,,276,276,,,,276,,276,276,276,276,276,276,276,,,,,,276',
'276,276,276,276,276,276,,,276,,,,,,,276,,,276,276,276,276,276,276,276',
'276,276,276,276,276,,276,276,,276,276,276,,,,,,,,,,,,,,,,,,,,276,,,276',
',,276,276,,,276,,276,,276,,276,,,,,,,,276,,,,,276,276,276,276,276,276',
',,,276,276,276,,,,,,276,,276,276,276,276,,,276,276,283,283,283,,283',
',,,283,283,,,,283,,283,283,283,283,283,283,283,,,,,,283,283,283,283',
'283,283,283,,,283,,,,,,,283,,,283,283,283,283,283,283,283,283,,283,283',
'283,,283,283,,283,283,283,,,,,,,,,,,,,,,,,,,,283,,,283,,,283,283,,,283',
',,,,,283,,,,,,,,283,,,,,283,283,283,283,283,283,,,,283,283,,,,,,,283',
',,283,283,283,,,283,283,285,285,285,,285,,,,285,285,,,,285,,285,285',
'285,285,285,285,285,,,,,,285,285,285,285,285,285,285,,,285,,,,,,,285',
',,285,285,285,285,285,285,285,285,,285,285,285,,285,285,,285,285,285',
',,,,,,,,,,,,,,,,,,,285,,,285,,,285,285,,,285,,,,,,285,,,,,,,,285,,,',
',285,285,285,285,285,285,,,,285,285,,,,,,,285,,,285,285,285,,,285,285',
'287,287,287,,287,,,,287,287,,,,287,,287,287,287,287,287,287,287,,,,',
',287,287,287,287,287,287,287,,,287,,,,,,,287,,,287,287,287,287,287,287',
'287,287,,287,287,287,,287,287,,287,287,287,,,,,,,,,,,,,,,,,,,,287,,',
'287,,,287,287,,,287,,,,,,287,,,,,,,,287,,,,,287,287,287,287,287,287',
',,,287,287,,,,,,,287,,,287,287,287,,,287,287,290,290,290,,290,,,,290',
'290,,,,290,,290,290,290,290,290,290,290,,,,,,290,290,290,290,290,290',
'290,,,290,,,,,,,290,,,290,290,290,290,290,290,290,290,,290,290,290,',
'290,290,,290,290,290,,,,,,,,,,,,,,,,,,,,290,,,290,,,290,290,,,290,,',
',,,290,,,,,,,,290,,,,,290,290,290,290,290,290,,,,290,290,,,,,,,290,',
',290,290,290,,,290,290,296,296,296,296,296,,,,296,296,,,,296,,296,296',
'296,296,296,296,296,,,,,,296,296,296,296,296,296,296,,,296,,,,,,296',
'296,,296,296,296,296,296,296,296,296,296,,296,296,296,,296,296,,296',
'296,296,,,,,,,,,,,,,,,,,,,,296,,,296,,,296,296,,,296,,296,,,,296,,,',
',,,,296,,,,,296,296,296,296,296,296,,,,296,296,,,,,,,296,,,296,296,296',
',,296,296,302,302,302,,302,,,,302,302,,,,302,,302,302,302,302,302,302',
'302,,,,,,302,302,302,302,302,302,302,,,302,,,,,,,302,,,302,302,302,302',
'302,302,302,302,,302,302,302,,302,302,,,,302,,,,,,,,,,,,,,,,,,,,302',
',,302,,,302,302,,,302,,,,,,,,,,,,,,,,,,,302,302,302,302,302,302,,,,302',
'302,,,,302,,,302,,,302,302,302,,,302,302,319,319,319,,319,,,,319,319',
',,,319,,319,319,319,319,319,319,319,,,,,,319,319,319,319,319,319,319',
',,319,,,,,,,319,,,319,319,319,319,319,319,319,319,,319,319,319,,319',
'319,,,,319,,,,,,,,,,,,,,,,,,,,319,,,319,,,319,319,,,319,,,,,,,,,,,,',
',,,,,,319,319,319,319,319,319,,,,319,319,,,,,,,319,,,319,319,319,,,319',
'319,327,327,327,,327,,,,327,327,,,,327,,327,327,327,327,327,327,327',
',,,,,327,327,327,327,327,327,327,,,327,,,,,,,327,,,327,327,327,327,327',
'327,327,327,,327,327,327,,327,327,,327,327,327,,,,,,,,,,,,,,,,,,,,327',
',,327,327,,327,327,,,327,,,,,,327,,,,,,,,327,,,,,327,327,327,327,327',
'327,,,,327,327,,,,,,,327,,,327,327,327,,,327,327,330,330,330,,330,,',
',330,330,,,,330,,330,330,330,330,330,330,330,,,,,,330,330,330,330,330',
'330,330,,,330,,,,,,,330,,,330,330,330,330,330,330,330,330,,330,330,330',
',330,330,,330,330,330,,,,,,,,,,,,,,,,,,,,330,,,330,,,330,330,,,330,',
',,,,330,,,,,,,,330,,,,,330,330,330,330,330,330,,,,330,330,,,,,,,330',
',,330,330,330,,,330,330,336,336,336,,336,,,,336,336,,,,336,,336,336',
'336,336,336,336,336,,,,,,336,336,336,336,336,336,336,,,336,,,,,,,336',
',,336,336,336,336,336,336,336,336,336,336,336,336,,336,336,,336,336',
'336,,,,,,,,,,,,,,,,,,,,336,,,336,,,336,336,,,336,,,,,,336,,,,,,,,336',
',,,,336,336,336,336,336,336,,,,336,336,,,,,,,336,,336,336,336,336,,',
'336,336,343,343,343,,343,,,,343,343,,,,343,,343,343,343,343,343,343',
'343,,,,,,343,343,343,343,343,343,343,,,343,,,,,,,343,,,343,343,343,343',
'343,343,343,343,,343,343,343,,343,343,,343,343,343,,,,,,,,,,,,,,,,,',
',,343,,,343,,,343,343,,,343,,,,,,343,,,,,,,,343,,,,,343,343,343,343',
'343,343,,,,343,343,,,,,,,343,,,343,343,343,,,343,343,344,344,344,,344',
',,,344,344,,,,344,,344,344,344,344,344,344,344,,,,,,344,344,344,344',
'344,344,344,,,344,,,,,,,344,,,344,344,344,344,344,344,344,344,,344,344',
'344,,344,344,,344,344,344,,,,,,,,,,,,,,,,,,,,344,,,344,,,344,344,,,344',
',,,,,344,,,,,,,,344,,,,,344,344,344,344,344,344,,,,344,344,,,,,,,344',
',,344,344,344,,,344,344,356,356,356,,356,,,,356,356,,,,356,,356,356',
'356,356,356,356,356,,,,,,356,356,356,356,356,356,356,,,356,,,,,,,356',
',,356,356,356,356,356,356,356,356,,356,356,356,,356,356,,,,356,,,,,',
',,,,,,,,,,,,,,356,,,356,,,356,356,,,356,,,,,,,,,,,,,,,,,,,356,356,356',
'356,356,356,,,,356,356,,,,,,,356,,,356,356,356,,,356,356,358,358,358',
',358,,,,358,358,,,,358,,358,358,358,358,358,358,358,,,,,,358,358,358',
'358,358,358,358,,,358,,,,,,,358,,,358,358,358,358,358,358,358,358,,358',
'358,358,,358,358,,,,358,,,,,,,,,,,,,,,,,,,,358,,,358,,,358,358,,,358',
',,,,,,,,,,,,,,,,,,358,358,358,358,358,358,,,,358,358,,,,,,,358,,,358',
'358,358,,,358,358,416,416,416,,416,,,,416,416,,,,416,,416,416,416,416',
'416,416,416,,,,,,416,416,416,416,416,416,416,,,416,,,,,,,416,,,416,416',
'416,416,416,416,416,416,,416,416,416,,416,416,,416,416,416,,,,,,,,,',
',,,,,,,,,,416,,,416,,,416,416,,,416,,,,,,416,,,,,,,,416,,,,,416,416',
'416,416,416,416,,,,416,416,,,,,,,416,,,416,416,416,,,416,416,454,454',
'454,,454,,,,454,454,,,,454,,454,454,454,454,454,454,454,,,,,,454,454',
'454,454,454,454,454,,,454,,,,,,,454,,,454,454,454,454,454,454,454,454',
'454,454,454,454,,454,454,,454,454,454,,,,,,,,,,,,,,,,,,,,454,,,454,',
',454,454,,,454,,454,,454,,454,,,,,,,,454,,,,,454,454,454,454,454,454',
',,,454,454,,,,,,,454,,454,454,454,454,,,454,454,456,456,456,,456,,,',
'456,456,,,,456,,456,456,456,456,456,456,456,,,,,,456,456,456,456,456',
'456,456,,,456,,,,,,,456,,,456,456,456,456,456,456,456,456,,456,456,456',
',456,456,,456,456,456,,,,,,,,,,,,,,,,,,,,456,,,456,,,456,456,,,456,',
',,,,456,,,,,,,,456,,,,,456,456,456,456,456,456,,,,456,456,,,,,,,456',
',,456,456,456,,,456,456,457,457,457,,457,,,,457,457,,,,457,,457,457',
'457,457,457,457,457,,,,,,457,457,457,457,457,457,457,,,457,,,,,,,457',
',,457,457,457,457,457,457,457,457,,457,457,457,,457,457,,457,457,457',
',,,,,,,,,,,,,,,,,,,457,,,457,,,457,457,,,457,,,,,,457,,,,,,,,457,,,',
',457,457,457,457,457,457,,,,457,457,,,,,,,457,,,457,457,457,,,457,457',
'458,458,458,,458,,,,458,458,,,,458,,458,458,458,458,458,458,458,,,,',
',458,458,458,458,458,458,458,,,458,,,,,,,458,,,458,458,458,458,458,458',
'458,458,,458,458,458,,458,458,,458,458,458,,,,,,,,,,,,,,,,,,,,458,,',
'458,,,458,458,,,458,,,,,,458,,,,,,,,458,,,,,458,458,458,458,458,458',
',,,458,458,,,,,,,458,,,458,458,458,,,458,458,499,499,499,,499,,,,499',
'499,,,,499,,499,499,499,499,499,499,499,,,,,,499,499,499,499,499,499',
'499,,,499,,,,,,,499,,,499,499,499,499,499,499,499,499,499,499,499,499',
',499,499,,499,499,499,,,,,,,,,,,,,,,,,,,,499,,,499,,,499,499,,,499,',
'499,,499,,499,,,,,,,,499,,,,,499,499,499,499,499,499,,,,499,499,,,,',
',,499,,499,499,499,499,,,499,499,502,502,502,,502,,,,502,502,,,,502',
',502,502,502,502,502,502,502,,,,,,502,502,502,502,502,502,502,,,502',
',,,,,,502,,,502,502,502,502,502,502,502,502,502,502,502,502,,502,502',
',502,502,502,,,,,,,,,,,,,,,,,,,,502,,,502,,,502,502,,,502,,,,502,,502',
',,,,,,,502,,,,,502,502,502,502,502,502,,,,502,502,,,,,,,502,,502,502',
'502,502,,,502,502,504,504,504,,504,,,,504,504,,,,504,,504,504,504,504',
'504,504,504,,,,,,504,504,504,504,504,504,504,,,504,,,,,,,504,,,504,504',
'504,504,504,504,504,504,,504,504,504,,504,504,,504,504,504,,,,,,,,,',
',,,,,,,,,,504,,,504,,,504,504,,,504,,,,,,504,,,,,,,,504,,,,,504,504',
'504,504,504,504,,,,504,504,,,,,,,504,,,504,504,504,,,504,504,508,508',
'508,,508,,,,508,508,,,,508,,508,508,508,508,508,508,508,,,,,,508,508',
'508,508,508,508,508,,,508,,,,,,,508,,,508,508,508,508,508,508,508,508',
',508,508,508,,508,508,,508,508,508,,,,,,,,,,,,,,,,,,,,508,,,508,,,508',
'508,,,508,,,,,,508,,,,,,,,508,,,,,508,508,508,508,508,508,,,,508,508',
',,,,,,508,,,508,508,508,,,508,508,511,511,511,511,511,,,,511,511,,,',
'511,,511,511,511,511,511,511,511,,,,,,511,511,511,511,511,511,511,,',
'511,,,,,,511,511,,511,511,511,511,511,511,511,511,511,,511,511,511,',
'511,511,,511,511,511,,,,,,,,,,,,,,,,,,,,511,,,511,,,511,511,,,511,,511',
',,,511,,,,,,,,511,,,,,511,511,511,511,511,511,,,,511,511,,,,,,511,511',
',,511,511,511,,,511,511,518,518,518,,518,,,,518,518,,,,518,,518,518',
'518,518,518,518,518,,,,,,518,518,518,518,518,518,518,,,518,,,,,,,518',
',,518,518,518,518,518,518,518,518,,518,518,518,,518,518,,,,518,,,,,',
',,,,,,,,,,,,,,518,,,518,,,518,518,,,518,,,,,,,,,,,,,,,,,,,518,518,518',
'518,518,518,,,,518,518,,,,,,,518,,,518,518,518,,,518,518,520,520,520',
',520,,,,520,520,,,,520,,520,520,520,520,520,520,520,,,,,,520,520,520',
'520,520,520,520,,,520,,,,,,,520,,,520,520,520,520,520,520,520,520,520',
'520,520,520,,520,520,,520,520,520,,,,,,,,,,,,,,,,,,,,520,,,520,,,520',
'520,,,520,,520,,520,,520,,,,,,,,520,,,,,520,520,520,520,520,520,,,,520',
'520,,,,,,,520,,520,520,520,520,,,520,520,526,526,526,,526,,,,526,526',
',,,526,,526,526,526,526,526,526,526,,,,,,526,526,526,526,526,526,526',
',,526,,,,,,,526,,,526,526,526,526,526,526,526,526,,526,526,526,,526',
'526,,,,526,,,,,,,,,,,,,,,,,,,,526,,,526,,,526,526,,,526,,,,,,,,,,,,',
',,,,,,526,526,526,526,526,526,,,,526,526,,,,,,,526,,,526,526,526,,,526',
'526,529,529,529,,529,,,,529,529,,,,529,,529,529,529,529,529,529,529',
',,,,,529,529,529,529,529,529,529,,,529,,,,,,,529,,,529,529,529,529,529',
'529,529,529,,529,529,529,,529,529,,529,529,529,,,,,,,,,,,,,,,,,,,,529',
',,529,,,529,529,,,529,,,,,,529,,,,,,,,529,,,,,529,529,529,529,529,529',
',,,529,529,,,,,,,529,,,529,529,529,,,529,529,530,530,530,,530,,,,530',
'530,,,,530,,530,530,530,530,530,530,530,,,,,,530,530,530,530,530,530',
'530,,,530,,,,,,,530,,,530,530,530,530,530,530,530,530,,530,530,530,',
'530,530,,530,530,530,,,,,,,,,,,,,,,,,,,,530,,,530,,,530,530,,,530,,',
',,,530,,,,,,,,530,,,,,530,530,530,530,530,530,,,,530,530,,,,,,,530,',
',530,530,530,,,530,530,534,534,534,,534,,,,534,534,,,,534,,534,534,534',
'534,534,534,534,,,,,,534,534,534,534,534,534,534,,,534,,,,,,,534,,,534',
'534,534,534,534,534,534,534,,534,534,534,,534,534,,534,534,534,,,,,',
',,,,,,,,,,,,,,534,,,534,,,534,534,,,534,,,,,,534,,,,,,,,534,,,,,534',
'534,534,534,534,534,,,,534,534,,,,,,,534,,,534,534,534,,,534,534,540',
'540,540,,540,,,,540,540,,,,540,,540,540,540,540,540,540,540,,,,,,540',
'540,540,540,540,540,540,,,540,,,,,,,540,,,540,540,540,540,540,540,540',
'540,540,540,540,540,,540,540,,540,540,540,,,,,,,,,,,,,,,,,,,,540,,,540',
',,540,540,,,540,,540,,,,540,,,,,,,,540,,,,,540,540,540,540,540,540,',
',,540,540,,,,,,,540,,540,540,540,540,,,540,540,543,543,543,,543,,,,543',
'543,,,,543,,543,543,543,543,543,543,543,,,,,,543,543,543,543,543,543',
'543,,,543,,,,,,,543,,,543,543,543,543,543,543,543,543,543,543,543,543',
',543,543,,543,543,543,,,,,,,,,,,,,,,,,,,,543,,,543,,,543,543,,,543,',
',,,,543,,,,,,,,543,,,,,543,543,543,543,543,543,,,,543,543,,,,,,,543',
',543,543,543,543,,,543,543,570,570,570,,570,,,,570,570,,,,570,,570,570',
'570,570,570,570,570,,,,,,570,570,570,570,570,570,570,,,570,,,,,,,570',
',,570,570,570,570,570,570,570,570,,570,570,570,,570,570,,570,570,570',
',,,,,,,,,,,,,,,,,,,570,,,570,,,570,570,,,570,,,,,,570,,,,,,,,570,,,',
',570,570,570,570,570,570,,,,570,570,,,,,,,570,,,570,570,570,,,570,570',
'591,591,591,,591,,,,591,591,,,,591,,591,591,591,591,591,591,591,,,,',
',591,591,591,591,591,591,591,,,591,,,,,,,591,,,591,591,591,591,591,591',
'591,591,591,591,591,591,,591,591,,591,591,591,,,,,,,,,,,,,,,,,,,,591',
',,591,,,591,591,,,591,,591,,591,,591,,,,,,,,591,,,,,591,591,591,591',
'591,591,,,,591,591,,,,,,,591,,591,591,591,591,,,591,591,603,603,603',
',603,,,,603,603,,,,603,,603,603,603,603,603,603,603,,,,,,603,603,603',
'603,603,603,603,,,603,,,,,,,603,,,603,603,603,603,603,603,603,603,,603',
'603,603,,603,603,,603,603,603,,,,,,,,,,,,,,,,,,,,603,,,603,,,603,603',
',,603,,,,,,603,,,,,,,,603,,,,,603,603,603,603,603,603,,,,603,603,,,',
',,,603,,,603,603,603,,,603,603,607,607,607,,607,,,,607,607,,,,607,,607',
'607,607,607,607,607,607,,,,,,607,607,607,607,607,607,607,,,607,,,,,',
',607,,,607,607,607,607,607,607,607,607,,607,607,607,,607,607,,607,607',
'607,,,,,,,,,,,,,,,,,,,,607,,,607,,,607,607,,,607,,,,,,607,,,,,,,,607',
',,,,607,607,607,607,607,607,,,,607,607,,,,,,,607,,,607,607,607,,,607',
'607,636,636,636,,636,,,,636,636,,,,636,,636,636,636,636,636,636,636',
',,,,,636,636,636,636,636,636,636,,,636,,,,,,,636,,,636,636,636,636,636',
'636,636,636,,636,636,636,,636,636,,636,636,636,,,,,,,,,,,,,,,,,,,,636',
',,636,,,636,636,,,636,,636,,,,636,,,,,,,,636,,,,,636,636,636,636,636',
'636,,,,636,636,,,,,,,636,,,636,636,636,,,636,636,637,637,637,,637,,',
',637,637,,,,637,,637,637,637,637,637,637,637,,,,,,637,637,637,637,637',
'637,637,,,637,,,,,,,637,,,637,637,637,637,637,637,637,637,,637,637,637',
',637,637,,637,637,637,,,,,,,,,,,,,,,,,,,,637,,,637,,,637,637,,,637,',
',,,,637,,,,,,,,637,,,,,637,637,637,637,637,637,,,,637,637,,,,,,,637',
',,637,637,637,,,637,637,640,640,640,,640,,,,640,640,,,,640,,640,640',
'640,640,640,640,640,,,,,,640,640,640,640,640,640,640,,,640,,,,,,,640',
',,640,640,640,640,640,640,640,640,640,640,640,640,,640,640,,640,640',
'640,,,,,,,,,,,,,,,,,,,,640,,,640,,,640,640,,,640,,640,,640,,640,,,,',
',,,640,,,,,640,640,640,640,640,640,,,,640,640,,,,,,,640,,640,640,640',
'640,,,640,640,641,641,641,,641,,,,641,641,,,,641,,641,641,641,641,641',
'641,641,,,,,,641,641,641,641,641,641,641,,,641,,,,,,,641,,,641,641,641',
'641,641,641,641,641,641,641,641,641,,641,641,,641,641,641,,,,,,,,,,',
',,,,,,,,,641,,,641,,,641,641,,,641,,,,641,,641,,,,,,,,641,,,,,641,641',
'641,641,641,641,,,,641,641,,,,,,,641,,641,641,641,641,,,641,641,642',
'642,642,,642,,,,642,642,,,,642,,642,642,642,642,642,642,642,,,,,,642',
'642,642,642,642,642,642,,,642,,,,,,,642,,,642,642,642,642,642,642,642',
'642,,642,642,642,,642,642,,642,642,642,,,,,,,,,,,,,,,,,,,,642,,,642',
',,642,642,,,642,,,,,,642,,,,,,,,642,,,,,642,642,642,642,642,642,,,,642',
'642,,,,,,,642,,,642,642,642,,,642,642,643,643,643,,643,,,,643,643,,',
',643,,643,643,643,643,643,643,643,,,,,,643,643,643,643,643,643,643,',
',643,,,,,,,643,,,643,643,643,643,643,643,643,643,,643,643,643,,643,643',
',643,643,643,,,,,,,,,,,,,,,,,,,,643,,,643,,,643,643,,,643,,,,,,643,',
',,,,,,643,,,,,643,643,643,643,643,643,,,,643,643,,,,,,,643,,,643,643',
'643,,,643,643,648,648,648,,648,,,,648,648,,,,648,,648,648,648,648,648',
'648,648,,,,,,648,648,648,648,648,648,648,,,648,,,,,,,648,,,648,648,648',
'648,648,648,648,648,,648,648,648,,648,648,,648,648,648,,,,,,,,,,,,,',
',,,,,,648,,,648,,,648,648,,,648,,,,,,648,,,,,,,,648,,,,,648,648,648',
'648,648,648,,,,648,648,,,,,,,648,,,648,648,648,,,648,648,649,649,649',
',649,,,,649,649,,,,649,,649,649,649,649,649,649,649,,,,,,649,649,649',
'649,649,649,649,,,649,,,,,,,649,,,649,649,649,649,649,649,649,649,,649',
'649,649,,649,649,,649,649,649,,,,,,,,,,,,,,,,,,,,649,,,649,,,649,649',
',,649,,,,,,649,,,,,,,,649,,,,,649,649,649,649,649,649,,,,649,649,,,',
',,,649,,,649,649,649,,,649,649,652,652,652,,652,,,,652,652,,,,652,,652',
'652,652,652,652,652,652,,,,,,652,652,652,652,652,652,652,,,652,,,,,',
',652,,,652,652,652,652,652,652,652,652,,652,652,652,,652,652,,652,652',
'652,,,,,,,,,,,,,,,,,,,,652,,,652,,,652,652,,,652,,,,,,652,,,,,,,,652',
',,,,652,652,652,652,652,652,,,,652,652,,,,,,,652,,,652,652,652,,,652',
'652,653,653,653,,653,,,,653,653,,,,653,,653,653,653,653,653,653,653',
',,,,,653,653,653,653,653,653,653,,,653,,,,,,,653,,,653,653,653,653,653',
'653,653,653,,653,653,653,,653,653,,653,653,653,,,,,,,,,,,,,,,,,,,,653',
',,653,,,653,653,,,653,,,,,,653,,,,,,,,653,,,,,653,653,653,653,653,653',
',,,653,653,,,,,,,653,,,653,653,653,,,653,653,677,677,677,,677,,,,677',
'677,,,,677,,677,677,677,677,677,677,677,,,,,,677,677,677,677,677,677',
'677,,,677,,,,,,,677,,,677,677,677,677,677,677,677,677,,677,677,677,',
'677,677,,677,677,677,,,,,,,,,,,,,,,,,,,,677,,,677,,,677,677,,,677,,',
',,,677,,,,,,,,677,,,,,677,677,677,677,677,677,,,,677,677,,,,,,,677,',
',677,677,677,,,677,677,680,680,680,,680,,,,680,680,,,,680,,680,680,680',
'680,680,680,680,,,,,,680,680,680,680,680,680,680,,,680,,,,,,,680,,,680',
'680,680,680,680,680,680,680,,680,680,680,,680,680,,680,680,680,,,,,',
',,,,,,,,,,,,,,680,,,680,,,680,680,,,680,,,,,,680,,,,,,,,680,,,,,680',
'680,680,680,680,680,,,,680,680,,,,,,,680,,,680,680,680,,,680,680,684',
'684,684,,684,,,,684,684,,,,684,,684,684,684,684,684,684,684,,,,,,684',
'684,684,684,684,684,684,,,684,,,,,,,684,,,684,684,684,684,684,684,684',
'684,,684,684,684,,684,684,,,,684,,,,,,,,,,,,,,,,,,,,684,,,684,,,684',
'684,,,684,,,,,,,,,,,,,,,,,,,684,684,684,684,684,684,,,,684,684,,,,,',
',684,,,684,684,684,,,684,684,695,695,695,,695,,,,695,695,,,,695,,695',
'695,695,695,695,695,695,,,,,,695,695,695,695,695,695,695,,,695,,,,,',
',695,,,695,695,695,695,695,695,695,695,,695,695,695,,695,695,,,,695',
',,,,,,,,,,,,,,,,,,,695,,,695,,,695,695,,,695,,,,,,,,,,,,,,,,,,,695,695',
'695,695,695,695,,,,695,695,,,,,,,695,,,695,695,695,,,695,695,700,700',
'700,,700,,,,700,700,,,,700,,700,700,700,700,700,700,700,,,,,,700,700',
'700,700,700,700,700,,,700,,,,,,,700,,,700,700,700,700,700,700,700,700',
',700,700,700,,700,700,,700,700,700,,,,,,,,,,,,,,,,,,,,700,,,700,,,700',
'700,,,700,,700,,,,700,,,,,,,,700,,,,,700,700,700,700,700,700,,,,700',
'700,,,,,,,700,,,700,700,700,,,700,700,720,720,720,,720,,,,720,720,,',
',720,,720,720,720,720,720,720,720,,,,,,720,720,720,720,720,720,720,',
',720,,,,,,,720,,,720,720,720,720,720,720,720,720,,720,720,720,,720,720',
',720,720,720,,,,,,,,,,,,,,,,,,,,720,,,720,,,720,720,,,720,,,,,,720,',
',,,,,,720,,,,,720,720,720,720,720,720,,,,720,720,,,,,,,720,,,720,720',
'720,,,720,720,740,740,740,,740,,,,740,740,,,,740,,740,740,740,740,740',
'740,740,,,,,,740,740,740,740,740,740,740,,,740,,,,,,,740,,,740,740,740',
'740,740,740,740,740,,740,740,740,,740,740,,740,740,740,,,,,,,,,,,,,',
',,,,,,740,,,740,,,740,740,,,740,,740,,,,740,,,,,,,,740,,,,,740,740,740',
'740,740,740,,,,740,740,,,,,,,740,,,740,740,740,,,740,740,746,746,746',
',746,,,,746,746,,,,746,,746,746,746,746,746,746,746,,,,,,746,746,746',
'746,746,746,746,,,746,,,,,,,746,,,746,746,746,746,746,746,746,746,,746',
'746,746,,746,746,,746,746,746,,,,,,,,,,,,,,,,,,,,746,,,746,,,746,746',
',,746,,,,,,746,,,,,,,,746,,,,,746,746,746,746,746,746,,,,746,746,,,',
',,,746,,,746,746,746,,,746,746,752,752,752,,752,,,,752,752,,,,752,,752',
'752,752,752,752,752,752,,,,,,752,752,752,752,752,752,752,,,752,,,,,',
',752,,,752,752,752,752,752,752,752,752,752,752,752,752,,752,752,,752',
'752,752,,,,,,,,,,,,,,,,,,,,752,,,752,,,752,752,,,752,,752,,752,,752',
',,,,,,,752,,,,,752,752,752,752,752,752,,,,752,752,,,,,,,752,,752,752',
'752,752,,,752,752,774,774,774,,774,,,,774,774,,,,774,,774,774,774,774',
'774,774,774,,,,,,774,774,774,774,774,774,774,,,774,,,,,,,774,,,774,774',
'774,774,774,774,774,774,,774,774,774,,774,774,,774,774,774,,,,,,,,,',
',,,,,,,,,,774,,,774,,,774,774,,,774,,,,,,774,,,,,,,,774,,,,,774,774',
'774,774,774,774,,,,774,774,,,,,,,774,,,774,774,774,,,774,774,776,776',
'776,,776,,,,776,776,,,,776,,776,776,776,776,776,776,776,,,,,,776,776',
'776,776,776,776,776,,,776,,,,,,,776,,,776,776,776,776,776,776,776,776',
',776,776,776,,776,776,,776,776,776,,,,,,,,,,,,,,,,,,,,776,,,776,,,776',
'776,,,776,,,,,,776,,,,,,,,776,,,,,776,776,776,776,776,776,,,,776,776',
',,,,,,776,,,776,776,776,,,776,776,790,790,790,,790,,,,790,790,,,,790',
',790,790,790,790,790,790,790,,,,,,790,790,790,790,790,790,790,,,790',
',,,,,,790,,,790,790,790,790,790,790,790,790,,790,790,790,,790,790,,790',
'790,790,,,,,,,,,,,,,,,,,,,,790,,,790,,,790,790,,,790,,,,,,790,,,,,,',
',790,,,,,790,790,790,790,790,790,,,,790,790,,,,,,,790,,,790,790,790',
',,790,790,791,791,791,,791,,,,791,791,,,,791,,791,791,791,791,791,791',
'791,,,,,,791,791,791,791,791,791,791,,,791,,,,,,,791,,,791,791,791,791',
'791,791,791,791,,791,791,791,,791,791,,791,791,791,,,,,,,,,,,,,,,,,',
',,791,,,791,,,791,791,,,791,,,,,,791,,,,,,,,791,,,,,791,791,791,791',
'791,791,,,,791,791,,,,,,,791,,,791,791,791,,,791,791,792,792,792,,792',
',,,792,792,,,,792,,792,792,792,792,792,792,792,,,,,,792,792,792,792',
'792,792,792,,,792,,,,,,,792,,,792,792,792,792,792,792,792,792,,792,792',
'792,,792,792,,792,792,792,,,,,,,,,,,,,,,,,,,,792,,,792,,,792,792,,,792',
',,,,,792,,,,,,,,792,,,,,792,792,792,792,792,792,,,,792,792,,,,,,,792',
',,792,792,792,,,792,792,793,793,793,,793,,,,793,793,,,,793,,793,793',
'793,793,793,793,793,,,,,,793,793,793,793,793,793,793,,,793,,,,,,,793',
',,793,793,793,793,793,793,793,793,,793,793,793,,793,793,,793,793,793',
',,,,,,,,,,,,,,,,,,,793,,,793,,,793,793,,,793,,,,,,793,,,,,,,,793,,,',
',793,793,793,793,793,793,,,,793,793,,,,,,,793,,,793,793,793,,,793,793',
'795,795,795,,795,,,,795,795,,,,795,,795,795,795,795,795,795,795,,,,',
',795,795,795,795,795,795,795,,,795,,,,,,,795,,,795,795,795,795,795,795',
'795,795,,795,795,795,,795,795,,795,795,795,,,,,,,,,,,,,,,,,,,,795,,',
'795,,,795,795,,,795,,,,,,795,,,,,,,,795,,,,,795,795,795,795,795,795',
',,,795,795,,,,,,,795,,,795,795,795,,,795,795,807,807,807,,807,,,,807',
'807,,,,807,,807,807,807,807,807,807,807,,,,,,807,807,807,807,807,807',
'807,,,807,,,,,,,807,,,807,807,807,807,807,807,807,807,,807,807,807,',
'807,807,,,,807,,,,,,,,,,,,,,,,,,,,807,,,807,,,807,807,,,807,,,,,,,,',
',,,,,,,,,,807,807,807,807,807,807,,,,807,807,,,,,,,807,,,807,807,807',
',,807,807,855,855,855,,855,,,,855,855,,,,855,,855,855,855,855,855,855',
'855,,,,,,855,855,855,855,855,855,855,,,855,,,,,,,855,,,855,855,855,855',
'855,855,855,855,,855,855,855,,855,855,,855,855,855,,,,,,,,,,,,,,,,,',
',,855,,,855,,,855,855,,,855,,,,,,855,,,,,,,,855,,,,,855,855,855,855',
'855,855,,,,855,855,,,,,,,855,,,855,855,855,,,855,855,868,868,868,,868',
',,,868,868,,,,868,,868,868,868,868,868,868,868,,,,,,868,868,868,868',
'868,868,868,,,868,,,,,,,868,,,868,868,868,868,868,868,868,868,,868,868',
'868,,868,868,,868,868,868,,,,,,,,,,,,,,,,,,,,868,,,868,,,868,868,,,868',
',,,,,868,,,,,,,,868,,,,,868,868,868,868,868,868,,,,868,868,,,,,,,868',
',,868,868,868,,,868,868,886,886,886,,886,,,,886,886,,,,886,,886,886',
'886,886,886,886,886,,,,,,886,886,886,886,886,886,886,,,886,,,,,,,886',
',,886,886,886,886,886,886,886,886,886,886,886,886,,886,886,,886,886',
'886,,,,,,,,,,,,,,,,,,,,886,,,886,,,886,886,,,886,,,,886,,886,,,,,,,',
'886,,,,,886,886,886,886,886,886,,,,886,886,,,,,,,886,,886,886,886,886',
',,886,886,887,887,887,,887,,,,887,887,,,,887,,887,887,887,887,887,887',
'887,,,,,,887,887,887,887,887,887,887,,,887,,,,,,,887,,,887,887,887,887',
'887,887,887,887,,887,887,887,,887,887,,887,887,887,,,,,,,,,,,,,,,,,',
',,887,,,887,,,887,887,,,887,,,,,,887,,,,,,,,887,,,,,887,887,887,887',
'887,887,,,,887,887,,,,,,,887,,,887,887,887,,,887,887,902,902,902,,902',
',,,902,902,,,,902,,902,902,902,902,902,902,902,,,,,,902,902,902,902',
'902,902,902,,,902,,,,,,,902,,,902,902,902,902,902,902,902,902,,902,902',
'902,,902,902,,,,902,,,,,,,,,,,,,,,,,,,,902,,,902,,,902,902,,,902,,,',
',,,,,,,,,,,,,,,902,902,902,902,902,902,,,,902,902,,,,,,,902,,,902,902',
'902,,,902,902,914,914,914,,914,,,,914,914,,,,914,,914,914,914,914,914',
'914,914,,,,,,914,914,914,914,914,914,914,,,914,,,,,,,914,,,914,914,914',
'914,914,914,914,914,,914,914,914,,914,914,,,,914,,,,,,,,,,,,,,,,,,,',
'914,,,914,,,914,914,,,914,,,,,,,,,,,,,,,,,,,914,914,914,914,914,914',
',,,914,914,,,,,,,914,,,914,914,914,,,914,914,939,939,939,,939,,,,939',
'939,,,,939,,939,939,939,939,939,939,939,,,,,,939,939,939,939,939,939',
'939,,,939,,,,,,,939,,,939,939,939,939,939,939,939,939,,939,939,939,',
'939,939,,939,939,939,,,,,,,,,,,,,,,,,,,,939,,,939,,,939,939,,,939,,939',
',,,939,,,,,,,,939,,,,,939,939,939,939,939,939,,,,939,939,,,,,,,939,',
',939,939,939,,,939,939,1014,1014,1014,,1014,,,,1014,1014,,,,1014,,1014',
'1014,1014,1014,1014,1014,1014,,,,,,1014,1014,1014,1014,1014,1014,1014',
',,1014,,,,,,,1014,,,1014,1014,1014,1014,1014,1014,1014,1014,1014,1014',
'1014,1014,,1014,1014,,1014,1014,1014,,,,,,,,,,,,,,,,,,,,1014,,,1014',
',,1014,1014,,,1014,,1014,,1014,,1014,,,,,,,,1014,,,,,1014,1014,1014',
'1014,1014,1014,,,,1014,1014,,,,,,,1014,,1014,1014,1014,1014,59,,1014',
'1014,,,,59,59,59,,,59,59,59,550,59,550,550,550,550,550,,,,,59,59,59',
',,550,,,,,59,59,,59,59,59,59,59,,,,,,,,,,550,,,,,,,,,550,550,550,550',
',59,59,59,59,59,59,59,59,59,59,59,59,59,59,,,59,59,59,,,59,,,59,,,59',
'59,,59,550,59,,59,,59,59,59,59,59,59,59,,59,,59,,,,,,,,,,,,,59,59,59',
'59,437,59,,59,,,,437,437,437,,,437,437,437,605,437,605,605,605,605,605',
',,,437,437,437,437,,,605,,,,,437,437,,437,437,437,437,437,,,,,,,,,,605',
'605,,,,,,,,605,605,605,605,,437,437,437,437,437,437,437,437,437,437',
'437,437,437,437,,,437,437,437,,,437,,,437,,,437,437,,437,605,437,,437',
',437,437,437,437,437,437,437,,437,437,437,,,,,,,,,,,,,437,437,437,437',
'438,437,,437,,,,438,438,438,,,438,438,438,664,438,664,664,664,664,664',
',,,438,438,438,438,,,664,,,,,438,438,,438,438,438,438,438,,,,,,,,,,664',
',,,,,,,,664,664,664,664,,438,438,438,438,438,438,438,438,438,438,438',
'438,438,438,,,438,438,438,,,438,,664,438,,,438,438,,438,664,438,,438',
',438,438,438,438,438,438,438,,438,438,438,,,,,,,,,,,,,438,438,438,438',
',438,,438,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11',
'11,11,11,11,,,,11,11,11,11,11,11,11,11,11,11,,,,,,11,11,11,11,11,11',
'11,11,11,11,,11,,,,,,,,,11,11,,11,11,11,11,11,11,11,,,11,11,,,,11,11',
'11,11,,,,,,,,,,,,,,11,11,,11,11,11,11,11,11,11,11,11,11,11,,,11,11,',
',,,,,,,,11,,,,,,,,,11,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12',
'12,12,12,12,12,12,12,12,,,,12,12,12,12,12,12,12,12,12,12,,,,,,12,12',
'12,12,12,12,12,12,12,,,12,,,,,,,,,12,12,,12,12,12,12,12,12,12,,,12,12',
',,,12,12,12,12,,,,,,,,,,,,,,12,12,,12,12,12,12,12,12,12,12,12,12,12',
',,12,12,,,,,,,,,,12,,,,,,,,,12,74,74,74,74,74,74,74,74,74,74,74,74,74',
'74,74,74,74,74,74,74,74,74,74,74,,,,74,74,74,74,74,74,74,74,74,74,,',
',,,74,74,74,74,74,74,74,74,74,74,74,74,,74,,,,,,,74,74,,74,74,74,74',
'74,74,74,,,74,74,,,,74,74,74,74,,,,,,74,,,,,,,,74,74,,74,74,74,74,74',
'74,74,74,74,74,74,,,74,,,,,,,,,,,,,,,,,,,,74,91,91,91,91,91,91,91,91',
'91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,,,,91,91,91,91,91,91',
'91,91,91,91,,,,,,91,91,91,91,91,91,91,91,91,91,91,91,,91,,,,,,,91,91',
',91,91,91,91,91,91,91,,,91,91,,,,91,91,91,91,,,,,,,,,,,,,,91,91,,91',
'91,91,91,91,91,91,91,91,91,91,,,91,,,,,,,,,,,,,,,,,,,,91,407,407,407',
'407,407,407,407,407,407,407,407,407,407,407,407,407,407,407,407,407',
'407,407,407,407,,,,407,407,407,407,407,407,407,407,407,407,,,,,,407',
'407,407,407,407,407,407,407,407,,,407,,,,,,,,,407,407,,407,407,407,407',
'407,407,407,,,407,407,,,,407,407,407,407,,,,,,,,,,,,,,407,407,,407,407',
'407,407,407,407,407,407,407,407,407,,,407,407,,,,,,,,,,407,,,,,,,,,407',
'633,633,633,633,633,633,633,633,633,633,633,633,633,633,633,633,633',
'633,633,633,633,633,633,633,,,,633,633,633,633,633,633,633,633,633,633',
',,,,,633,633,633,633,633,633,633,633,633,,,633,,,,,,,,,633,633,,633',
'633,633,633,633,633,633,,,633,633,,,,633,633,633,633,,,,,,,,,,,,,,633',
'633,,633,633,633,633,633,633,633,633,633,633,633,,,633,633,,,,,,,,,',
'633,,,,,,,,,633,762,762,762,762,762,762,762,762,762,762,762,762,762',
'762,762,762,762,762,762,762,762,762,762,762,,,,762,762,762,762,762,762',
'762,762,762,762,,,,,,762,762,762,762,762,762,762,762,762,,,762,,,,,',
',,,762,762,,762,762,762,762,762,762,762,,,762,762,,,,762,762,762,762',
',,,,,,,,,,,,,762,762,,762,762,762,762,762,762,762,762,762,762,762,30',
',762,,,,,30,30,30,,,30,30,30,714,30,714,714,714,714,714,762,,,30,30',
'30,,,,714,,,,,30,30,,30,30,30,30,30,,,,,,,,,,714,,,,,,,,,714,714,714',
'714,,30,30,30,30,30,30,30,30,30,30,30,30,30,30,,,30,30,30,,,30,,30,30',
',,30,30,,30,714,30,,30,,30,30,30,30,30,30,30,,30,30,30,,,,,,,,,,,,31',
'30,30,,30,,30,31,31,31,,,31,31,31,716,31,716,716,716,716,716,,,,,31',
'31,,,,716,,,,,31,31,,31,31,31,31,31,,,,,,,,,,716,,,,,,,,,716,716,716',
'716,,31,31,31,31,31,31,31,31,31,31,31,31,31,31,,,31,31,31,,,31,,31,31',
',,31,31,,31,716,31,,31,,31,31,31,31,31,31,31,,31,,31,,,,,,,,,,,,428',
'31,31,,31,,31,428,428,428,,,428,428,428,718,428,718,718,718,718,718',
',,,428,428,428,,,,718,,,,,428,428,,428,428,428,428,428,,,,,,,,,,718',
',,,,,,,,,,718,718,,428,428,428,428,428,428,428,428,428,428,428,428,428',
'428,,,428,428,428,,,428,,428,428,,,428,428,,428,718,428,,428,,428,428',
'428,428,428,428,428,,428,428,428,,,,,,,,,,,,486,428,428,,428,,428,486',
'486,486,,,486,486,486,760,486,760,760,760,760,760,,,,486,486,,,,,760',
',,,,486,486,,486,486,486,486,486,,,,,,,,,,760,,897,,897,897,897,897',
'897,760,760,760,760,,,,,,897,,,,,,,486,,,,,,,486,,,,,486,486,,897,,',
',,760,,,,213,213,897,897,213,,,,,,486,486,,213,213,,213,213,213,213',
'213,213,213,,486,213,213,,,486,213,213,213,213,,,897,,,213,,,,,,,,213',
'213,,213,213,213,213,213,213,213,213,213,213,213,,,213,,,,,214,214,',
',214,,,,,,,,,214,214,213,214,214,214,214,214,214,214,,,214,214,,,,214',
'214,214,214,,,,,,214,,,,,,,,214,214,,214,214,214,214,214,214,214,214',
'214,214,214,,,214,,,,,263,263,,,263,,,,,,,,,263,263,214,263,263,263',
'263,263,263,263,,,263,263,,,,263,263,263,263,,,,,,,,,,,,,,263,263,,263',
'263,263,263,263,263,263,263,263,263,263,,,263,,,,,452,452,,,452,,,,',
',,,,452,452,263,452,452,452,452,452,452,452,,,452,452,,,,452,452,452',
'452,,,,,,452,,,,,,,,452,452,,452,452,452,452,452,452,452,452,452,452',
'452,,,452,,,,,453,453,,,453,,,,,,,,,453,453,452,453,453,453,453,453',
'453,453,,,453,453,,,,453,453,453,453,,,,,,453,,,,,,,,453,453,,453,453',
'453,453,453,453,453,453,453,453,453,,,453,,,,,521,521,,,521,,,,,,,,',
'521,521,453,521,521,521,521,521,521,521,,,521,521,,,,521,521,521,521',
',,,,,521,,,,,,,,521,521,,521,521,521,521,521,521,521,521,521,521,521',
',,521,,,,,522,522,,,522,,,,,,,,,522,522,521,522,522,522,522,522,522',
'522,,,522,522,,,,522,522,522,522,,,,,,522,,,,,,,,522,522,,522,522,522',
'522,522,522,522,522,522,522,522,,,522,,,,,531,531,,,531,,,,,,,,,531',
'531,522,531,531,531,531,531,531,531,,,531,531,,,,531,531,531,531,,,',
',,531,,,,,,,,531,531,,531,531,531,531,531,531,531,531,531,531,531,,',
'531,,,,,532,532,,,532,,,,,,,,,532,532,531,532,532,532,532,532,532,532',
',,532,532,,,,532,532,532,532,,,,,,532,,,,,,,,532,532,,532,532,532,532',
'532,532,532,532,532,532,532,,,532,,,,,592,592,,,592,,,,,,,,,592,592',
'532,592,592,592,592,592,592,592,,,592,592,,,,592,592,592,592,,,,,,592',
',,,,,,,592,592,,592,592,592,592,592,592,592,592,592,592,592,,,592,,',
',,593,593,,,593,,,,,,,,,593,593,592,593,593,593,593,593,593,593,,,593',
'593,,,,593,593,593,593,,,,,,593,,,,,,,,593,593,,593,593,593,593,593',
'593,593,593,593,593,593,,,593,,,,,750,750,,,750,,,,,,,,,750,750,593',
'750,750,750,750,750,750,750,,,750,750,,,,750,750,750,750,,,,,,750,,',
',,,,,750,750,,750,750,750,750,750,750,750,750,750,750,750,,,750,,,,',
'751,751,,,751,,,,,,,,,751,751,750,751,751,751,751,751,751,751,,,751',
'751,,,,751,751,751,751,,,,,,751,,,,,,,,751,751,,751,751,751,751,751',
'751,751,751,751,751,751,,892,751,892,892,892,892,892,895,,895,895,895',
'895,895,,,892,,,,,751,,895,920,,920,920,920,920,920,,,,,,,,892,,920',
',,,,895,,892,892,892,892,,,,895,895,895,895,,,,922,920,922,922,922,922',
'922,,,,920,920,920,920,,924,922,924,924,924,924,924,892,,,,,,,895,,924',
',,,,,,922,926,,926,926,926,926,926,920,,,922,922,,,924,949,926,949,949',
'949,949,949,,,,924,924,,,,,949,,,,,,,926,,,,,,922,,,,,926,926,,,949',
'949,,966,966,,924,966,,949,949,949,949,,,,966,966,,966,966,966,966,966',
'966,966,,,966,966,926,,,966,966,966,966,,,,,,966,,,949,,,,,966,966,',
'966,966,966,966,966,966,966,966,966,966,966,,999,966,999,999,999,999',
'999,1001,,1001,1001,1001,1001,1001,,,999,,,,,966,,1001,1003,,1003,1003',
'1003,1003,1003,,,,,,,,999,,1003,,,,,1001,,999,999,999,999,,,,,,1001',
'1001,,,,1005,1003,1005,1005,1005,1005,1005,,,,,,1003,1003,,,1005,,,',
',,999,,,,,,,1001,,,,,,,,,1005,1015,1015,,,1015,,,1003,,,1005,1005,,1015',
'1015,,1015,1015,1015,1015,1015,1015,1015,,,1015,1015,,,,1015,1015,1015',
'1015,,,,,,1015,,,,,1005,,,1015,1015,,1015,1015,1015,1015,1015,1015,1015',
'1015,1015,1015,1015,,,1015,,,,,1016,1016,,,1016,,,,,,,,,1016,1016,1015',
'1016,1016,1016,1016,1016,1016,1016,,,1016,1016,,,,1016,1016,1016,1016',
',,,,,1016,,,,,,,,1016,1016,,1016,1016,1016,1016,1016,1016,1016,1016',
'1016,1016,1016,,1018,1016,1018,1018,1018,1018,1018,1049,,1049,1049,1049',
'1049,1049,,,1018,,,,,1016,,1049,,,,,,,,,,,,,,,1018,,,,,,,1049,,,,1018',
'1018,,,,,,1049,1049,,,,,,,,,,,,,,,,,,,,,,,,,,1018,,,,,,,1049' ]
        racc_action_check = arr = ::Array.new(26543, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

racc_action_pointer = [
   nil,    19,   780,    25,   nil,    53,   nil,   nil,  5009,   596,
   nil, 23739, 23872,   -68,   nil,   -51,    11,   -29,   295,   -29,
   770,   nil,   -80,  5149,  1203,   153,   nil,   -24,   nil,     6,
 24649, 24774,  5289,  5429,  5569,   nil,   921,  5709,  5849,   nil,
    66,   346,   348,   166,   259,  5989,  6129,  6269,    99,   349,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil, 23347,
   nil,   -73,  6409,   nil,   -10,   nil,  6549,  6689,   nil,   nil,
  6829,  6969,   161,   nil, 24005,   nil,   nil,   nil,   nil,   nil,
   -61,   nil,   nil,   nil,   nil,   nil,   nil,   138,   157,   167,
   183, 24138,   nil,   nil,   nil,   nil,   nil,   nil,     0,   nil,
   nil,   132,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,  7109,   nil,   nil,   nil,   nil,  7249,
  7389,  7529,  7669,  7809,   244,   nil,   610,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   235,   nil,  1062,
  7949,  8089,  8229, 25075, 25143,   nil,  8369,  8509,  8649,  8789,
  8929,  9069,   nil,   nil,   467,   -81,    91,   311,   106,   238,
   349,   nil,  9209,  1203,   380,  9349,  9489,  9629,  9769,  9909,
 10049, 10189, 10329, 10469, 10609, 10749, 10889, 11029, 11169, 11309,
 11449, 11589, 11729, 11869, 12009, 12149, 12289, 12429, 12569, 12709,
 12849,   nil,   nil, 25211,   nil,   nil,   414, 12989,   nil,   435,
   nil,   nil,   nil, 13129,   nil,   nil, 13269,   nil,  1344,   nil,
   417,   430,   nil, 13409,   478, 13549,   nil, 13689,   nil,   444,
 13829,   nil,   nil,    66,   nil,  1188, 13969,   434,  1344,   453,
   504,   475, 14109,  1485,   482,   486,   518,   551,   522,   nil,
   520,   488,    41,   nil,   nil,   nil,   560,   268,   523, 14249,
   nil,   395,   594,   571,   nil,   614,   nil, 14389,  1626,   nil,
 14529,   600,   nil,   -69,   325,   600, 14669,   nil,   nil,   577,
   834,   -11,   -10, 14809, 14949,   148,   682,   573,     5,     8,
   586,   657,    21,   703,   nil,   nil, 15089,   nil, 15229,   211,
   213,   224,   309,   326,   328,   370,   432,   434,   nil,   480,
   nil,   nil,   nil,   nil,   nil,   294,   nil,   299,   nil,   387,
   nil,   613,   318,   nil,   615,   363,   nil,   619,   128,   nil,
   623,   153,   nil,   382,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,  1767, 24271,   nil,   nil,
   nil,   nil,   655,   nil,   nil,   641, 15369,   647,   nil,   nil,
   921,   654,   nil,   nil,   665,   675,   400,   419, 24899,   nil,
   nil,   nil,   264,   389,   718,   nil,   nil, 23477, 23607,   nil,
  1485,   nil,   676,   nil,   nil,   780,   nil,   nil,   nil,   nil,
   -33,   nil, 25279, 25347, 15509,   109, 15649, 15789, 15929,  3177,
  3318,   689,   807,   769,   773,   776,   791,  5149,  5289,  3624,
  3459,  3600,  3741,  3882,  4023,  4164,  4305,  4446,  4587,  4728,
   469,   603,  4869,  5009,  1626,   -45, 25024,   nil,   nil,   nil,
   nil,   nil,   nil,   115,   123,   739,   749,   nil,   nil, 16069,
   nil,   nil, 16209,   nil, 16349,   nil,   125,   nil, 16489,   nil,
   nil, 16629,  1329,   754,   765,   nil,   nil,   774, 16769,   782,
 16909, 25415, 25483,   654,   843,   nil, 17049,   805,   nil, 17189,
 17329, 25551, 25619,  1767, 17469,   928,   936,   856,   nil,   nil,
 17609,   nil,   nil, 17749,   nil,   834,   nil,   352,   860,    22,
 23311,   nil,   820,   828,   nil,   829,   831,   832,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   819,   480,   nil,   nil,
 17889,   nil,   nil,   nil,   912,   nil,   nil,   nil,   916,   nil,
   nil,   926,  1908,   969,   nil,  2049,    55,    56,   968,   994,
   nil, 18029, 25687, 25755,    28,   nil,   205,   267,   -17,   nil,
   693,   nil,    16, 18169,   nil, 23441,   nil, 18309,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   194,
   nil,   nil,   197,   nil,   nil,   nil,   878,   nil,   nil,   882,
   nil,   903,   nil, 24404,   nil,   892, 18449, 18589,   420,   938,
 18729, 18869, 19009, 19149,   937,   nil,   nil,   nil, 19289, 19429,
   947,   nil, 19569, 19709,   nil,   179,   182,   514,   646,   923,
  1062,   924,   nil,   nil, 23571,   nil,   nil,  1027,    65,   153,
   nil,   nil,   nil,   nil,   926,   nil,   972, 19849,   nil,   nil,
 19989,   nil,  1344,   370, 20129,   940,   nil,   944,     9,   127,
   984,   298,   921,   985,   947, 20269,  1908,  1019,   -16,  1074,
 20409,   nil,   963,   418,   nil,   nil,   nil,  2190,  2331,   964,
   318,   nil,   nil,   801, 24613,   nil, 24738,   nil, 24863,   nil,
 20549,   nil,   646,   nil,   969,   231,   973,   nil,   nil,   nil,
   nil,   900,   nil,  1087,   nil,   nil,   nil,   nil,  1093,   nil,
 20689,   977,    34,    35,    93,   152, 20829,   nil,   783,   nil,
 25823, 25891, 20969,   nil,   nil,   nil,   498,   882,  2472,  2613,
 24988,   553, 24537,   -14,   763,  2754,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   975, 21109,  2049, 21249,   nil,   979,   nil,
  2190,   nil,  2331,   nil,   nil,  2472,   nil,  2613,   nil,  2754,
 21389, 21529, 21669, 21809,   207, 21949,   989,   993,   nil,   996,
  1015,  1020,   nil,  1043,  1027,  1026,  1019, 22089,   nil,   nil,
  2895,   nil,   nil,   nil,  3036,  3177,   nil,   nil,   nil,  1045,
   268,   nil,   nil,  1167,   nil,  3318,  1056,  1100,   nil,   nil,
   nil,   nil,  1077,  1184,  1069,  1072,   nil,   nil,   nil,  1081,
  1082,   nil,  1083,  1086,   nil,  1087,   nil,   nil,  1091,   707,
  1090,   639,   nil,  1230,   nil, 22229,  1236,  3459,  3600,   nil,
    -7,    62,    63,   359,   957,   nil,  1123,  3741, 22369,   nil,
   579,  1250,  1254,  1140,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,  1168,  1155,   nil,  2895, 22509, 22649,  3036,   345,
   nil,   nil, 25953,   nil,   nil, 25960,   nil, 25028,   nil,   nil,
  1176,   712, 22789,   852,  1233,  1281,  3882,  1178,  1284,   nil,
  4023,   nil,   nil,    -1, 22929,   nil,   nil,   nil,   nil,   nil,
 25977,   nil, 26014,   nil, 26029,   nil, 26053,   nil,   nil,   nil,
   nil,   257,  3253,  1165,   nil,    23,   nil,  1288,  1289, 23069,
  4164,   nil,   nil,  1291,   736,   nil,   nil,   nil,   nil, 26068,
   nil,  1174,   nil,   nil,  1186,  1187,  1188,  1195,   nil,  1196,
   nil,   522,   nil,   nil,   nil,   924, 26109,   nil,   nil,  1213,
   nil,   nil,   nil,  4305,   965,   993,  1062,  1274,  1065,   nil,
  1202,  1203,  1204,  1205,  1207,  3394,  1208,  3445,  4446,   nil,
   nil,   nil,   312,  4587,   nil,   nil,  4728,  4869,   nil, 26171,
   nil, 26178,   nil, 26195,   nil, 26232,   nil,   nil,   nil,  1189,
  1251,  1252,   nil,  1344, 23209, 26271, 26339,  1098, 26401,   nil,
   nil,   nil,   nil,  3535,  1223,   915,   nil,   nil,   nil,  1344,
  1347,  1348,  1229,  1231,  1251,  1252,   nil,   nil,  1264,    35,
    36,   124,  1106,  1271,  1275,   nil,   nil,   nil,   nil, 26408,
   nil,   nil,   nil,   nil,    39,   nil,  1278,   nil ]

racc_action_default = [
    -1,  -627,  -626,  -627,    -2,  -613,    -4,    -5,  -627,    -8,
    -9,  -627,  -627,  -627,   -29,  -627,  -627,  -627,  -280,  -627,
   -40,   -43,  -615,  -627,   -48,   -50,   -51,   -52,   -57,  -257,
  -257,  -257,  -294,  -333,  -334,   -69,  -626,   -73,   -81,   -83,
  -627,  -516,  -517,  -627,  -627,  -627,  -627,  -627,  -615,  -238,
  -271,  -272,  -273,  -274,  -275,  -276,  -277,  -278,  -279,  -602,
  -282,  -285,  -626,  -292,  -302,  -405,  -627,  -627,  -307,  -310,
  -613,  -627,  -318,  -325,  -627,  -335,  -336,  -447,  -448,  -449,
  -450,  -451,  -452,  -626,  -455,  -626,  -626,  -626,  -626,  -626,
  -626,  -626,  -492,  -498,  -500,  -501,  -502,  -503,  -600,  -505,
  -506,  -601,  -508,  -509,  -510,  -511,  -512,  -513,  -514,  -515,
  -520,  -521,  1058,    -3,  -614,  -622,  -623,  -624,    -7,  -627,
  -627,  -627,  -627,  -627,  -627,   -17,  -627,  -112,  -113,  -114,
  -115,  -116,  -117,  -118,  -119,  -120,  -124,  -125,  -126,  -127,
  -128,  -129,  -130,  -131,  -132,  -133,  -134,  -135,  -136,  -137,
  -138,  -139,  -140,  -141,  -142,  -143,  -144,  -145,  -146,  -147,
  -148,  -149,  -150,  -151,  -152,  -153,  -154,  -155,  -156,  -157,
  -158,  -159,  -160,  -161,  -162,  -163,  -164,  -165,  -166,  -167,
  -168,  -169,  -170,  -171,  -172,  -173,  -174,  -175,  -176,  -177,
  -178,  -179,  -180,  -181,  -182,  -183,  -184,  -185,  -186,  -187,
  -188,  -189,  -190,  -191,  -192,  -193,  -194,   -22,  -121,  -626,
  -627,  -627,  -626,  -627,  -627,  -612,  -627,  -627,  -627,  -627,
  -627,  -615,  -616,   -47,  -627,  -516,  -517,  -627,  -280,  -627,
  -627,  -230,  -627,  -626,  -627,  -627,  -627,  -627,  -627,  -627,
  -627,  -627,  -627,  -627,  -627,  -627,  -627,  -627,  -627,  -627,
  -627,  -627,  -627,  -627,  -627,  -627,  -627,  -627,  -627,  -627,
  -627,  -411,  -414,  -627,  -610,  -611,   -58,  -627,  -301,  -627,
  -428,  -431,   -64,  -626,  -425,   -65,  -615,   -66,  -239,  -252,
  -626,  -626,  -256,  -627,  -262,  -627,  -626,  -492,  -593,  -615,
  -627,   -67,   -68,  -613,   -13,   -14,  -627,   -71,  -626,  -615,
  -627,   -74,   -77,  -626,   -89,   -90,  -627,  -627,   -97,  -294,
  -297,  -615,  -418,  -333,  -334,  -337,  -426,  -627,   -79,  -627,
   -85,  -290,  -499,  -627,  -215,  -216,  -231,  -627,  -626,  -284,
  -627,  -627,  -240,  -619,  -619,  -627,  -626,  -303,  -304,  -548,
   -49,  -627,  -627,  -627,  -627,  -613,  -627,  -614,  -516,  -517,
  -627,  -627,  -280,  -627,  -358,  -359,  -627,  -321,  -627,  -112,
  -113,  -154,  -155,  -156,  -172,  -177,  -184,  -187,  -328,  -627,
  -516,  -517,  -588,  -589,  -453,  -627,  -476,  -627,  -478,  -627,
  -480,  -627,  -627,  -460,  -627,  -627,  -466,  -627,  -627,  -472,
  -627,  -627,  -474,  -627,  -491,  -493,  -494,  -495,  -496,    -6,
  -625,   -23,   -24,   -25,   -26,   -27,  -626,  -627,   -19,   -20,
   -21,  -122,  -627,   -30,   -39,  -267,  -627,  -627,  -266,   -31,
  -197,  -615,  -247,  -248,  -626,  -626,  -603,  -604,  -257,  -423,
  -605,  -606,  -604,  -603,  -257,  -422,  -424,  -605,  -606,   -37,
  -205,   -38,  -627,   -41,   -42,  -195,  -262,   -44,   -45,   -46,
  -615,  -300,  -627,  -627,  -626,  -290,  -627,  -627,  -627,  -206,
  -207,  -208,  -209,  -210,  -211,  -212,  -213,  -217,  -218,  -219,
  -220,  -221,  -222,  -223,  -224,  -225,  -226,  -227,  -228,  -229,
  -232,  -233,  -234,  -235,  -615,  -626,  -257,  -603,  -604,   -54,
   -59,  -258,  -419,  -626,  -626,  -615,  -615,  -296,  -253,  -627,
  -261,  -254,  -627,  -259,  -627,  -263,  -627,  -598,  -627,  -599,
   -12,  -614,   -16,  -615,   -70,  -288,   -86,   -75,  -627,  -615,
  -626,  -627,  -627,   -96,  -627,  -499,  -627,   -82,   -87,  -627,
  -627,  -627,  -627,  -236,  -627,  -439,  -627,  -286,  -617,  -241,
  -621,  -620,  -243,  -621,  -291,  -627,  -591,  -619,  -627,  -627,
  -548,  -408,  -587,  -587,  -531,  -533,  -533,  -533,  -547,  -549,
  -550,  -551,  -552,  -553,  -554,  -555,  -556,  -627,  -558,  -560,
  -562,  -567,  -569,  -570,  -572,  -577,  -579,  -580,  -582,  -583,
  -584,  -627,  -626,  -349,  -350,  -626,  -627,  -627,  -627,  -627,
  -434,  -626,  -627,  -627,  -290,  -315,  -107,  -108,  -627,  -110,
  -627,  -280,  -627,  -627,  -326,  -548,  -330,  -627,  -454,  -477,
  -482,  -483,  -485,  -456,  -479,  -457,  -481,  -458,  -459,  -627,
  -462,  -464,  -627,  -465,  -468,  -469,  -627,  -470,  -471,  -627,
  -497,  -627,   -18,  -627,   -28,  -270,  -627,  -627,  -427,  -627,
  -249,  -251,  -627,  -627,   -60,  -245,  -246,  -420,  -627,  -627,
   -62,  -421,  -627,  -627,  -299,  -603,  -604,  -603,  -604,  -615,
  -195,  -627,  -394,  -395,  -615,  -397,  -412,   -53,  -415,  -626,
  -429,  -432,  -244,  -295,  -626,  -260,  -264,  -627,  -594,  -595,
  -627,  -596,   -15,   -72,  -627,   -78,   -84,  -615,  -603,  -604,
  -626,   -93,   -95,  -627,   -80,  -627,  -204,  -214,  -615,  -626,
  -626,  -283,  -615,  -619,  -293,  -592,  -406,  -626,  -626,  -615,
  -627,  -529,  -530,  -627,  -627,  -540,  -627,  -543,  -627,  -545,
  -627,  -360,  -627,  -362,  -364,  -371,  -615,  -561,  -571,  -581,
  -585,  -626,  -351,  -626,  -308,  -352,  -353,  -311,  -627,  -314,
  -627,  -615,  -603,  -604,  -607,  -289,  -627,  -107,  -108,  -109,
  -627,  -627,  -626,  -319,  -522,  -523,  -627,  -322,  -626,  -626,
  -548,  -627,  -627,  -615,  -627,  -626,  -461,  -463,  -467,  -473,
  -475,   -10,  -123,  -268,  -627,  -198,  -627,  -618,  -626,   -33,
  -200,   -34,  -201,   -61,   -35,  -203,   -36,  -202,   -63,  -196,
  -627,  -627,  -627,  -627,  -427,  -627,  -587,  -587,  -376,  -626,
  -626,  -626,  -393,  -627,  -615,  -399,  -556,  -564,  -565,  -575,
  -626,  -417,  -416,   -55,  -626,  -626,  -255,  -265,  -597,   -76,
   -91,   -88,  -298,  -626,  -356,  -626,  -440,  -626,  -441,  -442,
  -287,  -242,  -627,  -627,  -615,  -587,  -568,  -586,  -532,  -533,
  -533,  -559,  -533,  -533,  -578,  -533,  -556,  -573,  -615,  -627,
  -369,  -627,  -557,  -627,  -354,  -627,  -627,  -626,  -626,  -313,
  -627,  -427,  -627,  -107,  -108,  -111,  -615,  -626,  -627,  -525,
  -627,  -627,  -627,  -615,  -527,  -331,  -590,  -484,  -487,  -488,
  -489,  -490,  -627,  -269,   -32,  -199,  -250,  -627,  -237,  -627,
  -374,  -375,  -384,  -378,  -386,  -627,  -389,  -627,  -391,  -396,
  -627,  -627,  -627,  -563,  -627,  -627,  -626,  -627,  -627,   -11,
  -626,  -446,  -357,  -627,  -627,  -444,  -409,  -410,  -407,  -528,
  -627,  -536,  -627,  -538,  -627,  -541,  -627,  -544,  -546,  -361,
  -363,  -367,  -627,  -372,  -305,  -627,  -306,  -627,  -627,  -627,
  -626,  -316,  -427,  -627,  -627,  -323,  -327,  -329,  -526,  -548,
  -486,  -587,  -566,  -377,  -626,  -626,  -626,  -626,  -576,  -626,
  -398,  -615,  -401,  -403,  -404,  -574,  -627,  -290,  -413,  -627,
  -430,  -433,  -445,  -626,   -98,   -99,  -627,  -627,  -106,  -443,
  -533,  -533,  -533,  -533,  -365,  -627,  -370,  -627,  -626,  -309,
  -312,  -264,  -626,  -626,  -320,  -524,  -626,  -626,  -373,  -627,
  -381,  -627,  -383,  -627,  -387,  -627,  -390,  -392,  -400,  -627,
  -289,  -607,   -56,  -439,  -626,  -627,  -627,  -105,  -627,  -534,
  -537,  -539,  -542,  -627,  -368,  -626,  -435,  -436,  -437,  -627,
  -627,  -627,  -626,  -626,  -626,  -626,  -402,  -438,  -615,  -603,
  -604,  -607,  -104,  -533,  -366,  -355,  -317,  -324,  -332,  -627,
  -379,  -382,  -385,  -388,  -427,  -535,  -626,  -380 ]

clist = [
'6,421,213,220,368,280,280,280,315,315,536,558,262,125,208,589,337,130',
'130,133,133,395,135,135,582,585,117,501,301,327,9,279,279,279,699,333',
'9,418,444,341,342,551,315,345,441,4,490,263,759,428,434,223,322,800',
'113,539,542,638,318,853,332,726,495,675,841,274,675,749,114,266,272',
'275,801,678,962,803,711,712,823,844,130,376,375,378,380,383,386,389',
'392,378,930,117,401,402,403,404,297,130,964,486,1,340,340,958,2,340',
'527,299,281,281,281,118,856,619,678,377,622,734,737,346,834,393,840',
'666,842,602,124,604,614,566,616,670,671,620,909,207,620,355,334,414',
'933,407,9,669,614,906,329,633,335,668,372,405,545,338,340,340,340,340',
'353,753,369,277,291,292,328,330,702,336,343,857,344,501,858,746,993',
'356,867,603,870,996,358,758,1036,417,605,762,949,802,804,961,417,549',
'706,339,485,810,493,814,494,815,1026,740,827,913,675,675,964,958,374',
'452,422,279,678,379,382,900,848,399,385,865,438,986,558,715,717,719',
'388,391,930,17,877,764,765,394,868,17,839,836,413,419,280,952,841,659',
'439,443,607,,429,280,224,,709,447,448,449,450,738,,224,224,224,,17,306',
'306,279,,,705,508,422,279,315,1024,279,841,558,500,500,,954,,844,376',
'506,,,428,434,315,521,524,224,224,794,,224,350,,955,,,956,492,685,451',
'813,531,687,528,,1044,694,117,,586,587,,,890,891,517,820,512,525,,315',
'980,315,16,,,,546,592,16,,,,566,17,510,281,,,224,224,224,224,17,274',
'281,1045,,841,511,690,297,919,,497,,297,16,537,117,690,,513,767,1027',
',767,519,,,861,340,340,741,,,,514,,,,,606,,300,997,941,588,566,491,',
',,,,639,,6,496,,1032,,632,,,547,130,,133,,,135,,816,,500,500,783,831',
'645,,690,,788,,558,,9,,17,224,224,224,871,872,16,224,224,224,224,224',
'224,631,675,16,422,279,806,,,678,,438,17,,873,646,,661,,,644,651,,819',
',444,650,998,,,,,,,,662,645,,,429,721,315,,662,662,,224,,,315,,,224',
',942,224,566,,566,921,923,528,925,927,1037,928,,,,528,422,279,,646,',
'17,816,17,667,828,438,306,17,,,,,654,,16,438,682,,866,,940,,,306,,,943',
'566,,,,,17,429,224,,,,16,,797,412,,429,,,698,224,224,,,,674,,,,,672',
'673,,600,,600,,690,300,422,279,807,,,,,973,,683,438,,,,,686,,,735,735',
'835,,,,,,,703,,988,,812,558,,754,16,,16,429,,,,16,,17,,772,,,757,130',
'639,133,763,721,135,805,850,,1019,1020,1021,1022,,300,811,315,16,,300',
',,1028,,,,,315,662,639,,779,781,500,417,1054,528,784,786,1030,1031,443',
'224,806,,,806,821,,645,,805,,875,,,,,824,829,,,,,,,,,,,,566,1055,,860',
',,778,,,862,,,639,,,646,,,651,824,,824,,,16,,,,17,566,,,,,,306,,224',
',,422,279,,306,,,438,,,,,224,,,,,,,130,,721,798,721,,,,500,869,315,',
',340,874,822,,805,429,830,951,806,,797,,,797,,797,893,893,893,,,,1038',
'884,,,,,17,,852,17,,,,807,837,224,807,837,911,807,,807,915,,,935,,224',
',,,224,,,,,16,,944,,,,,,639,876,,29,690,984,721,,,29,,,,,,,,,,,,,224',
'224,29,,315,,224,224,,,224,29,29,29,735,29,315,,,,,340,945,,,,,,,797',
',797,,797,340,797,,721,,721,,16,306,,16,29,29,,,29,918,,,306,,,,807',
',807,,807,,807,929,17,17,,731,,,733,,1008,,721,,,,797,,,,893,893,893',
'893,,893,948,,,1015,29,,,995,,29,29,29,29,29,438,224,,,807,,,224,,,',
',,17,17,,,,824,,17,,,,837,,,798,,,798,224,798,,,,,,,,422,279,,,,,,639',
',,438,824,,,,,,,893,893,893,893,903,16,16,17,18,,,17,17,,18,,,,,799',
'429,,17,,893,,,29,29,29,29,,832,833,29,29,29,29,29,29,,,18,308,308,',
',,,,,29,224,,17,17,16,16,,,,,,16,17,224,,,,,,843,,845,,,798,352,798',
',798,,798,,,29,,,,,882,29,,,29,,,,,965,,,,17,,,,17,16,,,976,16,16,29',
',29,,,,18,29,,16,,,798,,,18,,,19,,,905,,17,19,907,908,,,,,,29,,29,,912',
',,,,16,16,,,,,29,29,,,16,19,,,,17,,,,,,,,,,,,937,938,,17,,,,415,17,',
',17,17,,446,,,,,354,,,16,,,,16,,,224,894,896,898,18,,,,,,,,,29,,,,,',
',969,,,,972,,,16,18,,,,,19,,,,,,957,,959,19,,,,,,,,,503,,505,992,507',
',,509,,16,29,,,981,,982,,983,,,,,,,16,,,,,16,,,16,16,,,1013,,,,18,,18',
',,,308,18,,,,1025,,548,,,1029,,,,,,,308,,,,29,,,,,18,,,,29,19,,,,,41',
',,442,,,41,,29,,1033,,1034,,1035,,,,601,19,601,,,1000,1002,1004,1006',
',1007,1043,,,,,41,304,304,,,,,,,,,,,,,,,635,,,,,29,,,29,1056,,,,,29',
',,18,348,,,370,,,,,29,,,,29,19,,19,,,,,19,,,,,,,,,,,,1050,1051,1052',
'1053,,,,,,,,41,,19,,29,29,,,,41,29,29,,1057,29,,,,,,,,676,,,548,,679',
',,,681,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,18,,676,,,548,,308,29,29,,,,,,308',
',,,19,,,,,,,,,,,,,727,,41,,,,,,,,,,,,,29,,,,,,29,,,,,41,29,29,,,,,,29',
',,,,18,,,18,,,29,,,,,,,,,,,,,,,,,,,,,773,,,,676,548,,,,,,,,29,,,,29',
'29,,,,,41,,41,19,,29,304,41,,,,,,,,,,,817,,,818,42,304,,,,,42,,,,41',
',,29,,29,29,,,826,,,,,,29,29,,,,308,,,,42,305,305,,370,847,370,308,',
',,,,,,,,,19,18,18,19,,,,446,,,,,29,,,,29,349,,,371,,,,,,,,,,,,,,,,41',
',,,,883,,,,,29,,,,,,18,18,,,,,881,18,42,,,,,,,,,42,442,,,,,,,,,29,,',
',,,,,,,,,,,,29,,,,,29,,601,29,29,18,,,,18,18,,,,,,,,,,18,29,,,,,19,19',
',,,,,,,,,,,,,,41,,,,,,,304,,,18,18,548,,42,304,,,,,18,,,,,,,,,,,,,,',
'19,19,,42,,,,19,,,,,,,,,,,,,601,,,,18,,,,18,,991,,978,,,,41,,,41,,,',
',,,,,,,,,19,,,,19,19,18,,,,,,,,42,19,42,,,,305,42,,,,,,,,,,,,,,,,305',
',18,,,,,,,42,19,19,,,,,,18,,,19,,18,,,18,18,,,,,,,,,,,371,,371,,,,,',
',,,,304,,,,,,,,,,19,304,,,19,,,,979,,,,,41,41,,,,,,,,,,,,,,42,,,,,,19',
',,,,,,,,,,,,,,,,,,,,,,,,,,,,,41,41,,19,,,,41,,,,,,,,,,,19,,,,,19,,,19',
'19,,,,,,,,,,,,,,,,,,,,,,370,,,41,,,,41,41,,,,,,,,,,41,,42,,,,,,,305',
',,,,,,,305,,,,,,,,,,,,,,,41,41,,,,,,,,,41,,,,,,,,,,,,,,,,,,,,,,,,,,',
',,,,42,,,42,370,,,,41,,,,41,,,,974,,,,,,,,,,,,,,,,,,,,,,,,,,41,,,,,',
',,,,,,,,,,,,,,,,,,,,,,,,,,,41,,,,,,,,,,,,,,,41,,,,,41,,,41,41,,,305',
',,,,,,,,,,305,,,,,,,,,,,,42,42,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,',
',,,,,,,,,,,,42,42,,,,,,42,,,,,,,,,,,,,,,,,,,,,,,,231,,,,,,,,,278,278',
'278,,,,,,,371,,,42,324,325,326,42,42,,,,,,,,,,42,,,278,,,,,,,,,,,,,',
',,,,,,,,,,,,,,,42,42,,,,,,,,,42,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,371',
',,,42,,,,42,,,,975,,,,,,,,,,,,,,,,,,,,,,,,,,42,,,,,,,,,,,,,,,,,,,,,',
',,,,,,,,,,,42,,,278,420,278,,,,440,445,,,,,42,,,,,42,,,42,42,231,,,459',
'460,461,462,463,464,465,466,467,468,469,470,471,472,473,474,475,476',
'477,478,479,480,481,482,483,484,,,,,,,278,,,,,,278,,,278,,,,,,,278,',
'278,,278,,,278,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,533,,,,,,,,,278,',
',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,',
',,,,,,,,,,278,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,278,,440,660,420',
',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,278,,,278,,278,,,,278,,,,,,',
',,,,,278,,,,,,,,,696,697,,,,,,,,,,278,,,278,,,,,,,,,,,,,,,,,,,,,,,,',
',,278,,,,,,,,,,,,,,,,,,,,,278,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,',
',,,,,,278,775,,,278,278,780,782,,,,,785,787,,,660,789,,,,,,,,,,,,,,',
',,,,,,,,,278,,,278,,,,,,,,,,,,,,,,,,,,278,,,,,,,,,,,,,,,,,,,,278,,,',
',,,,,,,,,,,,,,,,278,,,,,,,,,,,,278,,,,,,,,,,,,,,,,,,,,,,278,,885,,,',
',,,,,,,,,,780,782,787,785,,888,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,',
',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,278,885,,,,,,,',
',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,278,,,,,,,,,,,,,,,,,,,,',
',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,278' ]
        racc_goto_table = arr = ::Array.new(3469, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

clist = [
'6,25,27,34,60,71,71,71,68,68,10,185,155,17,17,95,89,61,61,64,64,60,65',
'65,92,92,98,76,53,34,9,36,36,36,13,71,9,30,20,19,19,154,68,19,30,2,42',
'39,99,40,40,22,67,144,5,72,72,26,54,93,6,134,25,77,190,74,77,58,8,41',
'41,41,145,200,149,147,139,139,14,195,61,6,171,6,6,6,6,6,6,6,132,98,19',
'19,19,19,49,61,150,40,1,32,32,196,3,32,55,50,73,73,73,7,14,175,200,172',
'175,94,94,5,147,172,145,43,145,59,11,59,176,189,176,43,43,176,15,18',
'176,21,73,31,135,33,9,45,176,46,51,66,70,75,87,9,88,91,32,32,32,32,96',
'97,100,48,48,48,101,102,103,104,105,106,107,76,108,109,110,111,112,113',
'114,115,116,117,149,71,118,119,120,136,142,148,71,151,152,153,156,157',
'160,161,162,163,164,165,166,167,77,77,150,196,170,27,6,36,200,173,174',
'147,134,7,177,58,61,135,185,187,187,187,178,179,132,24,180,181,182,183',
'184,24,188,192,22,22,71,193,190,25,22,22,199,,74,71,24,,154,32,32,32',
'32,95,,24,24,24,,24,24,24,36,,,72,34,6,36,68,135,36,190,185,6,6,,144',
',195,6,171,,,40,40,68,27,34,24,24,26,,24,24,,145,,,145,74,55,51,43,27',
'25,53,,135,55,98,,19,19,,,139,139,54,26,9,67,,68,145,68,23,,,,6,27,23',
',,,189,24,5,73,,,24,24,24,24,24,74,73,93,,190,8,40,49,139,,51,,49,23',
'32,98,40,,50,176,14,,176,50,,,26,32,32,25,,,,51,,,,,39,,12,99,94,5,189',
'48,,,,,,34,,6,48,,145,,17,,,73,61,,64,,,65,,76,,6,6,42,72,6,,40,,42',
',185,,9,,24,24,24,24,10,10,23,24,24,24,24,24,24,2,77,23,6,36,189,,,200',
',61,24,,154,74,,34,,,41,74,,55,,20,41,139,,,,,,,,6,6,,,74,133,68,,6',
'6,,24,,,68,,,24,,26,24,189,,189,187,187,53,187,187,13,187,,,,53,6,36',
',74,,24,76,24,41,30,61,24,24,,,,,51,,23,61,9,,25,,92,,,24,,,10,189,',
',,,24,74,24,,,,23,,138,12,,74,,,32,24,24,,,,73,,,,,51,51,,24,,24,,40',
'12,6,36,191,,,,,92,,51,61,,,,,51,,,98,98,138,,,,,,,73,,92,,89,185,,98',
'23,,23,74,,,,23,,24,,17,,,32,61,34,64,32,133,65,34,133,,187,187,187',
'187,,12,155,68,23,,12,,,95,,,,,68,6,34,,22,22,6,71,26,53,22,22,10,10',
'22,24,189,,,189,53,,6,,34,,60,,,,,6,6,,,,,,,,,,,,189,187,,71,,,73,,',
'19,,,34,,,74,,,74,6,,6,,,23,,,,24,189,,,,,,24,,24,,,6,36,,24,,,61,,',
',,24,,,,,,,61,,133,140,133,,,,6,98,68,,,32,98,51,,34,74,51,138,189,',
'138,,,138,,138,6,6,6,,,,25,22,,,,,24,,51,24,,,,191,140,24,191,140,6',
'191,,191,6,,,19,,24,,,,24,,,,,23,,19,,,,,,34,51,,44,40,133,133,,,44',
',,,,,,,,,,,,24,24,44,,68,,24,24,,,24,44,44,44,98,44,68,,,,,32,98,,,',
',,,138,,138,,138,32,138,,133,,133,,23,24,,23,44,44,,,44,51,,,24,,,,191',
',191,,191,,191,51,24,24,,12,,,12,,34,,133,,,,138,,,,6,6,6,6,,6,51,,',
'27,44,,,98,,44,44,44,44,44,61,24,,,191,,,24,,,,,,24,24,,,,6,,24,,,,140',
',,140,,,140,24,140,,,,,,,,6,36,,,,,,34,,,61,6,,,,,,,6,6,6,6,24,23,23',
'24,28,,,24,24,,28,,,,,143,74,,24,,6,,,44,44,44,44,,12,12,44,44,44,44',
'44,44,,,28,28,28,,,,,,,44,24,,24,24,23,23,,,,,,23,24,24,,,,,,143,,143',
',,140,28,140,,140,,140,,,44,,,,,12,44,,,44,,,,,24,,,,24,,,,24,23,,,24',
'23,23,44,,44,,,,28,44,,23,,,140,,,28,,,29,,,12,,24,29,12,12,,,,,,44',
',44,,12,,,,,23,23,,,,,44,44,,,23,29,,,,24,,,,,,,,,,,,12,12,,24,,,,69',
'24,,,24,24,,69,,,,,29,,,23,,,,23,,,24,141,141,141,28,,,,,,,,,44,,,,',
',,12,,,,12,,,23,28,,,,,29,,,,,,143,,143,29,,,,,,,,,69,,69,12,69,,,69',
',23,44,,,143,,143,,143,,,,,,,23,,,,,23,,,23,23,,,12,,,,28,,28,,,,28',
'28,,,,12,,69,,,12,,,,,,,28,,,,44,,,,,28,,,,44,29,,,,,56,,,29,,,56,,44',
',143,,143,,143,,,,28,29,28,,,141,141,141,141,,141,143,,,,,56,56,56,',
',,,,,,,,,,,,,69,,,,,44,,,44,143,,,,,44,,,28,56,,,56,,,,,44,,,,44,29',
',29,,,,,29,,,,,,,,,,,,141,141,141,141,,,,,,,,56,,29,,44,44,,,,56,44',
'44,,141,44,,,,,,,,69,,,69,,69,,,,69,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,28',
',69,,,69,,28,44,44,,,,,,28,,,,29,,,,,,,,,,,,,69,,56,,,,,,,,,,,,,44,',
',,,,44,,,,,56,44,44,,,,,,44,,,,,28,,,28,,,44,,,,,,,,,,,,,,,,,,,,,69',
',,,69,69,,,,,,,,44,,,,44,44,,,,,56,,56,29,,44,56,56,,,,,,,,,,,69,,,69',
'57,56,,,,,57,,,,56,,,44,,44,44,,,69,,,,,,44,44,,,,28,,,,57,57,57,,56',
'69,56,28,,,,,,,,,,,29,28,28,29,,,,69,,,,,44,,,,44,57,,,57,,,,,,,,,,',
',,,,,56,,,,,69,,,,,44,,,,,,28,28,,,,,28,28,57,,,,,,,,,57,29,,,,,,,,',
'44,,,,,,,,,,,,,,,44,,,,,44,,28,44,44,28,,,,28,28,,,,,,,,,,28,44,,,,',
'29,29,,,,,,,,,,,,,,,56,,,,,,,56,,,28,28,69,,57,56,,,,,28,,,,,,,,,,,',
',,,29,29,,57,,,,29,,,,,,,,,,,,,28,,,,28,,,,28,,69,,28,,,,56,,,56,,,',
',,,,,,,,,29,,,,29,29,28,,,,,,,,57,29,57,,,,57,57,,,,,,,,,,,,,,,,57,',
'28,,,,,,,57,29,29,,,,,,28,,,29,,28,,,28,28,,,,,,,,,,,57,,57,,,,,,,,',
',56,,,,,,,,,,29,56,,,29,,,,29,,,,,56,56,,,,,,,,,,,,,,57,,,,,,29,,,,',
',,,,,,,,,,,,,,,,,,,,,,,,,56,56,,29,,,,56,,,,,,,,,,,29,,,,,29,,,29,29',
',,,,,,,,,,,,,,,,,,,,,56,,,56,,,,56,56,,,,,,,,,,56,,57,,,,,,,57,,,,,',
',,57,,,,,,,,,,,,,,,56,56,,,,,,,,,56,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,57',
',,57,56,,,,56,,,,56,,,,56,,,,,,,,,,,,,,,,,,,,,,,,,,56,,,,,,,,,,,,,,',
',,,,,,,,,,,,,,,,,,56,,,,,,,,,,,,,,,56,,,,,56,,,56,56,,,57,,,,,,,,,,',
'57,,,,,,,,,,,,57,57,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,',
',57,57,,,,,,57,,,,,,,,,,,,,,,,,,,,,,,,35,,,,,,,,,35,35,35,,,,,,,57,',
',57,35,35,35,57,57,,,,,,,,,,57,,,35,,,,,,,,,,,,,,,,,,,,,,,,,,,,,57,57',
',,,,,,,,57,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,57,,,,57,,,,57,,,,57,,',
',,,,,,,,,,,,,,,,,,,,,,,57,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,57,,,35,35',
'35,,,,35,35,,,,,57,,,,,57,,,57,57,35,,,35,35,35,35,35,35,35,35,35,35',
'35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,,,,,,,35,,,,,,35,,,35',
',,,,,,35,,35,,35,,,35,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,35,,,,,,,',
',35,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,',
',,,,,,,,,,,,,,,35,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,35,,35,35,35',
',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,35,,,35,,35,,,,35,,,,,,,,,,',
',35,,,,,,,,,35,35,,,,,,,,,,35,,,35,,,,,,,,,,,,,,,,,,,,,,,,,,,35,,,,',
',,,,,,,,,,,,,,,,35,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,35,35',
',,35,35,35,35,,,,,35,35,,,35,35,,,,,,,,,,,,,,,,,,,,,,,,35,,,35,,,,,',
',,,,,,,,,,,,,,35,,,,,,,,,,,,,,,,,,,,35,,,,,,,,,,,,,,,,,,,,35,,,,,,,',
',,,,35,,,,,,,,,,,,,,,,,,,,,,35,,35,,,,,,,,,,,,,,35,35,35,35,,35,,,,',
',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,',
',,,,,,,,,,,,,,,,,,35,35,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,',
',,,,,,,35,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,',
',,,,,,,,,,,,,,,,35' ]
        racc_goto_check = arr = ::Array.new(3469, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

racc_goto_pointer = [
   nil,   100,    43,   104,   nil,    49,    -2,   103,    63,    28,
  -318,   116,   355,  -501,  -621,  -689,   nil,     2,   123,   -27,
  -179,    66,    28,   328,   227,  -211,  -364,   -15,  1036,  1160,
  -173,   -71,    35,    16,   -19,  2454,    -1,   nil,   nil,    20,
  -164,    40,  -220,  -362,   848,  -346,  -668,   nil,   129,    60,
    71,    85,   nil,    -9,    20,  -213,  1372,  1688,  -531,  -231,
   -70,     6,   nil,   nil,     8,    11,  -264,     8,   -29,  1009,
    86,   -27,  -278,    76,    35,  -337,  -254,  -436,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,    76,  -184,   -48,
   nil,    88,  -317,  -672,  -469,  -331,    87,  -443,    21,  -557,
    86,   104,   104,  -371,   104,   100,  -565,   101,  -565,  -422,
  -767,   103,  -577,  -180,  -579,  -766,   107,  -423,  -184,  -421,
  -689,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,  -759,   -79,  -506,  -711,  -477,   nil,  -101,  -476,
   107,   443,  -476,   385,  -611,  -592,   nil,  -589,  -712,  -827,
  -803,  -148,  -357,   128,  -298,   -13,   -67,  -471,   nil,   nil,
   -74,  -473,   -73,  -472,  -792,  -389,  -498,  -624,   nil,   nil,
   128,    -1,    30,   127,   127,  -269,  -249,   130,   137,   137,
  -534,  -380,  -380,   142,  -521,  -328,   nil,  -332,  -478,  -210,
  -650,   -73,  -473,  -648,   nil,  -637,  -792,   nil,   nil,  -127,
  -429 ]

racc_goto_default = [
   nil,   nil,   nil,   nil,     5,   nil,   294,     7,   347,   295,
   nil,   nil,   535,   nil,   854,   nil,   293,   nil,   nil,   nil,
    14,    15,    21,   230,   323,   nil,   nil,   751,   228,   229,
   nil,   nil,    20,   nil,   331,    24,    25,    26,    27,   nil,
   693,   nil,   nil,   nil,   312,   nil,   nil,    28,   423,    35,
   nil,   nil,    37,    40,    39,   nil,   225,   226,   599,   nil,
   132,   431,   131,   134,    78,    79,   nil,    93,    49,   284,
   nil,   424,   nil,   425,   436,   647,   498,   282,   267,    50,
    51,    52,    53,    54,    55,    56,    57,    58,   nil,   268,
    64,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   583,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   723,   565,   nil,   724,   953,   796,   553,   nil,
   554,   nil,   nil,   555,   nil,   557,   663,   nil,   nil,   nil,
   563,   nil,   nil,   nil,   761,   nil,   nil,   nil,   435,   269,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    77,    80,
    82,   nil,   nil,   nil,   nil,   nil,   609,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   838,   552,   nil,   556,   846,
   568,   570,   571,   808,   574,   575,   809,   578,   581,   nil,
   288 ]

racc_reduce_table = [
  0, 0, :racc_error,
  0, 148, :_reduce_1,
  2, 146, :_reduce_2,
  2, 147, :_reduce_3,
  1, 149, :_reduce_none,
  1, 149, :_reduce_none,
  3, 149, :_reduce_6,
  2, 149, :_reduce_none,
  1, 152, :_reduce_8,
  0, 156, :_reduce_9,
  5, 152, :_reduce_10,
  4, 155, :_reduce_11,
  2, 157, :_reduce_12,
  1, 161, :_reduce_none,
  1, 161, :_reduce_none,
  3, 161, :_reduce_15,
  2, 161, :_reduce_16,
  0, 178, :_reduce_17,
  4, 154, :_reduce_18,
  3, 154, :_reduce_19,
  3, 154, :_reduce_20,
  3, 154, :_reduce_21,
  2, 154, :_reduce_22,
  3, 154, :_reduce_23,
  3, 154, :_reduce_24,
  3, 154, :_reduce_25,
  3, 154, :_reduce_26,
  3, 154, :_reduce_27,
  4, 154, :_reduce_28,
  1, 154, :_reduce_none,
  3, 154, :_reduce_30,
  3, 154, :_reduce_31,
  6, 154, :_reduce_32,
  5, 154, :_reduce_33,
  5, 154, :_reduce_34,
  5, 154, :_reduce_35,
  5, 154, :_reduce_36,
  3, 154, :_reduce_37,
  3, 154, :_reduce_38,
  3, 154, :_reduce_39,
  1, 154, :_reduce_none,
  3, 165, :_reduce_41,
  3, 165, :_reduce_42,
  1, 177, :_reduce_none,
  3, 177, :_reduce_44,
  3, 177, :_reduce_45,
  3, 177, :_reduce_46,
  2, 177, :_reduce_47,
  1, 177, :_reduce_none,
  1, 164, :_reduce_49,
  1, 167, :_reduce_none,
  1, 167, :_reduce_none,
  1, 182, :_reduce_none,
  4, 182, :_reduce_53,
  0, 190, :_reduce_54,
  0, 191, :_reduce_55,
  6, 187, :_reduce_56,
  1, 189, :_reduce_57,
  2, 181, :_reduce_58,
  3, 181, :_reduce_59,
  4, 181, :_reduce_60,
  5, 181, :_reduce_61,
  4, 181, :_reduce_62,
  5, 181, :_reduce_63,
  2, 181, :_reduce_64,
  2, 181, :_reduce_65,
  2, 181, :_reduce_66,
  2, 181, :_reduce_67,
  2, 181, :_reduce_68,
  1, 166, :_reduce_none,
  3, 166, :_reduce_70,
  1, 195, :_reduce_none,
  3, 195, :_reduce_72,
  1, 194, :_reduce_73,
  2, 194, :_reduce_74,
  3, 194, :_reduce_75,
  5, 194, :_reduce_76,
  2, 194, :_reduce_77,
  4, 194, :_reduce_78,
  2, 194, :_reduce_79,
  4, 194, :_reduce_80,
  1, 194, :_reduce_81,
  3, 194, :_reduce_82,
  1, 198, :_reduce_none,
  3, 198, :_reduce_84,
  2, 197, :_reduce_85,
  3, 197, :_reduce_86,
  1, 200, :_reduce_87,
  3, 200, :_reduce_88,
  1, 199, :_reduce_89,
  1, 199, :_reduce_90,
  4, 199, :_reduce_91,
  3, 199, :_reduce_92,
  3, 199, :_reduce_93,
  3, 199, :_reduce_94,
  3, 199, :_reduce_95,
  2, 199, :_reduce_96,
  1, 199, :_reduce_97,
  1, 174, :_reduce_98,
  1, 174, :_reduce_99,
  4, 174, :_reduce_100,
  3, 174, :_reduce_101,
  3, 174, :_reduce_102,
  3, 174, :_reduce_103,
  3, 174, :_reduce_104,
  2, 174, :_reduce_105,
  1, 174, :_reduce_106,
  1, 203, :_reduce_107,
  1, 203, :_reduce_none,
  2, 204, :_reduce_109,
  1, 204, :_reduce_110,
  3, 204, :_reduce_111,
  1, 205, :_reduce_none,
  1, 205, :_reduce_none,
  1, 205, :_reduce_none,
  1, 205, :_reduce_115,
  1, 205, :_reduce_116,
  1, 208, :_reduce_none,
  1, 208, :_reduce_none,
  1, 162, :_reduce_119,
  1, 162, :_reduce_none,
  1, 163, :_reduce_121,
  0, 211, :_reduce_122,
  4, 163, :_reduce_123,
  1, 206, :_reduce_none,
  1, 206, :_reduce_none,
  1, 206, :_reduce_none,
  1, 206, :_reduce_none,
  1, 206, :_reduce_none,
  1, 206, :_reduce_none,
  1, 206, :_reduce_none,
  1, 206, :_reduce_none,
  1, 206, :_reduce_none,
  1, 206, :_reduce_none,
  1, 206, :_reduce_none,
  1, 206, :_reduce_none,
  1, 206, :_reduce_none,
  1, 206, :_reduce_none,
  1, 206, :_reduce_none,
  1, 206, :_reduce_none,
  1, 206, :_reduce_none,
  1, 206, :_reduce_none,
  1, 206, :_reduce_none,
  1, 206, :_reduce_none,
  1, 206, :_reduce_none,
  1, 206, :_reduce_none,
  1, 206, :_reduce_none,
  1, 206, :_reduce_none,
  1, 206, :_reduce_none,
  1, 206, :_reduce_none,
  1, 206, :_reduce_none,
  1, 206, :_reduce_none,
  1, 206, :_reduce_none,
  1, 206, :_reduce_none,
  1, 207, :_reduce_none,
  1, 207, :_reduce_none,
  1, 207, :_reduce_none,
  1, 207, :_reduce_none,
  1, 207, :_reduce_none,
  1, 207, :_reduce_none,
  1, 207, :_reduce_none,
  1, 207, :_reduce_none,
  1, 207, :_reduce_none,
  1, 207, :_reduce_none,
  1, 207, :_reduce_none,
  1, 207, :_reduce_none,
  1, 207, :_reduce_none,
  1, 207, :_reduce_none,
  1, 207, :_reduce_none,
  1, 207, :_reduce_none,
  1, 207, :_reduce_none,
  1, 207, :_reduce_none,
  1, 207, :_reduce_none,
  1, 207, :_reduce_none,
  1, 207, :_reduce_none,
  1, 207, :_reduce_none,
  1, 207, :_reduce_none,
  1, 207, :_reduce_none,
  1, 207, :_reduce_none,
  1, 207, :_reduce_none,
  1, 207, :_reduce_none,
  1, 207, :_reduce_none,
  1, 207, :_reduce_none,
  1, 207, :_reduce_none,
  1, 207, :_reduce_none,
  1, 207, :_reduce_none,
  1, 207, :_reduce_none,
  1, 207, :_reduce_none,
  1, 207, :_reduce_none,
  1, 207, :_reduce_none,
  1, 207, :_reduce_none,
  1, 207, :_reduce_none,
  1, 207, :_reduce_none,
  1, 207, :_reduce_none,
  1, 207, :_reduce_none,
  3, 180, :_reduce_195,
  5, 180, :_reduce_196,
  3, 180, :_reduce_197,
  5, 180, :_reduce_198,
  6, 180, :_reduce_199,
  5, 180, :_reduce_200,
  5, 180, :_reduce_201,
  5, 180, :_reduce_202,
  5, 180, :_reduce_203,
  4, 180, :_reduce_204,
  3, 180, :_reduce_205,
  3, 180, :_reduce_206,
  3, 180, :_reduce_207,
  3, 180, :_reduce_208,
  3, 180, :_reduce_209,
  3, 180, :_reduce_210,
  3, 180, :_reduce_211,
  3, 180, :_reduce_212,
  3, 180, :_reduce_213,
  4, 180, :_reduce_214,
  2, 180, :_reduce_215,
  2, 180, :_reduce_216,
  3, 180, :_reduce_217,
  3, 180, :_reduce_218,
  3, 180, :_reduce_219,
  3, 180, :_reduce_220,
  3, 180, :_reduce_221,
  3, 180, :_reduce_222,
  3, 180, :_reduce_223,
  3, 180, :_reduce_224,
  3, 180, :_reduce_225,
  3, 180, :_reduce_226,
  3, 180, :_reduce_227,
  3, 180, :_reduce_228,
  3, 180, :_reduce_229,
  2, 180, :_reduce_230,
  2, 180, :_reduce_231,
  3, 180, :_reduce_232,
  3, 180, :_reduce_233,
  3, 180, :_reduce_234,
  3, 180, :_reduce_235,
  3, 180, :_reduce_236,
  6, 180, :_reduce_237,
  1, 180, :_reduce_none,
  1, 214, :_reduce_239,
  1, 215, :_reduce_none,
  2, 215, :_reduce_241,
  4, 215, :_reduce_242,
  2, 215, :_reduce_243,
  3, 219, :_reduce_244,
  1, 220, :_reduce_none,
  1, 220, :_reduce_none,
  1, 170, :_reduce_247,
  1, 170, :_reduce_248,
  2, 170, :_reduce_249,
  4, 170, :_reduce_250,
  2, 170, :_reduce_251,
  1, 193, :_reduce_252,
  2, 193, :_reduce_253,
  2, 193, :_reduce_254,
  4, 193, :_reduce_255,
  1, 193, :_reduce_256,
  0, 223, :_reduce_257,
  2, 186, :_reduce_258,
  2, 222, :_reduce_259,
  2, 221, :_reduce_260,
  1, 221, :_reduce_none,
  1, 216, :_reduce_262,
  2, 216, :_reduce_263,
  3, 216, :_reduce_264,
  4, 216, :_reduce_265,
  1, 176, :_reduce_266,
  1, 176, :_reduce_267,
  3, 175, :_reduce_268,
  4, 175, :_reduce_269,
  2, 175, :_reduce_270,
  1, 213, :_reduce_none,
  1, 213, :_reduce_none,
  1, 213, :_reduce_none,
  1, 213, :_reduce_none,
  1, 213, :_reduce_none,
  1, 213, :_reduce_none,
  1, 213, :_reduce_none,
  1, 213, :_reduce_none,
  1, 213, :_reduce_none,
  1, 213, :_reduce_none,
  1, 213, :_reduce_281,
  0, 246, :_reduce_282,
  4, 213, :_reduce_283,
  2, 213, :_reduce_284,
  0, 247, :_reduce_285,
  0, 248, :_reduce_286,
  5, 213, :_reduce_287,
  3, 213, :_reduce_288,
  3, 213, :_reduce_289,
  2, 213, :_reduce_290,
  3, 213, :_reduce_291,
  0, 249, :_reduce_292,
  4, 213, :_reduce_293,
  1, 213, :_reduce_294,
  4, 213, :_reduce_295,
  3, 213, :_reduce_296,
  1, 213, :_reduce_297,
  5, 213, :_reduce_298,
  4, 213, :_reduce_299,
  3, 213, :_reduce_300,
  2, 213, :_reduce_301,
  1, 213, :_reduce_none,
  2, 213, :_reduce_303,
  2, 213, :_reduce_304,
  6, 213, :_reduce_305,
  6, 213, :_reduce_306,
  0, 250, :_reduce_307,
  0, 251, :_reduce_308,
  7, 213, :_reduce_309,
  0, 252, :_reduce_310,
  0, 253, :_reduce_311,
  7, 213, :_reduce_312,
  5, 213, :_reduce_313,
  4, 213, :_reduce_314,
  0, 254, :_reduce_315,
  0, 255, :_reduce_316,
  9, 213, :_reduce_317,
  0, 256, :_reduce_318,
  0, 257, :_reduce_319,
  7, 213, :_reduce_320,
  0, 258, :_reduce_321,
  0, 259, :_reduce_322,
  0, 260, :_reduce_323,
  9, 213, :_reduce_324,
  0, 261, :_reduce_325,
  0, 262, :_reduce_326,
  6, 213, :_reduce_327,
  0, 263, :_reduce_328,
  6, 213, :_reduce_329,
  0, 264, :_reduce_330,
  0, 265, :_reduce_331,
  9, 213, :_reduce_332,
  1, 213, :_reduce_333,
  1, 213, :_reduce_334,
  1, 213, :_reduce_335,
  1, 213, :_reduce_336,
  1, 169, :_reduce_337,
  1, 266, :_reduce_none,
  1, 267, :_reduce_none,
  1, 268, :_reduce_none,
  1, 269, :_reduce_none,
  1, 270, :_reduce_none,
  1, 271, :_reduce_none,
  1, 272, :_reduce_none,
  1, 273, :_reduce_none,
  1, 274, :_reduce_none,
  1, 275, :_reduce_none,
  1, 276, :_reduce_none,
  1, 237, :_reduce_none,
  1, 237, :_reduce_none,
  2, 237, :_reduce_none,
  1, 239, :_reduce_none,
  1, 239, :_reduce_none,
  1, 238, :_reduce_none,
  5, 238, :_reduce_355,
  1, 159, :_reduce_none,
  2, 159, :_reduce_357,
  1, 241, :_reduce_none,
  1, 241, :_reduce_359,
  1, 277, :_reduce_none,
  3, 277, :_reduce_361,
  1, 280, :_reduce_362,
  3, 280, :_reduce_363,
  1, 279, :_reduce_364,
  4, 279, :_reduce_365,
  6, 279, :_reduce_366,
  3, 279, :_reduce_367,
  5, 279, :_reduce_368,
  2, 279, :_reduce_369,
  4, 279, :_reduce_370,
  1, 279, :_reduce_371,
  3, 279, :_reduce_372,
  4, 281, :_reduce_373,
  2, 281, :_reduce_374,
  2, 281, :_reduce_375,
  1, 281, :_reduce_376,
  2, 286, :_reduce_377,
  1, 286, :_reduce_none,
  6, 287, :_reduce_379,
  8, 287, :_reduce_380,
  4, 287, :_reduce_381,
  6, 287, :_reduce_382,
  4, 287, :_reduce_383,
  2, 287, :_reduce_384,
  6, 287, :_reduce_385,
  2, 287, :_reduce_386,
  4, 287, :_reduce_387,
  6, 287, :_reduce_388,
  2, 287, :_reduce_389,
  4, 287, :_reduce_390,
  2, 287, :_reduce_391,
  4, 287, :_reduce_392,
  1, 287, :_reduce_393,
  1, 188, :_reduce_394,
  1, 188, :_reduce_none,
  3, 291, :_reduce_396,
  1, 291, :_reduce_397,
  4, 291, :_reduce_398,
  1, 292, :_reduce_none,
  4, 292, :_reduce_400,
  1, 293, :_reduce_401,
  3, 293, :_reduce_402,
  1, 294, :_reduce_403,
  1, 294, :_reduce_none,
  0, 298, :_reduce_405,
  3, 236, :_reduce_406,
  4, 296, :_reduce_407,
  1, 296, :_reduce_408,
  3, 297, :_reduce_409,
  3, 297, :_reduce_410,
  0, 301, :_reduce_411,
  0, 302, :_reduce_412,
  6, 300, :_reduce_413,
  2, 183, :_reduce_414,
  4, 183, :_reduce_415,
  5, 183, :_reduce_416,
  5, 183, :_reduce_417,
  0, 304, :_reduce_418,
  3, 235, :_reduce_419,
  4, 235, :_reduce_420,
  4, 235, :_reduce_421,
  3, 235, :_reduce_422,
  3, 235, :_reduce_423,
  3, 235, :_reduce_424,
  2, 235, :_reduce_425,
  1, 235, :_reduce_426,
  4, 235, :_reduce_427,
  0, 305, :_reduce_428,
  0, 306, :_reduce_429,
  6, 234, :_reduce_430,
  0, 307, :_reduce_431,
  0, 308, :_reduce_432,
  6, 234, :_reduce_433,
  0, 310, :_reduce_434,
  6, 240, :_reduce_435,
  1, 309, :_reduce_none,
  1, 309, :_reduce_none,
  6, 158, :_reduce_438,
  0, 158, :_reduce_439,
  1, 311, :_reduce_440,
  1, 311, :_reduce_none,
  1, 311, :_reduce_none,
  2, 312, :_reduce_443,
  1, 312, :_reduce_none,
  2, 160, :_reduce_445,
  1, 160, :_reduce_none,
  1, 224, :_reduce_447,
  1, 224, :_reduce_448,
  1, 224, :_reduce_none,
  1, 225, :_reduce_450,
  1, 314, :_reduce_451,
  1, 314, :_reduce_none,
  2, 314, :_reduce_453,
  3, 315, :_reduce_454,
  1, 315, :_reduce_455,
  3, 226, :_reduce_456,
  3, 227, :_reduce_457,
  3, 228, :_reduce_458,
  3, 228, :_reduce_459,
  1, 319, :_reduce_460,
  3, 319, :_reduce_461,
  1, 320, :_reduce_none,
  2, 320, :_reduce_463,
  3, 230, :_reduce_464,
  3, 230, :_reduce_465,
  1, 322, :_reduce_466,
  3, 322, :_reduce_467,
  3, 229, :_reduce_468,
  3, 229, :_reduce_469,
  3, 231, :_reduce_470,
  3, 231, :_reduce_471,
  1, 323, :_reduce_472,
  3, 323, :_reduce_473,
  1, 324, :_reduce_474,
  3, 324, :_reduce_475,
  1, 316, :_reduce_476,
  2, 316, :_reduce_477,
  1, 317, :_reduce_478,
  2, 317, :_reduce_479,
  1, 318, :_reduce_480,
  2, 318, :_reduce_481,
  1, 321, :_reduce_482,
  0, 326, :_reduce_483,
  3, 321, :_reduce_484,
  0, 327, :_reduce_485,
  4, 321, :_reduce_486,
  1, 325, :_reduce_487,
  1, 325, :_reduce_488,
  1, 325, :_reduce_489,
  1, 325, :_reduce_none,
  2, 209, :_reduce_491,
  1, 209, :_reduce_492,
  1, 328, :_reduce_none,
  1, 328, :_reduce_none,
  1, 328, :_reduce_none,
  1, 328, :_reduce_none,
  3, 210, :_reduce_497,
  1, 313, :_reduce_none,
  2, 313, :_reduce_499,
  1, 212, :_reduce_none,
  1, 212, :_reduce_none,
  1, 212, :_reduce_none,
  1, 212, :_reduce_none,
  1, 201, :_reduce_none,
  1, 201, :_reduce_none,
  1, 201, :_reduce_none,
  1, 201, :_reduce_none,
  1, 201, :_reduce_none,
  1, 202, :_reduce_509,
  1, 202, :_reduce_510,
  1, 202, :_reduce_511,
  1, 202, :_reduce_512,
  1, 202, :_reduce_513,
  1, 202, :_reduce_514,
  1, 202, :_reduce_515,
  1, 232, :_reduce_516,
  1, 232, :_reduce_517,
  1, 168, :_reduce_518,
  1, 168, :_reduce_519,
  1, 173, :_reduce_520,
  1, 173, :_reduce_521,
  1, 242, :_reduce_522,
  0, 329, :_reduce_523,
  4, 242, :_reduce_524,
  2, 242, :_reduce_525,
  3, 244, :_reduce_526,
  2, 244, :_reduce_527,
  4, 330, :_reduce_528,
  2, 330, :_reduce_529,
  2, 330, :_reduce_530,
  1, 330, :_reduce_none,
  2, 332, :_reduce_532,
  0, 332, :_reduce_533,
  6, 299, :_reduce_534,
  8, 299, :_reduce_535,
  4, 299, :_reduce_536,
  6, 299, :_reduce_537,
  4, 299, :_reduce_538,
  6, 299, :_reduce_539,
  2, 299, :_reduce_540,
  4, 299, :_reduce_541,
  6, 299, :_reduce_542,
  2, 299, :_reduce_543,
  4, 299, :_reduce_544,
  2, 299, :_reduce_545,
  4, 299, :_reduce_546,
  1, 299, :_reduce_547,
  0, 299, :_reduce_548,
  1, 295, :_reduce_549,
  1, 295, :_reduce_550,
  1, 295, :_reduce_551,
  1, 295, :_reduce_552,
  1, 278, :_reduce_none,
  1, 278, :_reduce_554,
  1, 334, :_reduce_none,
  1, 335, :_reduce_none,
  3, 335, :_reduce_557,
  1, 288, :_reduce_558,
  3, 288, :_reduce_559,
  1, 336, :_reduce_none,
  2, 337, :_reduce_561,
  1, 337, :_reduce_562,
  2, 338, :_reduce_563,
  1, 338, :_reduce_564,
  1, 282, :_reduce_none,
  3, 282, :_reduce_566,
  1, 331, :_reduce_none,
  3, 331, :_reduce_568,
  1, 339, :_reduce_none,
  1, 339, :_reduce_none,
  2, 283, :_reduce_571,
  1, 283, :_reduce_572,
  3, 340, :_reduce_573,
  3, 341, :_reduce_574,
  1, 289, :_reduce_575,
  3, 289, :_reduce_576,
  1, 333, :_reduce_577,
  3, 333, :_reduce_578,
  1, 342, :_reduce_none,
  1, 342, :_reduce_none,
  2, 290, :_reduce_581,
  1, 290, :_reduce_582,
  1, 343, :_reduce_none,
  1, 343, :_reduce_none,
  2, 285, :_reduce_585,
  2, 284, :_reduce_586,
  0, 284, :_reduce_587,
  1, 245, :_reduce_none,
  0, 344, :_reduce_589,
  4, 245, :_reduce_590,
  1, 233, :_reduce_591,
  2, 233, :_reduce_592,
  1, 218, :_reduce_none,
  3, 218, :_reduce_594,
  3, 345, :_reduce_595,
  3, 345, :_reduce_596,
  4, 345, :_reduce_597,
  2, 345, :_reduce_598,
  2, 345, :_reduce_599,
  1, 192, :_reduce_none,
  1, 192, :_reduce_none,
  1, 192, :_reduce_none,
  1, 185, :_reduce_none,
  1, 185, :_reduce_none,
  1, 185, :_reduce_none,
  1, 185, :_reduce_none,
  1, 303, :_reduce_none,
  1, 303, :_reduce_none,
  1, 303, :_reduce_none,
  1, 184, :_reduce_none,
  1, 184, :_reduce_none,
  1, 172, :_reduce_none,
  0, 150, :_reduce_none,
  1, 150, :_reduce_none,
  0, 179, :_reduce_none,
  1, 179, :_reduce_none,
  2, 196, :_reduce_none,
  2, 171, :_reduce_none,
  0, 217, :_reduce_none,
  1, 217, :_reduce_none,
  1, 217, :_reduce_none,
  1, 243, :_reduce_622,
  1, 243, :_reduce_none,
  1, 153, :_reduce_none,
  2, 153, :_reduce_625,
  0, 151, :_reduce_626 ]

racc_reduce_n = 627

racc_shift_n = 1058

racc_token_table = {
  false => 0,
  :error => 1,
  :kCLASS => 2,
  :kMODULE => 3,
  :kDEF => 4,
  :kUNDEF => 5,
  :kBEGIN => 6,
  :kRESCUE => 7,
  :kENSURE => 8,
  :kEND => 9,
  :kIF => 10,
  :kUNLESS => 11,
  :kTHEN => 12,
  :kELSIF => 13,
  :kELSE => 14,
  :kCASE => 15,
  :kWHEN => 16,
  :kWHILE => 17,
  :kUNTIL => 18,
  :kFOR => 19,
  :kBREAK => 20,
  :kNEXT => 21,
  :kREDO => 22,
  :kRETRY => 23,
  :kIN => 24,
  :kDO => 25,
  :kDO_COND => 26,
  :kDO_BLOCK => 27,
  :kDO_LAMBDA => 28,
  :kRETURN => 29,
  :kYIELD => 30,
  :kSUPER => 31,
  :kSELF => 32,
  :kNIL => 33,
  :kTRUE => 34,
  :kFALSE => 35,
  :kAND => 36,
  :kOR => 37,
  :kNOT => 38,
  :kIF_MOD => 39,
  :kUNLESS_MOD => 40,
  :kWHILE_MOD => 41,
  :kUNTIL_MOD => 42,
  :kRESCUE_MOD => 43,
  :kALIAS => 44,
  :kDEFINED => 45,
  :klBEGIN => 46,
  :klEND => 47,
  :k__LINE__ => 48,
  :k__FILE__ => 49,
  :k__ENCODING__ => 50,
  :tIDENTIFIER => 51,
  :tFID => 52,
  :tGVAR => 53,
  :tIVAR => 54,
  :tCONSTANT => 55,
  :tLABEL => 56,
  :tCVAR => 57,
  :tNTH_REF => 58,
  :tBACK_REF => 59,
  :tSTRING_CONTENT => 60,
  :tINTEGER => 61,
  :tFLOAT => 62,
  :tREGEXP_END => 63,
  :tUPLUS => 64,
  :tUMINUS => 65,
  :tUMINUS_NUM => 66,
  :tPOW => 67,
  :tCMP => 68,
  :tEQ => 69,
  :tEQQ => 70,
  :tNEQ => 71,
  :tGEQ => 72,
  :tLEQ => 73,
  :tANDOP => 74,
  :tOROP => 75,
  :tMATCH => 76,
  :tNMATCH => 77,
  :tDOT => 78,
  :tDOT2 => 79,
  :tDOT3 => 80,
  :tAREF => 81,
  :tASET => 82,
  :tLSHFT => 83,
  :tRSHFT => 84,
  :tCOLON2 => 85,
  :tCOLON3 => 86,
  :tOP_ASGN => 87,
  :tASSOC => 88,
  :tLPAREN => 89,
  :tLPAREN2 => 90,
  :tRPAREN => 91,
  :tLPAREN_ARG => 92,
  :tLBRACK => 93,
  :tLBRACK2 => 94,
  :tRBRACK => 95,
  :tLBRACE => 96,
  :tLBRACE_ARG => 97,
  :tSTAR => 98,
  :tSTAR2 => 99,
  :tAMPER => 100,
  :tAMPER2 => 101,
  :tTILDE => 102,
  :tPERCENT => 103,
  :tDIVIDE => 104,
  :tPLUS => 105,
  :tMINUS => 106,
  :tLT => 107,
  :tGT => 108,
  :tPIPE => 109,
  :tBANG => 110,
  :tCARET => 111,
  :tLCURLY => 112,
  :tRCURLY => 113,
  :tBACK_REF2 => 114,
  :tSYMBEG => 115,
  :tSTRING_BEG => 116,
  :tXSTRING_BEG => 117,
  :tREGEXP_BEG => 118,
  :tWORDS_BEG => 119,
  :tQWORDS_BEG => 120,
  :tSTRING_DBEG => 121,
  :tSTRING_DVAR => 122,
  :tSTRING_END => 123,
  :tSTRING => 124,
  :tSYMBOL => 125,
  :tNL => 126,
  :tEH => 127,
  :tCOLON => 128,
  :tCOMMA => 129,
  :tSPACE => 130,
  :tSEMI => 131,
  :tLAMBDA => 132,
  :tLAMBEG => 133,
  :tDSTAR => 134,
  :tCHAR => 135,
  :tSYMBOLS_BEG => 136,
  :tQSYMBOLS_BEG => 137,
  :tSTRING_DEND => 138,
  :tUBANG => 139,
  :tRATIONAL => 140,
  :tIMAGINARY => 141,
  :tLABEL_END => 142,
  :tEQL => 143,
  :tLOWEST => 144 }

racc_nt_base = 145

racc_use_result_var = true

Racc_arg = [
  racc_action_table,
  racc_action_check,
  racc_action_default,
  racc_action_pointer,
  racc_goto_table,
  racc_goto_check,
  racc_goto_default,
  racc_goto_pointer,
  racc_nt_base,
  racc_reduce_table,
  racc_token_table,
  racc_shift_n,
  racc_reduce_n,
  racc_use_result_var ]

Racc_token_to_s_table = [
  "$end",
  "error",
  "kCLASS",
  "kMODULE",
  "kDEF",
  "kUNDEF",
  "kBEGIN",
  "kRESCUE",
  "kENSURE",
  "kEND",
  "kIF",
  "kUNLESS",
  "kTHEN",
  "kELSIF",
  "kELSE",
  "kCASE",
  "kWHEN",
  "kWHILE",
  "kUNTIL",
  "kFOR",
  "kBREAK",
  "kNEXT",
  "kREDO",
  "kRETRY",
  "kIN",
  "kDO",
  "kDO_COND",
  "kDO_BLOCK",
  "kDO_LAMBDA",
  "kRETURN",
  "kYIELD",
  "kSUPER",
  "kSELF",
  "kNIL",
  "kTRUE",
  "kFALSE",
  "kAND",
  "kOR",
  "kNOT",
  "kIF_MOD",
  "kUNLESS_MOD",
  "kWHILE_MOD",
  "kUNTIL_MOD",
  "kRESCUE_MOD",
  "kALIAS",
  "kDEFINED",
  "klBEGIN",
  "klEND",
  "k__LINE__",
  "k__FILE__",
  "k__ENCODING__",
  "tIDENTIFIER",
  "tFID",
  "tGVAR",
  "tIVAR",
  "tCONSTANT",
  "tLABEL",
  "tCVAR",
  "tNTH_REF",
  "tBACK_REF",
  "tSTRING_CONTENT",
  "tINTEGER",
  "tFLOAT",
  "tREGEXP_END",
  "tUPLUS",
  "tUMINUS",
  "tUMINUS_NUM",
  "tPOW",
  "tCMP",
  "tEQ",
  "tEQQ",
  "tNEQ",
  "tGEQ",
  "tLEQ",
  "tANDOP",
  "tOROP",
  "tMATCH",
  "tNMATCH",
  "tDOT",
  "tDOT2",
  "tDOT3",
  "tAREF",
  "tASET",
  "tLSHFT",
  "tRSHFT",
  "tCOLON2",
  "tCOLON3",
  "tOP_ASGN",
  "tASSOC",
  "tLPAREN",
  "tLPAREN2",
  "tRPAREN",
  "tLPAREN_ARG",
  "tLBRACK",
  "tLBRACK2",
  "tRBRACK",
  "tLBRACE",
  "tLBRACE_ARG",
  "tSTAR",
  "tSTAR2",
  "tAMPER",
  "tAMPER2",
  "tTILDE",
  "tPERCENT",
  "tDIVIDE",
  "tPLUS",
  "tMINUS",
  "tLT",
  "tGT",
  "tPIPE",
  "tBANG",
  "tCARET",
  "tLCURLY",
  "tRCURLY",
  "tBACK_REF2",
  "tSYMBEG",
  "tSTRING_BEG",
  "tXSTRING_BEG",
  "tREGEXP_BEG",
  "tWORDS_BEG",
  "tQWORDS_BEG",
  "tSTRING_DBEG",
  "tSTRING_DVAR",
  "tSTRING_END",
  "tSTRING",
  "tSYMBOL",
  "tNL",
  "tEH",
  "tCOLON",
  "tCOMMA",
  "tSPACE",
  "tSEMI",
  "tLAMBDA",
  "tLAMBEG",
  "tDSTAR",
  "tCHAR",
  "tSYMBOLS_BEG",
  "tQSYMBOLS_BEG",
  "tSTRING_DEND",
  "tUBANG",
  "tRATIONAL",
  "tIMAGINARY",
  "tLABEL_END",
  "tEQL",
  "tLOWEST",
  "$start",
  "program",
  "top_compstmt",
  "@1",
  "top_stmts",
  "opt_terms",
  "none",
  "top_stmt",
  "terms",
  "stmt",
  "bodystmt",
  "@2",
  "compstmt",
  "opt_rescue",
  "opt_else",
  "opt_ensure",
  "stmts",
  "fitem",
  "undef_list",
  "expr_value",
  "command_asgn",
  "mlhs",
  "command_call",
  "var_lhs",
  "primary_value",
  "opt_call_args",
  "rbracket",
  "call_op",
  "backref",
  "lhs",
  "mrhs",
  "mrhs_arg",
  "expr",
  "@3",
  "opt_nl",
  "arg",
  "command",
  "block_command",
  "block_call",
  "dot_or_colon",
  "operation2",
  "command_args",
  "cmd_brace_block",
  "opt_block_param",
  "fcall",
  "@4",
  "@5",
  "operation",
  "call_args",
  "mlhs_basic",
  "mlhs_inner",
  "rparen",
  "mlhs_head",
  "mlhs_item",
  "mlhs_node",
  "mlhs_post",
  "user_variable",
  "keyword_variable",
  "cname",
  "cpath",
  "fname",
  "op",
  "reswords",
  "fsym",
  "symbol",
  "dsym",
  "@6",
  "simple_numeric",
  "primary",
  "arg_value",
  "aref_args",
  "args",
  "trailer",
  "assocs",
  "paren_args",
  "opt_paren_args",
  "opt_block_arg",
  "block_arg",
  "@7",
  "literal",
  "strings",
  "xstring",
  "regexp",
  "words",
  "qwords",
  "symbols",
  "qsymbols",
  "var_ref",
  "assoc_list",
  "brace_block",
  "method_call",
  "lambda",
  "then",
  "if_tail",
  "do",
  "case_body",
  "for_var",
  "superclass",
  "term",
  "f_arglist",
  "singleton",
  "@8",
  "@9",
  "@10",
  "@11",
  "@12",
  "@13",
  "@14",
  "@15",
  "@16",
  "@17",
  "@18",
  "@19",
  "@20",
  "@21",
  "@22",
  "@23",
  "@24",
  "@25",
  "@26",
  "@27",
  "k_begin",
  "k_if",
  "k_unless",
  "k_while",
  "k_until",
  "k_case",
  "k_for",
  "k_class",
  "k_module",
  "k_def",
  "k_end",
  "f_marg",
  "f_norm_arg",
  "f_margs",
  "f_marg_list",
  "block_args_tail",
  "f_block_kwarg",
  "f_kwrest",
  "opt_f_block_arg",
  "f_block_arg",
  "opt_block_args_tail",
  "block_param",
  "f_arg",
  "f_block_optarg",
  "f_rest_arg",
  "block_param_def",
  "opt_bv_decl",
  "bv_decls",
  "bvar",
  "f_bad_arg",
  "f_larglist",
  "lambda_body",
  "@28",
  "f_args",
  "do_block",
  "@29",
  "@30",
  "operation3",
  "@31",
  "@32",
  "@33",
  "@34",
  "@35",
  "cases",
  "@36",
  "exc_list",
  "exc_var",
  "numeric",
  "string",
  "string1",
  "string_contents",
  "xstring_contents",
  "regexp_contents",
  "word_list",
  "word",
  "string_content",
  "symbol_list",
  "qword_list",
  "qsym_list",
  "string_dvar",
  "@37",
  "@38",
  "sym",
  "@39",
  "args_tail",
  "f_kwarg",
  "opt_args_tail",
  "f_optarg",
  "f_arg_asgn",
  "f_arg_item",
  "f_label",
  "f_kw",
  "f_block_kw",
  "kwrest_mark",
  "f_opt",
  "f_block_opt",
  "restarg_mark",
  "blkarg_mark",
  "@40",
  "assoc" ]

Racc_debug_parser = false

##### State transition tables end #####

# reduce 0 omitted

def _reduce_1(val, _values, result)
                      self.lexer.lex_state = :expr_beg
                    
    result
end

def _reduce_2(val, _values, result)
                      result = new_compstmt val
                    
    result
end

def _reduce_3(val, _values, result)
                      result = val[0]
                    
    result
end

# reduce 4 omitted

# reduce 5 omitted

def _reduce_6(val, _values, result)
                      result = self.block_append val[0], val[2]
                    
    result
end

# reduce 7 omitted

def _reduce_8(val, _values, result)
                      result = val[0]

                      # TODO: remove once I have more confidence this is fixed
                      # result.each_of_type :call_args do |s|
                      #   debug20 666, s, result
                      # end
                    
    result
end

def _reduce_9(val, _values, result)
                      if (self.in_def || self.in_single > 0) then
                        debug20 1
                        yyerror "BEGIN in method"
                      end
                      self.env.extend
                    
    result
end

def _reduce_10(val, _values, result)
                      result = new_iter s(:preexe), nil, val[3]
                    
    result
end

def _reduce_11(val, _values, result)
                      result = new_body val
                    
    result
end

def _reduce_12(val, _values, result)
                      result = new_compstmt val
                    
    result
end

# reduce 13 omitted

# reduce 14 omitted

def _reduce_15(val, _values, result)
                      result = self.block_append val[0], val[2]
                    
    result
end

def _reduce_16(val, _values, result)
                      result = val[1]
                      debug20 2, val, result
                    
    result
end

def _reduce_17(val, _values, result)
                      lexer.lex_state = :expr_fname
                      result = self.lexer.lineno
                    
    result
end

def _reduce_18(val, _values, result)
                      result = s(:alias, val[1], val[3]).line(val[2])
                    
    result
end

def _reduce_19(val, _values, result)
                      result = s(:valias, val[1].to_sym, val[2].to_sym)
                    
    result
end

def _reduce_20(val, _values, result)
                      result = s(:valias, val[1].to_sym, :"$#{val[2]}")
                    
    result
end

def _reduce_21(val, _values, result)
                      yyerror "can't make alias for the number variables"
                    
    result
end

def _reduce_22(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_23(val, _values, result)
                      result = new_if val[2], val[0], nil
                    
    result
end

def _reduce_24(val, _values, result)
                      result = new_if val[2], nil, val[0]
                    
    result
end

def _reduce_25(val, _values, result)
                      result = new_while val[0], val[2], true
                    
    result
end

def _reduce_26(val, _values, result)
                      result = new_until val[0], val[2], true
                    
    result
end

def _reduce_27(val, _values, result)
                      result = s(:rescue, val[0], new_resbody(s(:array), val[2]))
                    
    result
end

def _reduce_28(val, _values, result)
                      if (self.in_def || self.in_single > 0) then
                        debug20 3
                        yyerror "END in method; use at_exit"
                      end
                      result = new_iter s(:postexe), 0, val[2]
                    
    result
end

# reduce 29 omitted

def _reduce_30(val, _values, result)
                      result = new_masgn val[0], val[2], :wrap
                    
    result
end

def _reduce_31(val, _values, result)
                      result = new_op_asgn val
                    
    result
end

def _reduce_32(val, _values, result)
                      result = s(:op_asgn1, val[0], val[2], val[4].to_sym, val[5])
                    
    result
end

def _reduce_33(val, _values, result)
                      result = s(:op_asgn, val[0], val[4], val[2].to_sym, val[3].to_sym)
                      if val[1] == '&.'
                        result.sexp_type = :safe_op_asgn
                      end
                      result.line = val[0].line
                    
    result
end

def _reduce_34(val, _values, result)
                      result = s(:op_asgn, val[0], val[4], val[2].to_sym, val[3].to_sym)
                      if val[1] == '&.'
                        result.sexp_type = :safe_op_asgn
                      end
                      result.line = val[0].line
                    
    result
end

def _reduce_35(val, _values, result)
                      result = s(:op_asgn, val[0], val[4], val[2], val[3])
                      debug20 4, val, result
                    
    result
end

def _reduce_36(val, _values, result)
                      result = s(:op_asgn, val[0], val[4], val[2], val[3])
                      debug20 5, val, result
                    
    result
end

def _reduce_37(val, _values, result)
                      self.backref_assign_error val[0]
                    
    result
end

def _reduce_38(val, _values, result)
                      result = new_assign val[0], s(:svalue, val[2])
                    
    result
end

def _reduce_39(val, _values, result)
                      result = new_masgn val[0], val[2]
                    
    result
end

# reduce 40 omitted

def _reduce_41(val, _values, result)
                      result = new_assign val[0], val[2]
                    
    result
end

def _reduce_42(val, _values, result)
                      result = new_assign val[0], val[2]
                    
    result
end

# reduce 43 omitted

def _reduce_44(val, _values, result)
                      result = logical_op :and, val[0], val[2]
                    
    result
end

def _reduce_45(val, _values, result)
                      result = logical_op :or, val[0], val[2]
                    
    result
end

def _reduce_46(val, _values, result)
                      result = s(:call, val[2], :"!")
                    
    result
end

def _reduce_47(val, _values, result)
                      result = s(:call, val[1], :"!")
                    
    result
end

# reduce 48 omitted

def _reduce_49(val, _values, result)
                      result = value_expr(val[0])
                    
    result
end

# reduce 50 omitted

# reduce 51 omitted

# reduce 52 omitted

def _reduce_53(val, _values, result)
                      result = new_call val[0], val[2].to_sym, val[3]
                    
    result
end

def _reduce_54(val, _values, result)
                      self.env.extend(:dynamic)
                      result = self.lexer.lineno
                    
    result
end

def _reduce_55(val, _values, result)
                      result = nil # self.env.dynamic.keys
                    
    result
end

def _reduce_56(val, _values, result)
                      result = new_iter nil, val[2], val[4]
                      result.line = val[1]

                      self.env.unextend
                    
    result
end

def _reduce_57(val, _values, result)
                      result = new_call nil, val[0].to_sym
                    
    result
end

def _reduce_58(val, _values, result)
                      result = val[0].concat val[1].sexp_body # REFACTOR pattern
                    
    result
end

def _reduce_59(val, _values, result)
                      result = val[0].concat val[1].sexp_body
                      if val[2] then
                        block_dup_check result, val[2]

                        result, operation = val[2], result
                        result.insert 1, operation
                      end
                    
    result
end

def _reduce_60(val, _values, result)
                      result = new_call val[0], val[2].to_sym, val[3], val[1]
                    
    result
end

def _reduce_61(val, _values, result)
                      recv, _, msg, args, block = val
                      call = new_call recv, msg.to_sym, args, val[1]

                      block_dup_check call, block

                      block.insert 1, call
                      result = block
                    
    result
end

def _reduce_62(val, _values, result)
                      result = new_call val[0], val[2].to_sym, val[3]
                    
    result
end

def _reduce_63(val, _values, result)
                      recv, _, msg, args, block = val
                      call = new_call recv, msg.to_sym, args

                      block_dup_check call, block

                      block.insert 1, call
                      result = block
                    
    result
end

def _reduce_64(val, _values, result)
                      result = new_super val[1]
                    
    result
end

def _reduce_65(val, _values, result)
                      result = new_yield val[1]
                    
    result
end

def _reduce_66(val, _values, result)
                      line = val[0].last
                      result = s(:return, ret_args(val[1])).line(line)
                    
    result
end

def _reduce_67(val, _values, result)
                      line = val[0].last
                      result = s(:break, ret_args(val[1])).line(line)
                    
    result
end

def _reduce_68(val, _values, result)
                      line = val[0].last
                      result = s(:next, ret_args(val[1])).line(line)
                    
    result
end

# reduce 69 omitted

def _reduce_70(val, _values, result)
                      result = val[1]
                    
    result
end

# reduce 71 omitted

def _reduce_72(val, _values, result)
                      result = s(:masgn, s(:array, val[1]))
                    
    result
end

def _reduce_73(val, _values, result)
                      result = s(:masgn, val[0])
                    
    result
end

def _reduce_74(val, _values, result)
                      result = s(:masgn, val[0] << val[1].compact)
                    
    result
end

def _reduce_75(val, _values, result)
                      result = s(:masgn, val[0] << s(:splat, val[2]))
                    
    result
end

def _reduce_76(val, _values, result)
                      ary1, _, splat, _, ary2 = val

                      result = list_append ary1, s(:splat, splat)
                      result.concat ary2.sexp_body
                      result = s(:masgn, result)
                    
    result
end

def _reduce_77(val, _values, result)
                      result = s(:masgn, val[0] << s(:splat))
                    
    result
end

def _reduce_78(val, _values, result)
                      ary = list_append val[0], s(:splat)
                      ary.concat val[3].sexp_body
                      result = s(:masgn, ary)
                    
    result
end

def _reduce_79(val, _values, result)
                      result = s(:masgn, s(:array, s(:splat, val[1])))
                    
    result
end

def _reduce_80(val, _values, result)
                      ary = s(:array, s(:splat, val[1]))
                      ary.concat val[3].sexp_body
                      result = s(:masgn, ary)
                    
    result
end

def _reduce_81(val, _values, result)
                      result = s(:masgn, s(:array, s(:splat)))
                    
    result
end

def _reduce_82(val, _values, result)
                      result = s(:masgn, s(:array, s(:splat), *val[2].sexp_body))
                    
    result
end

# reduce 83 omitted

def _reduce_84(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_85(val, _values, result)
                      result = s(:array, val[0])
                    
    result
end

def _reduce_86(val, _values, result)
                      result = val[0] << val[1].compact
                    
    result
end

def _reduce_87(val, _values, result)
                      result = s(:array, val[0])
                    
    result
end

def _reduce_88(val, _values, result)
                      result = list_append val[0], val[2]
                    
    result
end

def _reduce_89(val, _values, result)
                      result = self.assignable val[0]
                    
    result
end

def _reduce_90(val, _values, result)
                      result = self.assignable val[0]
                    
    result
end

def _reduce_91(val, _values, result)
                      result = self.aryset val[0], val[2]
                    
    result
end

def _reduce_92(val, _values, result)
                      result = new_attrasgn val[0], val[2], val[1]
                    
    result
end

def _reduce_93(val, _values, result)
                      result = s(:attrasgn, val[0], :"#{val[2]}=")
                    
    result
end

def _reduce_94(val, _values, result)
                      result = new_attrasgn val[0], val[2], val[1]
                    
    result
end

def _reduce_95(val, _values, result)
                      if (self.in_def || self.in_single > 0) then
                        debug20 7
                        yyerror "dynamic constant assignment"
                      end

                      result = s(:const, s(:colon2, val[0], val[2].to_sym), nil)
                    
    result
end

def _reduce_96(val, _values, result)
                      if (self.in_def || self.in_single > 0) then
                        debug20 8
                        yyerror "dynamic constant assignment"
                      end

                      result = s(:const, nil, s(:colon3, val[1].to_sym))
                    
    result
end

def _reduce_97(val, _values, result)
                      self.backref_assign_error val[0]
                    
    result
end

def _reduce_98(val, _values, result)
                      result = self.assignable val[0]
                    
    result
end

def _reduce_99(val, _values, result)
                      result = self.assignable val[0]
                      debug20 9, val, result
                    
    result
end

def _reduce_100(val, _values, result)
                      result = self.aryset val[0], val[2]
                    
    result
end

def _reduce_101(val, _values, result)
                      result = new_attrasgn val[0], val[2], val[1]
                    
    result
end

def _reduce_102(val, _values, result)
                      result = s(:attrasgn, val[0], :"#{val[2]}=")
                    
    result
end

def _reduce_103(val, _values, result)
                      result = new_attrasgn val[0], val[2], val[1]
                    
    result
end

def _reduce_104(val, _values, result)
                      if (self.in_def || self.in_single > 0) then
                        debug20 10
                        yyerror "dynamic constant assignment"
                      end

                      result = s(:const, s(:colon2, val[0], val[2].to_sym))
                    
    result
end

def _reduce_105(val, _values, result)
                      if (self.in_def || self.in_single > 0) then
                        debug20 11
                        yyerror "dynamic constant assignment"
                      end

                      result = s(:const, s(:colon3, val[1].to_sym))
                    
    result
end

def _reduce_106(val, _values, result)
                      self.backref_assign_error val[0]
                    
    result
end

def _reduce_107(val, _values, result)
                      yyerror "class/module name must be CONSTANT"
                    
    result
end

# reduce 108 omitted

def _reduce_109(val, _values, result)
                      result = s(:colon3, val[1].to_sym)
                    
    result
end

def _reduce_110(val, _values, result)
                      result = val[0].to_sym
                    
    result
end

def _reduce_111(val, _values, result)
                      result = s(:colon2, val[0], val[2].to_sym)
                    
    result
end

# reduce 112 omitted

# reduce 113 omitted

# reduce 114 omitted

def _reduce_115(val, _values, result)
                      lexer.lex_state = :expr_end
                      result = val[0]
                    
    result
end

def _reduce_116(val, _values, result)
                      lexer.lex_state = :expr_end
                      result = val[0]
                    
    result
end

# reduce 117 omitted

# reduce 118 omitted

def _reduce_119(val, _values, result)
                      result = s(:lit, val[0].to_sym)
                    
    result
end

# reduce 120 omitted

def _reduce_121(val, _values, result)
                      result = new_undef val[0]
                    
    result
end

def _reduce_122(val, _values, result)
                      lexer.lex_state = :expr_fname
                    
    result
end

def _reduce_123(val, _values, result)
                      result = new_undef val[0], val[3]
                    
    result
end

# reduce 124 omitted

# reduce 125 omitted

# reduce 126 omitted

# reduce 127 omitted

# reduce 128 omitted

# reduce 129 omitted

# reduce 130 omitted

# reduce 131 omitted

# reduce 132 omitted

# reduce 133 omitted

# reduce 134 omitted

# reduce 135 omitted

# reduce 136 omitted

# reduce 137 omitted

# reduce 138 omitted

# reduce 139 omitted

# reduce 140 omitted

# reduce 141 omitted

# reduce 142 omitted

# reduce 143 omitted

# reduce 144 omitted

# reduce 145 omitted

# reduce 146 omitted

# reduce 147 omitted

# reduce 148 omitted

# reduce 149 omitted

# reduce 150 omitted

# reduce 151 omitted

# reduce 152 omitted

# reduce 153 omitted

# reduce 154 omitted

# reduce 155 omitted

# reduce 156 omitted

# reduce 157 omitted

# reduce 158 omitted

# reduce 159 omitted

# reduce 160 omitted

# reduce 161 omitted

# reduce 162 omitted

# reduce 163 omitted

# reduce 164 omitted

# reduce 165 omitted

# reduce 166 omitted

# reduce 167 omitted

# reduce 168 omitted

# reduce 169 omitted

# reduce 170 omitted

# reduce 171 omitted

# reduce 172 omitted

# reduce 173 omitted

# reduce 174 omitted

# reduce 175 omitted

# reduce 176 omitted

# reduce 177 omitted

# reduce 178 omitted

# reduce 179 omitted

# reduce 180 omitted

# reduce 181 omitted

# reduce 182 omitted

# reduce 183 omitted

# reduce 184 omitted

# reduce 185 omitted

# reduce 186 omitted

# reduce 187 omitted

# reduce 188 omitted

# reduce 189 omitted

# reduce 190 omitted

# reduce 191 omitted

# reduce 192 omitted

# reduce 193 omitted

# reduce 194 omitted

def _reduce_195(val, _values, result)
                      result = new_assign val[0], val[2]
                    
    result
end

def _reduce_196(val, _values, result)
                      result = new_assign val[0], s(:rescue, val[2], new_resbody(s(:array), val[4]))
                    
    result
end

def _reduce_197(val, _values, result)
                      result = new_op_asgn val
                    
    result
end

def _reduce_198(val, _values, result)
                      result = new_op_asgn val
                      result = s(:rescue, result, new_resbody(s(:array), val[4]))
                    
    result
end

def _reduce_199(val, _values, result)
                      val[2].sexp_type = :arglist if val[2]
                      result = s(:op_asgn1, val[0], val[2], val[4].to_sym, val[5])
                    
    result
end

def _reduce_200(val, _values, result)
                      result = new_op_asgn2 val
                    
    result
end

def _reduce_201(val, _values, result)
                      result = new_op_asgn2 val
                    
    result
end

def _reduce_202(val, _values, result)
                      result = s(:op_asgn, val[0], val[4], val[2].to_sym, val[3].to_sym)
                    
    result
end

def _reduce_203(val, _values, result)
                      yyerror "constant re-assignment"
                    
    result
end

def _reduce_204(val, _values, result)
                      yyerror "constant re-assignment"
                    
    result
end

def _reduce_205(val, _values, result)
                      self.backref_assign_error val[0]
                    
    result
end

def _reduce_206(val, _values, result)
                      v1, v2 = val[0], val[2]
                      if v1.node_type == :lit and v2.node_type == :lit and Integer === v1.last and Integer === v2.last then
                        result = s(:lit, (v1.last)..(v2.last))
                      else
                        result = s(:dot2, v1, v2)
                      end
                    
    result
end

def _reduce_207(val, _values, result)
                      v1, v2 = val[0], val[2]
                      if v1.node_type == :lit and v2.node_type == :lit and Integer === v1.last and Integer === v2.last then
                        result = s(:lit, (v1.last)...(v2.last))
                      else
                        result = s(:dot3, v1, v2)
                      end
                    
    result
end

def _reduce_208(val, _values, result)
                      result = new_call val[0], :+, argl(val[2])
                    
    result
end

def _reduce_209(val, _values, result)
                      result = new_call val[0], :-, argl(val[2])
                    
    result
end

def _reduce_210(val, _values, result)
                      result = new_call val[0], :*, argl(val[2])
                    
    result
end

def _reduce_211(val, _values, result)
                      result = new_call val[0], :"/", argl(val[2])
                    
    result
end

def _reduce_212(val, _values, result)
                      result = new_call val[0], :"%", argl(val[2])
                    
    result
end

def _reduce_213(val, _values, result)
                      result = new_call val[0], :**, argl(val[2])
                    
    result
end

def _reduce_214(val, _values, result)
                      result = new_call(new_call(s(:lit, val[1]), :"**", argl(val[3])), :"-@")
                    
    result
end

def _reduce_215(val, _values, result)
                      result = new_call val[1], :"+@"
                    
    result
end

def _reduce_216(val, _values, result)
                      result = new_call val[1], :"-@"
                    
    result
end

def _reduce_217(val, _values, result)
                      result = new_call val[0], :"|", argl(val[2])
                    
    result
end

def _reduce_218(val, _values, result)
                      result = new_call val[0], :"^", argl(val[2])
                    
    result
end

def _reduce_219(val, _values, result)
                      result = new_call val[0], :"&", argl(val[2])
                    
    result
end

def _reduce_220(val, _values, result)
                      result = new_call val[0], :"<=>", argl(val[2])
                    
    result
end

def _reduce_221(val, _values, result)
                      result = new_call val[0], :">", argl(val[2])
                    
    result
end

def _reduce_222(val, _values, result)
                      result = new_call val[0], :">=", argl(val[2])
                    
    result
end

def _reduce_223(val, _values, result)
                      result = new_call val[0], :"<", argl(val[2])
                    
    result
end

def _reduce_224(val, _values, result)
                      result = new_call val[0], :"<=", argl(val[2])
                    
    result
end

def _reduce_225(val, _values, result)
                      result = new_call val[0], :"==", argl(val[2])
                    
    result
end

def _reduce_226(val, _values, result)
                      result = new_call val[0], :"===", argl(val[2])
                    
    result
end

def _reduce_227(val, _values, result)
                      result = new_call val[0], :"!=", argl(val[2])
                    
    result
end

def _reduce_228(val, _values, result)
                      result = new_match val[0], val[2]
                    
    result
end

def _reduce_229(val, _values, result)
                      result = s(:not, new_match(val[0], val[2]))
                    
    result
end

def _reduce_230(val, _values, result)
                      result = new_call val[1], :"!"
                    
    result
end

def _reduce_231(val, _values, result)
                      result = new_call value_expr(val[1]), :"~"
                    
    result
end

def _reduce_232(val, _values, result)
                      val[0] = value_expr val[0]
                      val[2] = value_expr val[2]
                      result = new_call val[0], :"\<\<", argl(val[2])
                    
    result
end

def _reduce_233(val, _values, result)
                      val[0] = value_expr val[0]
                      val[2] = value_expr val[2]
                      result = new_call val[0], :">>", argl(val[2])
                    
    result
end

def _reduce_234(val, _values, result)
                      result = logical_op :and, val[0], val[2]
                    
    result
end

def _reduce_235(val, _values, result)
                      result = logical_op :or, val[0], val[2]
                    
    result
end

def _reduce_236(val, _values, result)
                      result = s(:defined, val[2])
                    
    result
end

def _reduce_237(val, _values, result)
                      result = s(:if, val[0], val[2], val[5])
                    
    result
end

# reduce 238 omitted

def _reduce_239(val, _values, result)
                      result = value_expr(val[0])
                    
    result
end

# reduce 240 omitted

def _reduce_241(val, _values, result)
                      result = args [val[0]]
                    
    result
end

def _reduce_242(val, _values, result)
                      result = args [val[0], array_to_hash(val[2])]
                    
    result
end

def _reduce_243(val, _values, result)
                      result = args [array_to_hash(val[0])]
                    
    result
end

def _reduce_244(val, _values, result)
                      result = val[1]
                    
    result
end

# reduce 245 omitted

# reduce 246 omitted

def _reduce_247(val, _values, result)
                      result = val[0]
                    
    result
end

def _reduce_248(val, _values, result)
                      result = val[0]
                    
    result
end

def _reduce_249(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_250(val, _values, result)
                      result = args [val[0], array_to_hash(val[2])]
                    
    result
end

def _reduce_251(val, _values, result)
                      result = args [array_to_hash(val[0])]
                    
    result
end

def _reduce_252(val, _values, result)
                      warning "parenthesize argument(s) for future version"
                      result = call_args val
                    
    result
end

def _reduce_253(val, _values, result)
                      result = call_args val
                      result = self.arg_blk_pass val[0], val[1]
                    
    result
end

def _reduce_254(val, _values, result)
                      result = call_args [array_to_hash(val[0])]
                      result = self.arg_blk_pass result, val[1]
                    
    result
end

def _reduce_255(val, _values, result)
                      result = call_args [val[0], array_to_hash(val[2])]
                      result = self.arg_blk_pass result, val[3]
                    
    result
end

def _reduce_256(val, _values, result)
                      result = call_args val
                    
    result
end

def _reduce_257(val, _values, result)
                      result = lexer.cmdarg.stack.dup # TODO: smell?
                      lexer.cmdarg.push true
                    
    result
end

def _reduce_258(val, _values, result)
                      lexer.cmdarg.stack.replace val[0]
                      result = val[1]
                    
    result
end

def _reduce_259(val, _values, result)
                      result = s(:block_pass, val[1])
                    
    result
end

def _reduce_260(val, _values, result)
                      result = val[1]
                    
    result
end

# reduce 261 omitted

def _reduce_262(val, _values, result)
                      result = s(:array, val[0])
                    
    result
end

def _reduce_263(val, _values, result)
                      result = s(:array, s(:splat, val[1]))
                    
    result
end

def _reduce_264(val, _values, result)
                      result = self.list_append val[0], val[2]
                    
    result
end

def _reduce_265(val, _values, result)
                      result = self.list_append val[0], s(:splat, val[3])
                    
    result
end

def _reduce_266(val, _values, result)
                      result = new_masgn_arg val[0]
                    
    result
end

def _reduce_267(val, _values, result)
                      result = new_masgn_arg val[0], :wrap
                    
    result
end

def _reduce_268(val, _values, result)
                      result = val[0] << val[2]
                    
    result
end

def _reduce_269(val, _values, result)
                      result = self.arg_concat val[0], val[3]
                    
    result
end

def _reduce_270(val, _values, result)
                      result = s(:splat, val[1])
                    
    result
end

# reduce 271 omitted

# reduce 272 omitted

# reduce 273 omitted

# reduce 274 omitted

# reduce 275 omitted

# reduce 276 omitted

# reduce 277 omitted

# reduce 278 omitted

# reduce 279 omitted

# reduce 280 omitted

def _reduce_281(val, _values, result)
                      result = new_call nil, val[0].to_sym
                    
    result
end

def _reduce_282(val, _values, result)
                      result = self.lexer.lineno
                    
    result
end

def _reduce_283(val, _values, result)
                      unless val[2] then
                        result = s(:nil)
                      else
                        result = s(:begin, val[2])
                      end

                      result.line = val[1]
                    
    result
end

def _reduce_284(val, _values, result)
                      debug20 13, val, result
                    
    result
end

def _reduce_285(val, _values, result)
                      result = self.lexer.cmdarg.stack.dup
                      lexer.cmdarg.stack.replace [false] # TODO add api for these
                    
    result
end

def _reduce_286(val, _values, result)
                      lexer.lex_state = :expr_endarg
                    
    result
end

def _reduce_287(val, _values, result)
                      warning "(...) interpreted as grouped expression"
                      lexer.cmdarg.stack.replace val[1]
                      result = val[2]
                    
    result
end

def _reduce_288(val, _values, result)
                      result = val[1] || s(:nil)
                      result.paren = true
                    
    result
end

def _reduce_289(val, _values, result)
                      result = s(:colon2, val[0], val[2].to_sym)
                    
    result
end

def _reduce_290(val, _values, result)
                      result = s(:colon3, val[1].to_sym)
                    
    result
end

def _reduce_291(val, _values, result)
                      result = val[1] || s(:array)
                      result.sexp_type = :array # aref_args is :args
                    
    result
end

def _reduce_292(val, _values, result)
                      result = self.lexer.lineno
                    
    result
end

def _reduce_293(val, _values, result)
                      result = new_hash val
                    
    result
end

def _reduce_294(val, _values, result)
                      result = s(:return)
                    
    result
end

def _reduce_295(val, _values, result)
                      result = new_yield val[2]
                    
    result
end

def _reduce_296(val, _values, result)
                      result = new_yield
                    
    result
end

def _reduce_297(val, _values, result)
                      result = new_yield
                    
    result
end

def _reduce_298(val, _values, result)
                      result = s(:defined, val[3])
                    
    result
end

def _reduce_299(val, _values, result)
                      result = s(:call, val[2], :"!")
                    
    result
end

def _reduce_300(val, _values, result)
                      debug20 14, val, result
                    
    result
end

def _reduce_301(val, _values, result)
                      oper, iter = val[0], val[1]
                      call = oper # FIX
                      iter.insert 1, call
                      result = iter
                      call.line = iter.line
                    
    result
end

# reduce 302 omitted

def _reduce_303(val, _values, result)
                      call, iter = val[0], val[1]
                      block_dup_check call, iter
                      iter.insert 1, call # FIX
                      result = iter
                    
    result
end

def _reduce_304(val, _values, result)
                      result = val[1] # TODO: fix lineno
                    
    result
end

def _reduce_305(val, _values, result)
                      result = new_if val[1], val[3], val[4]
                    
    result
end

def _reduce_306(val, _values, result)
                      result = new_if val[1], val[4], val[3]
                    
    result
end

def _reduce_307(val, _values, result)
                      lexer.cond.push true
                    
    result
end

def _reduce_308(val, _values, result)
                      lexer.cond.pop
                    
    result
end

def _reduce_309(val, _values, result)
                      result = new_while val[5], val[2], true
                    
    result
end

def _reduce_310(val, _values, result)
                      lexer.cond.push true
                    
    result
end

def _reduce_311(val, _values, result)
                      lexer.cond.pop
                    
    result
end

def _reduce_312(val, _values, result)
                      result = new_until val[5], val[2], true
                    
    result
end

def _reduce_313(val, _values, result)
                      (_, line), expr, _, body, _ = val
                      result = new_case expr, body, line
                    
    result
end

def _reduce_314(val, _values, result)
                      (_, line), _, body, _ = val
                      result = new_case nil, body, line
                    
    result
end

def _reduce_315(val, _values, result)
                      lexer.cond.push true
                    
    result
end

def _reduce_316(val, _values, result)
                      lexer.cond.pop
                    
    result
end

def _reduce_317(val, _values, result)
                      result = new_for val[4], val[1], val[7]
                    
    result
end

def _reduce_318(val, _values, result)
                      result = self.lexer.lineno
                    
    result
end

def _reduce_319(val, _values, result)
                      self.comments.push self.lexer.comments
                      if (self.in_def || self.in_single > 0) then
                        yyerror "class definition in method body"
                      end
                      self.env.extend
                    
    result
end

def _reduce_320(val, _values, result)
                      result = new_class val
                      self.env.unextend
                      self.lexer.comments # we don't care about comments in the body
                    
    result
end

def _reduce_321(val, _values, result)
                      result = self.lexer.lineno
                    
    result
end

def _reduce_322(val, _values, result)
                      result = self.in_def
                      self.in_def = false
                    
    result
end

def _reduce_323(val, _values, result)
                      result = self.in_single
                      self.in_single = 0
                      self.env.extend
                    
    result
end

def _reduce_324(val, _values, result)
                      result = new_sclass val
                      self.env.unextend
                      self.lexer.comments # we don't care about comments in the body
                    
    result
end

def _reduce_325(val, _values, result)
                      result = self.lexer.lineno
                    
    result
end

def _reduce_326(val, _values, result)
                      self.comments.push self.lexer.comments
                      yyerror "module definition in method body" if
                        self.in_def or self.in_single > 0

                      self.env.extend
                    
    result
end

def _reduce_327(val, _values, result)
                      result = new_module val
                      self.env.unextend
                      self.lexer.comments # we don't care about comments in the body
                    
    result
end

def _reduce_328(val, _values, result)
                      result = [self.in_def, self.lexer.cmdarg.stack.dup]

                      self.comments.push self.lexer.comments
                      self.in_def = true
                      self.env.extend
                      # TODO: local->cmdargs = cmdarg_stack;
                      # TODO: port local_push_gen and local_pop_gen
                      lexer.cmdarg.stack.replace [false]
                    
    result
end

def _reduce_329(val, _values, result)
                      in_def, cmdarg = val[2]

                      result = new_defn val

                      lexer.cmdarg.stack.replace cmdarg
                      self.env.unextend
                      self.in_def = in_def
                      self.lexer.comments # we don't care about comments in the body
                    
    result
end

def _reduce_330(val, _values, result)
                      self.comments.push self.lexer.comments
                      lexer.lex_state = :expr_fname
                    
    result
end

def _reduce_331(val, _values, result)
                      self.in_single += 1
                      self.env.extend
                      lexer.lex_state = :expr_endfn # force for args
                      result = [lexer.lineno, self.lexer.cmdarg.stack.dup]
                      lexer.cmdarg.stack.replace [false]
                    
    result
end

def _reduce_332(val, _values, result)
                      line, cmdarg = val[5]
                      result = new_defs val
                      result[3].line line

                      lexer.cmdarg.stack.replace cmdarg

                      self.env.unextend
                      self.in_single -= 1
                      self.lexer.comments # we don't care about comments in the body
                    
    result
end

def _reduce_333(val, _values, result)
                      result = s(:break)
                    
    result
end

def _reduce_334(val, _values, result)
                      result = s(:next)
                    
    result
end

def _reduce_335(val, _values, result)
                      result = s(:redo)
                    
    result
end

def _reduce_336(val, _values, result)
                      result = s(:retry)
                    
    result
end

def _reduce_337(val, _values, result)
                      result = value_expr(val[0])
                    
    result
end

# reduce 338 omitted

# reduce 339 omitted

# reduce 340 omitted

# reduce 341 omitted

# reduce 342 omitted

# reduce 343 omitted

# reduce 344 omitted

# reduce 345 omitted

# reduce 346 omitted

# reduce 347 omitted

# reduce 348 omitted

# reduce 349 omitted

# reduce 350 omitted

# reduce 351 omitted

# reduce 352 omitted

# reduce 353 omitted

# reduce 354 omitted

def _reduce_355(val, _values, result)
                      result = s(:if, val[1], val[3], val[4])
                    
    result
end

# reduce 356 omitted

def _reduce_357(val, _values, result)
                      result = val[1]
                    
    result
end

# reduce 358 omitted

def _reduce_359(val, _values, result)
                      val[0].delete_at 1 if val[0][1].nil? # HACK
                    
    result
end

# reduce 360 omitted

def _reduce_361(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_362(val, _values, result)
                      result = s(:array, val[0])
                    
    result
end

def _reduce_363(val, _values, result)
                      result = list_append val[0], val[2]
                    
    result
end

def _reduce_364(val, _values, result)
                      args, = val

                      result = block_var args
                    
    result
end

def _reduce_365(val, _values, result)
                      args, _, _, splat = val

                      result = block_var args, "*#{splat}".to_sym
                    
    result
end

def _reduce_366(val, _values, result)
                      args, _, _, splat, _, args2 = val

                      result = block_var args, "*#{splat}".to_sym, args2
                    
    result
end

def _reduce_367(val, _values, result)
                      args, _, _ = val

                      result = block_var args, :*
                    
    result
end

def _reduce_368(val, _values, result)
                      args, _, _, _, args2 = val

                      result = block_var args, :*, args2
                    
    result
end

def _reduce_369(val, _values, result)
                      _, splat = val

                      result = block_var :"*#{splat}"
                    
    result
end

def _reduce_370(val, _values, result)
                      _, splat, _, args = val

                      result = block_var :"*#{splat}", args
                    
    result
end

def _reduce_371(val, _values, result)
                      result = block_var :*
                    
    result
end

def _reduce_372(val, _values, result)
                      _, _, args = val

                      result = block_var :*, args
                    
    result
end

def _reduce_373(val, _values, result)
                      result = call_args val
                    
    result
end

def _reduce_374(val, _values, result)
                      result = call_args val
                    
    result
end

def _reduce_375(val, _values, result)
                      result = call_args val
                    
    result
end

def _reduce_376(val, _values, result)
                      result = call_args val
                    
    result
end

def _reduce_377(val, _values, result)
                      result = args val
                    
    result
end

# reduce 378 omitted

def _reduce_379(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_380(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_381(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_382(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_383(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_384(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_385(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_386(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_387(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_388(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_389(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_390(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_391(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_392(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_393(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_394(val, _values, result)
 result = 0 
    result
end

# reduce 395 omitted

def _reduce_396(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_397(val, _values, result)
                      self.lexer.command_start = true
                      result = s(:args)
                    
    result
end

def _reduce_398(val, _values, result)
                      result = args val
                    
    result
end

# reduce 399 omitted

def _reduce_400(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_401(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_402(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_403(val, _values, result)
                      result = s(:shadow, val[0].to_sym)
                    
    result
end

# reduce 404 omitted

def _reduce_405(val, _values, result)
                      self.env.extend :dynamic
                      result = self.lexer.lineno

                      result = lexer.lpar_beg
                      lexer.paren_nest += 1
                      lexer.lpar_beg = lexer.paren_nest
                    
    result
end

def _reduce_406(val, _values, result)
                      lpar, args, body = val
                      lexer.lpar_beg = lpar

                      call = new_call nil, :lambda
                      result = new_iter call, args, body
                      self.env.unextend
                    
    result
end

def _reduce_407(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_408(val, _values, result)
                      result = val[0]
                      result = 0 if result == s(:args)
                    
    result
end

def _reduce_409(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_410(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_411(val, _values, result)
                      self.env.extend :dynamic
                      result = self.lexer.lineno
                    
    result
end

def _reduce_412(val, _values, result)
                      result = nil # self.env.dynamic.keys
                    
    result
end

def _reduce_413(val, _values, result)
                      args   = val[2]
                      body   = val[4]
                      result = new_iter nil, args, body
                      result.line = val[1]

                      self.env.unextend
                    
    result
end

def _reduce_414(val, _values, result)
                      # TODO:
                      ## if (nd_type($1) == NODE_YIELD) {
                      ##     compile_error(PARSER_ARG "block given to yield");

                      syntax_error "Both block arg and actual block given." if
                        val[0].block_pass?

                      val = invert_block_call val if inverted? val

                      result = val[1]
                      result.insert 1, val[0]
                    
    result
end

def _reduce_415(val, _values, result)
                      result = new_call val[0], val[2].to_sym, val[3]
                    
    result
end

def _reduce_416(val, _values, result)
                      iter1, _, name, args, iter2 = val

                      call = new_call iter1, name.to_sym, args
                      iter2.insert 1, call

                      result = iter2
                    
    result
end

def _reduce_417(val, _values, result)
                      iter1, _, name, args, iter2 = val

                      call = new_call iter1, name.to_sym, args
                      iter2.insert 1, call

                      result = iter2
                    
    result
end

def _reduce_418(val, _values, result)
                      result = self.lexer.lineno
                    
    result
end

def _reduce_419(val, _values, result)
                      args = self.call_args val[2..-1]
                      result = val[0].concat args.sexp_body
                    
    result
end

def _reduce_420(val, _values, result)
                      result = new_call val[0], val[2].to_sym, val[3], val[1]
                    
    result
end

def _reduce_421(val, _values, result)
                      result = new_call val[0], val[2].to_sym, val[3]
                    
    result
end

def _reduce_422(val, _values, result)
                      result = new_call val[0], val[2].to_sym
                    
    result
end

def _reduce_423(val, _values, result)
                      result = new_call val[0], :call, val[2], val[1]
                    
    result
end

def _reduce_424(val, _values, result)
                      result = new_call val[0], :call, val[2]
                    
    result
end

def _reduce_425(val, _values, result)
                      result = new_super val[1]
                    
    result
end

def _reduce_426(val, _values, result)
                      result = s(:zsuper)
                    
    result
end

def _reduce_427(val, _values, result)
                      result = new_aref val
                    
    result
end

def _reduce_428(val, _values, result)
                      self.env.extend :dynamic
                      result = self.lexer.lineno
                    
    result
end

def _reduce_429(val, _values, result)
                      result = nil # self.env.dynamic.keys
                    
    result
end

def _reduce_430(val, _values, result)
                      _, line, args, _, body, _ = val

                      result = new_iter nil, args, body
                      result.line = line

                      self.env.unextend
                    
    result
end

def _reduce_431(val, _values, result)
                      self.env.extend :dynamic
                      result = self.lexer.lineno
                    
    result
end

def _reduce_432(val, _values, result)
                      result = nil # self.env.dynamic.keys
                    
    result
end

def _reduce_433(val, _values, result)
                      _, line, args, _, body, _ = val

                      result = new_iter nil, args, body
                      result.line = line

                      self.env.unextend
                    
    result
end

def _reduce_434(val, _values, result)
                      result = self.lexer.lineno
                    
    result
end

def _reduce_435(val, _values, result)
                      result = new_when(val[2], val[4])
                      result.line = val[1]
                      result << val[5] if val[5]
                    
    result
end

# reduce 436 omitted

# reduce 437 omitted

def _reduce_438(val, _values, result)
                      (_, line), klasses, var, _, body, rest = val

                      klasses ||= s(:array)
                      klasses << new_assign(var, s(:gvar, :"$!")) if var
                      klasses.line line

                      result = new_resbody(klasses, body)
                      result << rest if rest # UGH, rewritten above
                    
    result
end

def _reduce_439(val, _values, result)
                      result = nil
                    
    result
end

def _reduce_440(val, _values, result)
                      result = s(:array, val[0])
                    
    result
end

# reduce 441 omitted

# reduce 442 omitted

def _reduce_443(val, _values, result)
                      result = val[1]
                    
    result
end

# reduce 444 omitted

def _reduce_445(val, _values, result)
                      _, body = val

                      result = body || s(:nil)
                    
    result
end

# reduce 446 omitted

def _reduce_447(val, _values, result)
                      result = s(:lit, val[0])
                    
    result
end

def _reduce_448(val, _values, result)
                      result = s(:lit, val[0])
                    
    result
end

# reduce 449 omitted

def _reduce_450(val, _values, result)
                      val[0] = s(:dstr, val[0].value) if val[0].sexp_type == :evstr
                      result = val[0]
                    
    result
end

def _reduce_451(val, _values, result)
                      debug20 23, val, result
                    
    result
end

# reduce 452 omitted

def _reduce_453(val, _values, result)
                      result = self.literal_concat val[0], val[1]
                    
    result
end

def _reduce_454(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_455(val, _values, result)
                      result = new_string val
                    
    result
end

def _reduce_456(val, _values, result)
                      result = new_xstring val[1]
                    
    result
end

def _reduce_457(val, _values, result)
                      result = new_regexp val
                    
    result
end

def _reduce_458(val, _values, result)
                      result = s(:array)
                    
    result
end

def _reduce_459(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_460(val, _values, result)
                      result = new_word_list
                    
    result
end

def _reduce_461(val, _values, result)
                      result = val[0].dup << new_word_list_entry(val)
                    
    result
end

# reduce 462 omitted

def _reduce_463(val, _values, result)
                      result = self.literal_concat val[0], val[1]
                    
    result
end

def _reduce_464(val, _values, result)
                      result = s(:array)
                    
    result
end

def _reduce_465(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_466(val, _values, result)
                      result = new_symbol_list
                    
    result
end

def _reduce_467(val, _values, result)
                      result = val[0].dup << new_symbol_list_entry(val)
                    
    result
end

def _reduce_468(val, _values, result)
                      result = s(:array)
                    
    result
end

def _reduce_469(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_470(val, _values, result)
                      result = s(:array)
                    
    result
end

def _reduce_471(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_472(val, _values, result)
                      result = new_qword_list
                    
    result
end

def _reduce_473(val, _values, result)
                      result = val[0].dup << new_qword_list_entry(val)
                    
    result
end

def _reduce_474(val, _values, result)
                      result = new_qsym_list
                    
    result
end

def _reduce_475(val, _values, result)
                      result = val[0].dup << new_qsym_list_entry(val)
                    
    result
end

def _reduce_476(val, _values, result)
                      result = s(:str, "")
                    
    result
end

def _reduce_477(val, _values, result)
                      result = literal_concat(val[0], val[1])
                    
    result
end

def _reduce_478(val, _values, result)
                      result = nil
                    
    result
end

def _reduce_479(val, _values, result)
                      result = literal_concat(val[0], val[1])
                    
    result
end

def _reduce_480(val, _values, result)
                      result = nil
                    
    result
end

def _reduce_481(val, _values, result)
                      result = literal_concat(val[0], val[1])
                    
    result
end

def _reduce_482(val, _values, result)
                      result = new_string val
                    
    result
end

def _reduce_483(val, _values, result)
                      result = lexer.lex_strterm

                      lexer.lex_strterm = nil
                      lexer.lex_state = :expr_beg # TODO: expr_value ?
                    
    result
end

def _reduce_484(val, _values, result)
                      lexer.lex_strterm = val[1]
                      result = s(:evstr, val[2])
                    
    result
end

def _reduce_485(val, _values, result)
                      result = [lexer.lex_strterm,
                                lexer.brace_nest,
                                lexer.string_nest, # TODO: remove
                                lexer.cond.store,
                                lexer.cmdarg.store,
                                lexer.lex_state,
                               ]

                      lexer.lex_strterm = nil
                      lexer.brace_nest  = 0
                      lexer.string_nest = 0

                      lexer.lex_state   = :expr_value
                    
    result
end

def _reduce_486(val, _values, result)
                      # TODO: tRCURLY -> tSTRING_END
                      _, memo, stmt, _ = val

                      lex_strterm, brace_nest, string_nest, oldcond, oldcmdarg, oldlex_state = memo

                      lexer.lex_strterm = lex_strterm
                      lexer.brace_nest  = brace_nest
                      lexer.string_nest = string_nest

                      lexer.cond.restore oldcond
                      lexer.cmdarg.restore oldcmdarg

                      lexer.lex_state = oldlex_state

                      case stmt
                      when Sexp then
                        case stmt.sexp_type
                        when :str, :dstr, :evstr then
                          result = stmt
                        else
                          result = s(:evstr, stmt)
                        end
                      when nil then
                        result = s(:evstr)
                      else
                        debug20 25
                        raise "unknown string body: #{stmt.inspect}"
                      end
                    
    result
end

def _reduce_487(val, _values, result)
 result = s(:gvar, val[0].to_sym) 
    result
end

def _reduce_488(val, _values, result)
 result = s(:ivar, val[0].to_sym) 
    result
end

def _reduce_489(val, _values, result)
 result = s(:cvar, val[0].to_sym) 
    result
end

# reduce 490 omitted

def _reduce_491(val, _values, result)
                      lexer.lex_state = :expr_end
                      result = val[1].to_sym
                    
    result
end

def _reduce_492(val, _values, result)
                      result = val[0].to_sym
                    
    result
end

# reduce 493 omitted

# reduce 494 omitted

# reduce 495 omitted

# reduce 496 omitted

def _reduce_497(val, _values, result)
                      lexer.lex_state = :expr_end
                      result = val[1]

                      result ||= s(:str, "")

                      case result.sexp_type
                      when :dstr then
                        result.sexp_type = :dsym
                      when :str then
                        result = s(:lit, result.last.to_sym)
                      when :evstr then
                        result = s(:dsym, "", result)
                      else
                        debug20 26, val, result
                      end
                    
    result
end

# reduce 498 omitted

def _reduce_499(val, _values, result)
                      result = -val[1] # TODO: pt_testcase
                    
    result
end

# reduce 500 omitted

# reduce 501 omitted

# reduce 502 omitted

# reduce 503 omitted

# reduce 504 omitted

# reduce 505 omitted

# reduce 506 omitted

# reduce 507 omitted

# reduce 508 omitted

def _reduce_509(val, _values, result)
 result = s(:nil)   
    result
end

def _reduce_510(val, _values, result)
 result = s(:self)  
    result
end

def _reduce_511(val, _values, result)
 result = s(:true)  
    result
end

def _reduce_512(val, _values, result)
 result = s(:false) 
    result
end

def _reduce_513(val, _values, result)
 result = s(:str, self.file) 
    result
end

def _reduce_514(val, _values, result)
 result = s(:lit, lexer.lineno) 
    result
end

def _reduce_515(val, _values, result)
                      result =
                        if defined? Encoding then
                          s(:colon2, s(:const, :Encoding), :UTF_8)
                        else
                          s(:str, "Unsupported!")
                        end
                    
    result
end

def _reduce_516(val, _values, result)
                      var = val[0]
                      result = Sexp === var ? var : self.gettable(var)
                    
    result
end

def _reduce_517(val, _values, result)
                      var = val[0]
                      result = Sexp === var ? var : self.gettable(var)
                    
    result
end

def _reduce_518(val, _values, result)
                      result = self.assignable val[0]
                    
    result
end

def _reduce_519(val, _values, result)
                      result = self.assignable val[0]
                      debug20 29, val, result
                    
    result
end

def _reduce_520(val, _values, result)
 result = s(:nth_ref,  val[0]) 
    result
end

def _reduce_521(val, _values, result)
 result = s(:back_ref, val[0]) 
    result
end

def _reduce_522(val, _values, result)
                      result = nil
                    
    result
end

def _reduce_523(val, _values, result)
                      lexer.lex_state = :expr_beg
                    
    result
end

def _reduce_524(val, _values, result)
                      result = val[2]
                    
    result
end

def _reduce_525(val, _values, result)
                      yyerrok
                      result = nil
                      debug20 30, val, result
                    
    result
end

def _reduce_526(val, _values, result)
                      result = val[1]
                      self.lexer.lex_state = :expr_beg
                      self.lexer.command_start = true
                      # TODO:
                      # $<num>$ = parser->parser_in_kwarg;
                      # parser->parser_in_kwarg = 1;
                    
    result
end

def _reduce_527(val, _values, result)
                      # TODO: parser->parser_in_kwarg = $<num>1;
                      result = val[0]
                      self.lexer.lex_state = :expr_beg
                      self.lexer.command_start = true
                    
    result
end

def _reduce_528(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_529(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_530(val, _values, result)
                      result = args val
                    
    result
end

# reduce 531 omitted

def _reduce_532(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_533(val, _values, result)
                      result = nil
                    
    result
end

def _reduce_534(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_535(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_536(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_537(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_538(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_539(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_540(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_541(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_542(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_543(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_544(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_545(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_546(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_547(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_548(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_549(val, _values, result)
                      yyerror "formal argument cannot be a constant"
                    
    result
end

def _reduce_550(val, _values, result)
                      yyerror "formal argument cannot be an instance variable"
                    
    result
end

def _reduce_551(val, _values, result)
                      yyerror "formal argument cannot be a global variable"
                    
    result
end

def _reduce_552(val, _values, result)
                      yyerror "formal argument cannot be a class variable"
                    
    result
end

# reduce 553 omitted

def _reduce_554(val, _values, result)
                      identifier = val[0].to_sym
                      self.env[identifier] = :lvar

                      result = identifier
                    
    result
end

# reduce 555 omitted

# reduce 556 omitted

def _reduce_557(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_558(val, _values, result)
                      case val[0]
                      when Symbol then
                        result = s(:args)
                        result << val[0]
                      when Sexp then
                        result = val[0]
                      else
                        debug20 32
                        raise "Unknown f_arg type: #{val.inspect}"
                      end
                    
    result
end

def _reduce_559(val, _values, result)
                      list, _, item = val

                      if list.sexp_type == :args then
                        result = list
                      else
                        result = s(:args, list)
                      end

                      result << item
                    
    result
end

# reduce 560 omitted

def _reduce_561(val, _values, result)
                      # TODO: call_args
                      label, _ = val[0] # TODO: fix lineno?
                      identifier = label.to_sym
                      self.env[identifier] = :lvar

                      result = s(:array, s(:kwarg, identifier, val[1]))
                    
    result
end

def _reduce_562(val, _values, result)
                      label, _ = val[0] # TODO: fix lineno?
                      identifier = label.to_sym
                      self.env[identifier] = :lvar

                      result = s(:array, s(:kwarg, identifier))
                    
    result
end

def _reduce_563(val, _values, result)
                      # TODO: call_args
                      label, _ = val[0] # TODO: fix lineno?
                      identifier = label.to_sym
                      self.env[identifier] = :lvar

                      result = s(:array, s(:kwarg, identifier, val[1]))
                    
    result
end

def _reduce_564(val, _values, result)
                      label, _ = val[0] # TODO: fix lineno?
                      identifier = label.to_sym
                      self.env[identifier] = :lvar

                      result = s(:array, s(:kwarg, identifier))
                    
    result
end

# reduce 565 omitted

def _reduce_566(val, _values, result)
                      list, _, item = val
                      result = list << item.last
                    
    result
end

# reduce 567 omitted

def _reduce_568(val, _values, result)
                      result = args val
                    
    result
end

# reduce 569 omitted

# reduce 570 omitted

def _reduce_571(val, _values, result)
                      result = :"**#{val[1]}"
                    
    result
end

def _reduce_572(val, _values, result)
                      result = :"**"
                    
    result
end

def _reduce_573(val, _values, result)
                      result = self.assignable val[0], val[2]
                      # TODO: detect duplicate names
                    
    result
end

def _reduce_574(val, _values, result)
                      result = self.assignable val[0], val[2]
                    
    result
end

def _reduce_575(val, _values, result)
                      result = s(:block, val[0])
                    
    result
end

def _reduce_576(val, _values, result)
                      result = val[0]
                      result << val[2]
                    
    result
end

def _reduce_577(val, _values, result)
                      result = s(:block, val[0])
                    
    result
end

def _reduce_578(val, _values, result)
                      result = self.block_append val[0], val[2]
                    
    result
end

# reduce 579 omitted

# reduce 580 omitted

def _reduce_581(val, _values, result)
                      # TODO: differs from parse.y - needs tests
                      name = val[1].to_sym
                      self.assignable name
                      result = :"*#{name}"
                    
    result
end

def _reduce_582(val, _values, result)
                      name = :"*"
                      self.env[name] = :lvar
                      result = name
                    
    result
end

# reduce 583 omitted

# reduce 584 omitted

def _reduce_585(val, _values, result)
                      identifier = val[1].to_sym

                      self.env[identifier] = :lvar
                      result = "&#{identifier}".to_sym
                    
    result
end

def _reduce_586(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_587(val, _values, result)
                      result = nil
                    
    result
end

# reduce 588 omitted

def _reduce_589(val, _values, result)
                      lexer.lex_state = :expr_beg
                    
    result
end

def _reduce_590(val, _values, result)
                      result = val[2]
                      yyerror "Can't define single method for literals." if
                        result.sexp_type == :lit
                    
    result
end

def _reduce_591(val, _values, result)
                      result = s(:array)
                    
    result
end

def _reduce_592(val, _values, result)
                      result = val[0]
                    
    result
end

# reduce 593 omitted

def _reduce_594(val, _values, result)
                      list = val[0].dup
                      more = val[2].sexp_body
                      list.push(*more) unless more.empty?
                      result = list
                      result.sexp_type = :hash
                    
    result
end

def _reduce_595(val, _values, result)
                      result = s(:array, val[0], val[2])
                    
    result
end

def _reduce_596(val, _values, result)
                      result = s(:array, s(:lit, val[0][0].to_sym), val.last)
                    
    result
end

def _reduce_597(val, _values, result)
                      _, sym, _, value = val
                      sym.sexp_type = :dsym
                      result = s(:array, sym, value)
                    
    result
end

def _reduce_598(val, _values, result)
                      raise "not yet: #{val.inspect}"
                      # result = s(:array, s(:lit, val[1].to_sym), val[1])
                    
    result
end

def _reduce_599(val, _values, result)
                      result = s(:array, s(:kwsplat, val[1]))
                    
    result
end

# reduce 600 omitted

# reduce 601 omitted

# reduce 602 omitted

# reduce 603 omitted

# reduce 604 omitted

# reduce 605 omitted

# reduce 606 omitted

# reduce 607 omitted

# reduce 608 omitted

# reduce 609 omitted

# reduce 610 omitted

# reduce 611 omitted

# reduce 612 omitted

# reduce 613 omitted

# reduce 614 omitted

# reduce 615 omitted

# reduce 616 omitted

# reduce 617 omitted

# reduce 618 omitted

# reduce 619 omitted

# reduce 620 omitted

# reduce 621 omitted

def _reduce_622(val, _values, result)
 yyerrok 
    result
end

# reduce 623 omitted

# reduce 624 omitted

def _reduce_625(val, _values, result)
 yyerrok 
    result
end

def _reduce_626(val, _values, result)
 result = nil; 
    result
end

def _reduce_none(val, _values, result)
  val[0]
end

end   # class Ruby22Parser
