#
# DO NOT MODIFY!!!!
# This file is automatically generated by Racc 1.4.14
# from Racc grammer file "".
#

require 'racc/parser.rb'
class Ruby21Parser < RubyParser::Parser


require "ruby_lexer"
require "ruby_parser_extras"

# :stopdoc:

# Local Variables: **
# racc-token-length-max:14 **
# End: **
##### State transition tables begin ###

clist = [
'-504,579,579,621,579,579,271,-504,-504,-504,660,579,-504,-504,-504,271',
'-504,242,660,624,218,219,218,219,-504,242,-504,-504,-504,-98,-99,-106',
'750,-101,741,-103,-504,-504,742,-504,-504,-504,-504,-504,659,702,-105',
'-100,-101,239,-103,-612,659,241,240,237,238,239,-100,-518,221,241,240',
'237,238,-102,620,-504,-504,-504,-504,-504,-504,-504,-504,-504,-504,-504',
'-504,-504,-504,730,623,-504,-504,-504,222,-504,-504,730,730,-504,3,270',
'-504,-504,222,-504,112,-504,271,-504,270,-504,-504,-504,-504,-504,-504',
'-504,222,-504,222,-504,-98,116,116,-102,116,116,115,115,932,115,115',
'116,-504,-504,-504,-504,115,-504,-507,-504,-89,-90,-97,209,749,-507',
'-507,-507,-504,-600,-507,-507,-507,-101,-507,-103,701,-96,-101,-92,-103',
'-94,-507,116,-507,-507,-507,-100,115,-91,218,219,-100,-84,-507,-507',
'83,-507,-507,-507,-507,-507,-104,-92,84,-102,-70,116,-94,-600,-102,271',
'115,270,210,116,116,-519,216,454,115,115,660,525,784,-507,-507,-507',
'-507,-507,-507,-507,-507,-507,-507,-507,-507,-507,-507,94,95,-507,-507',
'-507,211,-507,-507,660,-93,-507,605,-518,-507,-507,785,-507,659,-507',
'217,-507,-97,-507,-507,-507,-507,-507,-507,-507,-601,-507,-92,-507,-99',
'-106,-106,-94,-418,605,-105,-101,222,659,-597,-598,-507,-507,-507,-507',
'-289,-507,880,-507,818,-89,585,-289,-289,-289,270,-519,-507,-289,-289',
'261,-289,-92,-98,-95,-92,-103,-94,607,606,-94,318,605,264,116,96,97',
'760,-92,115,265,-289,-289,-94,-289,-289,-289,-289,-289,94,95,319,-504',
'-507,215,607,606,603,-90,-504,-507,214,-100,222,-597,-598,-427,355,-504',
'-507,212,-99,-289,-289,-289,-289,-289,-289,-289,-289,-289,-289,-289',
'-289,-289,-289,-597,-598,-289,-289,-289,379,643,607,606,605,-289,382',
'605,-289,-504,605,762,385,-289,388,-289,-504,-289,-289,-289,-289,-289',
'-289,-289,-507,-289,404,-289,-427,605,409,-507,453,-604,-604,-427,455',
'96,97,-604,-289,-289,-337,-95,-427,-289,-604,-604,-604,-337,456,537',
'-604,-604,536,-604,-104,560,-337,557,556,555,-427,558,-604,607,606,608',
'607,606,613,607,606,618,537,-604,-604,539,-604,-604,-604,-604,-604,116',
'564,221,-604,-604,115,215,607,606,625,-604,-604,567,451,605,-600,-600',
'610,537,-604,-604,539,452,-604,-604,-604,-604,-604,-604,-604,-604,-604',
'-604,-604,-604,-604,-604,-604,-604,-604,-604,-604,487,644,-514,575,574',
'-604,406,525,-604,-514,844,408,407,-604,273,-604,637,-604,-604,-604',
'-604,-604,-604,-604,564,-604,-604,-604,638,-513,770,-515,497,607,606',
'567,-513,568,-515,-604,-604,-604,500,-93,502,-604,-604,-604,-604,-96',
'222,-604,-604,-604,-69,-604,-102,560,-92,557,556,555,-105,558,-604,-604',
'-604,-604,575,574,-94,-101,-91,222,537,-604,-604,539,-604,-604,-604',
'-604,-604,-103,-516,-100,222,511,-517,1002,560,-516,557,556,555,-517',
'558,512,-512,519,-516,276,568,222,-517,-512,-604,-604,-604,-604,-604',
'-604,-604,-604,-604,-604,-604,-604,-604,-604,218,219,-604,-604,-604',
'215,786,-604,716,273,-604,522,518,-604,-604,978,-604,719,-604,526,-604',
'516,-604,-604,-604,-604,-604,-604,-604,242,-604,-604,-604,560,-509,557',
'556,555,564,558,534,-509,218,219,540,-604,-604,-604,-604,567,-604,-289',
'-604,218,219,-510,575,574,-289,-289,-289,-102,-510,-289,-289,-289,-511',
'-289,-280,215,585,562,546,-511,398,-280,528,-289,-289,-289,572,571,575',
'574,-280,452,589,-289,-289,264,-289,-289,-289,-289,-289,560,265,557',
'556,555,590,558,560,612,557,556,555,616,558,560,619,557,556,555,622',
'558,568,629,-289,-289,-289,-289,-289,-289,-289,-289,-289,-289,-289,-289',
'-289,-289,-262,716,-289,-289,-289,215,787,-289,716,631,-289,222,588',
'-289,-289,716,-289,719,-289,635,-289,586,-289,-289,-289,-289,-289,-289',
'-289,636,-289,956,-289,557,556,555,273,558,560,647,557,556,555,242,558',
'-289,-289,-289,-289,242,-289,242,-289,8,72,73,74,12,60,116,116,-104',
'66,67,115,115,242,70,222,68,69,71,33,34,75,76,716,848,818,218,219,32',
'31,30,104,103,105,106,871,872,22,222,873,110,111,648,11,48,10,13,108',
'107,109,98,59,100,99,101,222,102,110,111,-84,94,95,678,45,46,44,242',
'246,251,252,253,248,250,258,259,254,255,222,235,236,-290,116,256,257',
'116,43,115,-290,36,115,530,61,62,242,116,63,-290,38,239,115,245,47,241',
'240,237,238,249,247,243,23,244,848,818,689,91,83,85,86,87,89,694,695',
'698,84,92,239,260,502,-239,241,240,65,704,707,81,88,90,708,710,96,97',
'294,72,73,74,12,60,712,714,215,66,67,722,723,724,70,744,68,69,71,33',
'34,75,76,726,746,585,733,763,32,31,30,104,103,105,106,764,765,22,-263',
'771,487,487,632,11,48,222,13,108,107,109,98,59,100,99,101,789,102,110',
'111,261,94,95,500,45,46,44,242,246,251,252,253,248,250,258,259,254,255',
'502,235,236,-290,689,256,257,222,43,273,-290,296,273,689,61,62,242,242',
'63,-290,38,239,818,245,47,241,240,237,238,249,247,243,23,244,222,222',
'842,91,83,85,86,87,89,222,-289,818,84,92,239,260,852,-289,241,240,65',
'222,-601,81,88,90,-289,-264,96,97,294,72,73,74,12,60,879,882,215,66',
'67,707,885,888,70,959,68,69,71,33,34,75,76,890,746,892,222,894,32,31',
'30,104,103,105,106,895,689,22,903,-262,907,909,648,11,48,910,13,108',
'107,109,98,59,100,99,101,222,102,110,111,707,94,95,913,45,46,44,242',
'246,251,252,253,248,250,258,259,254,255,-289,235,236,215,915,256,257',
'-289,43,917,959,36,-601,919,61,62,-289,919,63,746,38,239,222,245,47',
'241,240,237,238,249,247,243,23,244,925,927,-516,91,83,85,86,87,89,-516',
'-517,929,84,92,222,260,939,-517,-516,940,65,222,943,81,88,90,-517,-265',
'96,97,294,72,73,74,12,60,953,960,215,66,67,961,963,964,70,1009,68,69',
'71,33,34,75,76,980,1007,982,983,987,32,31,30,104,103,105,106,707,956',
'22,557,556,555,992,558,11,48,994,13,108,107,109,98,59,100,99,101,996',
'102,110,111,998,94,95,998,45,46,44,242,246,251,252,253,248,250,258,259',
'254,255,-280,235,236,-290,1005,256,257,-280,43,1010,-290,36,1011,919',
'61,62,-280,919,63,-290,38,239,919,245,47,241,240,237,238,249,247,243',
'23,244,1016,980,-289,91,83,85,86,87,89,-289,-601,-600,84,92,-601,260',
'694,980,-289,1039,65,1040,1041,81,88,90,1042,998,96,97,294,72,73,74',
'12,60,998,998,222,66,67,919,980,998,70,,68,69,71,33,34,75,76,119,120',
'121,122,123,32,31,30,104,103,105,106,,,22,119,120,121,122,123,11,48',
',13,108,107,109,98,59,100,99,101,,102,110,111,,94,95,,45,46,44,242,246',
'251,252,253,248,250,258,259,254,255,,235,236,,,256,257,,43,,,296,,,61',
'62,,,63,,38,239,,245,47,241,240,237,238,249,247,243,23,244,,,,91,83',
'85,86,87,89,,,,84,92,,260,,,,,65,,,81,88,90,,,96,97,294,72,73,74,12',
'60,,,,66,67,,,,70,,68,69,71,33,34,75,76,119,120,121,122,123,32,31,30',
'104,103,105,106,,,22,119,120,121,122,123,11,48,,13,108,107,109,98,59',
'100,99,101,,102,110,111,,94,95,,45,46,44,242,246,251,252,253,248,250',
'258,259,254,255,,235,236,,,256,257,,43,,,296,,,61,62,,,63,,38,239,,245',
'47,241,240,237,238,249,247,243,23,244,,,,91,83,85,86,87,89,,,,84,92',
',260,,,,,65,,,81,88,90,,,96,97,294,72,73,74,12,60,,,,66,67,,,,70,,68',
'69,71,33,34,75,76,,,,,,32,31,30,104,103,105,106,,,22,,,,,,11,48,,13',
'108,107,109,98,59,100,99,101,,102,110,111,,94,95,,45,46,44,242,246,251',
'252,253,248,250,258,259,254,255,,235,236,,,256,257,,43,,,36,,,61,62',
',,63,,38,239,,245,47,241,240,237,238,249,247,243,23,244,,,,91,83,85',
'86,87,89,,,,84,92,222,260,,,,,65,,,81,88,90,,,96,97,8,72,73,74,12,60',
',,,66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31,30,104,103,105,106,',
',22,,,,,,11,48,10,13,108,107,109,98,59,100,99,101,,102,110,111,,94,95',
',45,46,44,242,246,251,252,253,248,250,258,259,254,255,,235,236,,,256',
'257,,43,,,36,,,61,62,,,63,,38,239,,245,47,241,240,237,238,249,247,243',
'23,244,,,,91,83,85,86,87,89,,,,84,92,,260,,,,,65,,,81,88,90,,,96,97',
'294,72,73,74,12,60,,,,66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31,30',
'104,103,105,106,,,22,,,,,,11,48,,13,108,107,109,98,59,100,99,101,,102',
'110,111,,94,95,,45,46,44,242,246,251,252,253,248,250,258,259,254,255',
',235,236,,,256,257,,43,,,36,,,61,62,,,63,,38,239,,245,47,241,240,237',
'238,249,247,243,23,244,,,,91,83,85,86,87,89,,,,84,92,,260,,,,,65,,,81',
'88,90,,,96,97,294,72,73,74,12,60,,,,66,67,,,,70,,68,69,71,33,34,75,76',
',,,,,32,31,30,104,103,105,106,,,22,,,,,,11,48,,13,108,107,109,98,59',
'100,99,101,,102,110,111,,94,95,,45,46,44,242,246,251,252,253,248,250',
'258,259,254,255,,235,236,,,256,257,,43,,,36,,,61,62,,,63,,38,239,,245',
'47,241,240,237,238,249,247,243,23,244,,,,91,83,85,86,87,89,,,,84,92',
',260,,,,,65,,,81,88,90,,,96,97,294,72,73,74,12,60,,,,66,67,,,,70,,68',
'69,71,33,34,75,76,,,,,,32,31,30,104,103,105,106,,,22,,,,,,11,48,,13',
'108,107,109,98,59,100,99,101,,102,110,111,,94,95,,45,46,44,242,246,251',
'252,253,248,250,258,259,254,255,,235,236,,,256,257,,43,,,36,,,61,62',
',,63,,38,239,,245,47,241,240,237,238,249,247,243,23,244,,,,91,83,85',
'86,87,89,,,,84,92,,260,,,,,65,,,81,88,90,,,96,97,294,72,73,74,12,60',
',,,66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31,30,104,103,105,106,',
',22,,,,,,11,48,,13,108,107,109,98,59,100,99,101,,102,110,111,,94,95',
',45,46,44,242,246,251,252,253,248,250,258,259,254,255,,235,236,,,256',
'257,,43,,,36,,,61,62,,,63,,38,239,,245,47,241,240,237,238,249,247,243',
'23,244,,,,91,83,85,86,87,89,,,,84,92,,260,,,,,65,,,81,88,90,,,96,97',
'294,72,73,74,12,60,,,,66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31,30',
'104,103,105,106,,,22,,,,,,11,48,,13,108,107,109,98,59,100,99,101,,102',
'110,111,,94,95,,45,46,44,242,246,251,252,253,248,250,258,259,254,255',
',235,236,,,256,257,,43,,,36,,,61,62,,,63,,38,239,,245,47,241,240,237',
'238,249,247,243,23,244,,,,91,83,85,86,87,89,,,,84,92,,260,,,,,65,,,81',
'88,90,,,96,97,294,72,73,74,12,60,,,,66,67,,,,70,,68,69,71,33,34,75,76',
',,,,,32,31,30,104,103,105,106,,,22,,,,,,11,48,,13,108,107,109,98,59',
'100,99,101,,102,110,111,,94,95,,45,46,44,242,246,251,252,253,248,250',
'258,259,254,255,,235,236,,,256,257,,43,,,36,,,61,62,,,63,,38,239,,245',
'47,241,240,237,238,249,247,243,23,244,,,,91,83,85,86,87,89,,,,84,92',
',260,,,,,65,,,81,88,90,,,96,97,294,72,73,74,12,60,,,,66,67,,,,70,,68',
'69,71,33,34,75,76,,,,,,32,31,30,104,103,105,106,,,22,,,,,,11,48,,13',
'108,107,109,98,59,100,99,101,,102,110,111,,94,95,,45,46,44,242,246,251',
'252,253,248,250,258,259,254,255,,235,236,,,256,257,,43,,,36,,,61,62',
',,63,,38,239,,245,47,241,240,237,238,249,247,243,23,244,,,,91,83,85',
'86,87,89,,,,84,92,,260,,,,,65,,,81,88,90,,,96,97,294,72,73,74,12,60',
',,,66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31,30,104,103,105,106,',
',22,,,,,,11,48,,13,108,107,109,98,59,100,99,101,,102,110,111,,94,95',
',45,46,44,242,246,251,252,253,248,250,258,259,254,255,,235,236,,,256',
'257,,43,,,36,,,61,62,,,63,,38,239,,245,47,241,240,237,238,249,247,243',
'23,244,,,,91,83,85,86,87,89,,,,84,92,,260,,,,,65,,,81,88,90,,,96,97',
'294,72,73,74,12,60,,,,66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31,30',
'104,103,105,106,,,22,,,,,,11,48,,13,108,107,109,98,59,100,99,101,,102',
'110,111,,94,95,,45,46,44,242,246,251,252,253,248,250,258,259,254,255',
',235,236,,,256,257,,43,,,36,,,61,62,,,63,,38,239,,245,47,241,240,237',
'238,249,247,243,23,244,,,,91,83,85,86,87,89,,,,84,92,,260,,,,,65,,,81',
'88,90,,,96,97,294,72,73,74,12,60,,,,66,67,,,,70,,68,69,71,33,34,75,76',
',,,,,32,31,30,104,103,105,106,,560,22,557,556,555,,558,11,48,,13,108',
'107,109,98,59,100,99,101,,102,110,111,,94,95,,45,46,44,560,,557,556',
'555,,558,560,716,557,556,555,,558,,,,924,,43,,,36,242,,61,62,,,63,,38',
',,,47,,,716,256,257,,,23,,716,,,91,83,85,86,87,89,,239,,84,92,241,240',
'237,238,,,65,,,81,88,90,,,96,97,294,72,73,74,12,60,,,,66,67,,,,70,,68',
'69,71,33,34,75,76,,,,,,32,31,30,104,103,105,106,,,22,,,,,,11,48,,13',
'108,107,109,98,59,100,99,101,,102,110,111,,94,95,,45,46,44,242,246,251',
'252,253,248,250,258,259,254,255,,-624,-624,,,256,257,,43,,,36,,,61,62',
',,63,,38,239,,245,47,241,240,237,238,249,247,243,23,244,,,,91,83,85',
'86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,294,72,73,74,12,60,,,',
'66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31,30,104,103,105,106,,,22',
',,,,,11,48,,13,108,107,109,98,59,100,99,101,,102,110,111,,94,95,,45',
'46,44,242,246,251,252,253,248,250,258,259,254,255,,-624,-624,,,256,257',
',43,,,36,,,61,62,,,63,,38,239,,245,47,241,240,237,238,249,247,243,23',
'244,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,294,72',
'73,74,12,60,,,,66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31,30,104,103',
'105,106,,,22,,,,,,11,48,,13,108,107,109,98,59,100,99,101,,102,110,111',
',94,95,,45,46,44,242,-624,-624,-624,-624,248,250,,,-624,-624,,,,,,256',
'257,,43,,,36,,,61,62,,,63,,38,239,,245,47,241,240,237,238,249,247,243',
'23,244,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,294',
'72,73,74,12,60,,,,66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31,30,104',
'103,105,106,,,22,,,,,,11,48,,13,108,107,109,98,59,100,99,101,,102,110',
'111,,94,95,,45,46,44,242,,,,,,,,,,,,,,,,256,257,,43,,,36,,,61,62,,,63',
',38,239,,245,47,241,240,237,238,,,243,23,244,,,,91,83,85,86,87,89,,',
',84,92,,,,,,,65,,,81,88,90,,,96,97,294,72,73,74,12,60,,,,66,67,,,,70',
',68,69,71,33,34,75,76,,,,,,32,31,30,104,103,105,106,,,22,,,,,,11,48',
',13,108,107,109,98,59,100,99,101,,102,110,111,,94,95,,45,46,44,242,',
',,,,,,,,,,,,,,256,257,,43,,,36,,,61,62,,,63,,38,239,,245,47,241,240',
'237,238,,,243,23,244,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88',
'90,,,96,97,294,72,73,74,12,60,,,,66,67,,,,70,,68,69,71,33,34,75,76,',
',,,,32,31,30,104,103,105,106,,,22,,,,,,11,48,,13,108,107,109,98,59,100',
'99,101,,102,110,111,,94,95,,45,46,44,242,,,,,,,,,,,,,,,,256,257,,43',
',,36,,,61,62,,,63,,38,239,,245,47,241,240,237,238,,,243,23,244,,,,91',
'83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,294,72,73,74,12',
'60,,,,66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31,30,104,103,105,106',
',,22,,,,,,11,48,,13,108,107,109,98,59,100,99,101,,102,110,111,,94,95',
',45,46,44,242,,,,,,,,,,,,,,,,256,257,,43,,,36,,,61,62,,,63,,38,239,',
'245,47,241,240,237,238,,,243,23,244,,,,91,83,85,86,87,89,,,,84,92,,',
',,,,65,,,81,88,90,,,96,97,294,72,73,74,12,60,,,,66,67,,,,70,,68,69,71',
'33,34,75,76,,,,,,32,31,30,104,103,105,106,,,22,,,,,,11,48,,13,108,107',
'109,98,59,100,99,101,,102,110,111,,94,95,,45,46,44,242,-624,-624,-624',
'-624,248,250,,,-624,-624,,,,,,256,257,,43,,,36,,,61,62,,,63,,38,239',
',245,47,241,240,237,238,249,247,243,23,244,,,,91,83,85,86,87,89,,,,84',
'92,,,,,,,65,,,81,88,90,,,96,97,294,72,73,74,12,60,,,,66,67,,,,70,,68',
'69,71,33,34,75,76,,,,,,32,31,30,104,103,105,106,,,22,,,,,,11,48,,13',
'108,107,109,98,59,100,99,101,,102,110,111,,94,95,,45,46,44,242,-624',
'-624,-624,-624,248,250,,,-624,-624,,,,,,256,257,,43,,,36,,,61,62,,,63',
',38,239,,245,47,241,240,237,238,249,247,243,23,244,,,,91,83,85,86,87',
'89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,294,72,73,74,12,60,,,,66,67',
',,,70,,68,69,71,33,34,75,76,,,,,,32,31,30,104,103,105,106,,,22,,,,,',
'11,48,,13,108,107,109,98,59,100,99,101,,102,110,111,,94,95,,45,46,44',
'242,-624,-624,-624,-624,248,250,,,-624,-624,,,,,,256,257,,43,,,36,,',
'61,62,,,63,,38,239,,245,47,241,240,237,238,249,247,243,23,244,,,,91',
'83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,294,72,73,74,12',
'60,,,,66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31,30,104,103,105,106',
',,22,,,,,,11,48,,13,108,107,109,98,59,100,99,101,,102,110,111,,94,95',
',45,46,44,242,-624,-624,-624,-624,248,250,,,-624,-624,,,,,,256,257,',
'43,,,36,,,61,62,,,63,,38,239,,245,47,241,240,237,238,249,247,243,23',
'244,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,294,72',
'73,74,12,60,,,,66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31,30,104,103',
'105,106,,,22,,,,,,11,48,,13,108,107,109,98,59,100,99,101,,102,110,111',
',94,95,,45,46,44,242,-624,-624,-624,-624,248,250,,,-624,-624,,,,,,256',
'257,,43,,,36,,,61,62,,,63,,38,239,,245,47,241,240,237,238,249,247,243',
'23,244,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,72',
'73,74,12,60,,,,66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31,30,104,103',
'105,106,,,22,,,,,,11,48,10,13,108,107,109,98,59,100,99,101,,102,110',
'111,,94,95,,45,46,44,242,246,251,252,253,248,250,,,254,255,,,,,,256',
'257,,43,,,36,,,61,62,,,63,,38,239,,245,47,241,240,237,238,249,247,243',
'23,244,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,72',
'73,74,,60,,,,66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31,30,104,103',
'105,106,,,234,,,,,,,48,,,108,107,109,98,59,100,99,101,,102,110,111,',
'94,95,,45,46,44,242,246,251,252,253,248,250,258,,254,255,,,,,,256,257',
',227,,,233,,,61,62,,,63,,,239,,245,47,241,240,237,238,249,247,243,232',
'244,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73',
'74,,60,,,,66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31,30,104,103,105',
'106,,,234,,,,,,,48,,,108,107,109,98,59,100,99,101,287,102,110,111,,94',
'95,,45,46,44,242,,,,,,,,,,,,,,,,256,257,,227,,,233,,,61,62,,,63,,285',
'239,283,245,47,241,240,237,238,,,,232,,,,,91,83,85,86,87,89,,,,84,92',
',,,,,,65,,288,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71',
'33,34,75,76,,,,,,32,31,30,104,103,105,106,,,234,,,,,,,48,,,108,107,109',
'98,59,100,99,101,287,102,110,111,,94,95,,45,46,44,242,,,,,,,,,,,,,,',
',256,257,,227,,,233,,,61,62,,,63,,285,239,283,245,47,241,240,237,238',
',,,232,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,288,81,88,90,,,96,97',
'72,73,74,,60,,,,66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31,30,104',
'103,105,106,,,234,,,,,,,48,,,108,107,109,98,59,100,99,101,287,102,110',
'111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,227,,,233,,,61,62,,,63,,285',
',283,,47,,,,,,,,232,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,288,81',
'88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,311,312,75,76,,',
',,,307,308,314,104,103,105,106,,,234,,,,,,,309,,,108,107,109,98,59,100',
'99,101,,102,110,111,,94,95,,,,315,,,,,,,,,,,,,,,,,,,,305,,,301,,,61',
'62,,,63,,300,,,,,,,,,,,,,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81',
'88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,311,312,75,76,,',
',,,307,308,314,104,103,105,106,,,234,,,,,,,309,,,108,107,109,98,59,100',
'99,101,,102,110,111,,94,95,,,,315,,,,,,,,,,,,,,,,,,,,305,,,233,,,61',
'62,,,63,,,,,,,,,,,,,,,,,,,91,83,85,86,87,89,,,,84,92,,,,317,,,65,,,81',
'88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,311,312,75,76,,',
',,,307,308,314,104,103,105,106,,,234,,,,,,,48,,,108,107,109,98,59,100',
'99,101,,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,227,,,233,,',
'61,62,,,63,,,,,,47,,,,,,,,232,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65',
',,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,311,312,75',
'76,,,,,,307,308,314,104,103,105,106,,,234,,,,,,,48,,,108,107,109,98',
'59,100,99,101,,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,227,',
',233,,,61,62,,,63,,,,,,47,,,,,,,,232,,,,,91,83,85,86,87,89,,,,84,92',
',,,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,311',
'312,75,76,,,,,,307,308,314,104,103,105,106,,,234,,,,,,,48,,,108,107',
'109,98,59,100,99,101,,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,',
',,227,,,233,,,61,62,,,63,,,,,,47,,,,,,,,232,,,,,91,83,85,86,87,89,,',
',84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69',
'71,311,312,75,76,,,,,,307,308,314,104,103,105,106,,,234,,,,,,,48,,,108',
'107,109,98,59,100,99,101,287,102,110,111,,94,95,,45,46,44,,,,,,,,,,',
',,,,,,,,,227,,,233,,,61,62,,,63,,285,,,,47,,,,,,,,232,,,,,91,83,85,86',
'87,89,,,,84,92,,,,,,,65,,288,81,88,90,,,96,97,72,73,74,,60,,,,66,67',
',,,70,,68,69,71,33,34,75,76,,,,,,32,31,30,104,103,105,106,,,22,,,,,',
',48,,,108,107,109,98,59,100,99,101,,102,110,111,,94,95,,45,46,44,,,',
',,,,,,,,,,,,,,,,227,,,233,,,61,62,,,63,,,,,,47,,,,,,,,23,,,,,91,83,85',
'86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,,66,67',
',,,70,,68,69,71,33,34,75,76,,,,,,32,31,30,104,103,105,106,,,22,,,,,',
',48,,,108,107,109,98,59,100,99,101,,102,110,111,,94,95,,45,46,44,,,',
',,,,,,,,,,,,,,,,227,,,233,,,61,62,,,63,,,,,,47,,,,,,,,23,,,,,91,83,85',
'86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,,66,67',
',,,70,,68,69,71,33,34,75,76,,,,,,32,31,30,104,103,105,106,,,22,,,,,',
',48,,,108,107,109,98,59,100,99,101,,102,110,111,,94,95,,45,46,44,,,',
',,,,,,,,,,,,,,,,227,,,233,,,61,62,,,63,,,,,,47,,,,,,,,23,,,,,91,83,85',
'86,87,89,,,,84,92,116,,,,,115,65,,,81,88,90,,,96,97,72,73,74,,60,,,',
'66,67,,,,70,,68,69,71,311,312,75,76,,,,,,307,308,314,104,103,105,106',
',,234,,,,,,,309,,,108,107,109,98,59,100,99,101,,102,110,111,,94,95,',
',,315,,,,,,,,,,,,,,,,,,,,349,,,36,,,61,62,,,63,,38,,,,,,,,,,,,,,,,,91',
'83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,12,60,',
',,66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31,30,104,103,105,106,,',
'22,,,,,,11,48,10,13,108,107,109,98,59,100,99,101,,102,110,111,,94,95',
',45,46,44,,,,,,,,,,,,,,,,,,,,43,,,36,,,61,62,,,63,,38,,,,47,,,,,,,,23',
',,,,91,83,85,86,87,89,,,,84,92,,,,,,398,65,,,81,88,90,,,96,97,72,73',
'74,,60,,,,66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31,30,104,103,105',
'106,,,22,,,,,,,48,,,108,107,109,98,59,100,99,101,,102,110,111,,94,95',
',45,46,44,,,,,,,,,,,,,,,,,,,,227,,,233,,,61,62,,,63,,,,,,47,,,,,,,,23',
',,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74',
',60,,,,66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31,30,104,103,105,106',
',,22,,,,,,,48,,,108,107,109,98,59,100,99,101,,102,110,111,,94,95,,45',
'46,44,,,,,,,,,,,,,,,,,,,,227,,,233,,,61,62,,,63,,,,,,47,,,,,,,,23,,',
',,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,,60',
',,,66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31,30,104,103,105,106,',
',22,,,,,,,48,,,108,107,109,98,59,100,99,101,,102,110,111,,94,95,,45',
'46,44,,,,,,,,,,,,,,,,,,,,227,,,233,,,61,62,,,63,,,,,,47,,,,,,,,23,,',
',,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,,60',
',,,66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31,30,104,103,105,106,',
',22,,,,,,,48,,,108,107,109,98,59,100,99,101,,102,110,111,,94,95,,45',
'46,44,,,,,,,,,,,,,,,,,,,,227,,,233,,,61,62,,,63,,,,,,47,,,,,,,,23,,',
',,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,12',
'60,,,,66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31,30,104,103,105,106',
',,22,,,,,,11,48,,13,108,107,109,98,59,100,99,101,,102,110,111,,94,95',
',45,46,44,,,,,,,,,,,,,,,,,,,,43,,,36,,,61,62,,,63,,38,,,,47,,,,,,,,23',
',,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74',
',60,,,,66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31,30,104,103,105,106',
',,234,,,,,,,48,,,108,107,109,98,59,100,99,101,,102,110,111,,94,95,,45',
'46,44,,,,,,,,,,,,,,,,,,,,227,,,233,,,61,62,,,63,,414,,,,47,,,,,,,,232',
',,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74',
',60,,,,66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31,30,104,103,105,106',
',,234,,,,,,,48,,,108,107,109,98,59,100,99,101,,102,110,111,,94,95,,45',
'46,44,,,,,,,,,,,,,,,,,,,,227,,,233,,,61,62,,,63,,,,,,47,,,,,,,,232,',
',,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,',
'60,,,,66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31,30,104,103,105,106',
',,234,,,,,,,48,,,108,107,109,98,59,100,99,101,287,102,110,111,,94,95',
',45,46,44,,,,,,,,,,,,,,,,,,,,227,,,233,,,61,62,,,63,,285,,283,,47,,',
',,,,,232,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,288,81,88,90,,,96',
'97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31,30,104',
'103,105,106,,,234,,,,,,,48,,,108,107,109,98,59,100,99,101,,102,110,111',
',94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,227,,,233,,,61,62,,,63,,,,,,47,',
',,,,,,232,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97',
'72,73,74,,60,,,,66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31,30,104',
'103,105,106,,,234,,,,,,,48,,,108,107,109,98,59,100,99,101,,102,110,111',
',94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,227,,,233,,,61,62,,,63,,414,,,,47',
',,,,,,,232,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97',
'72,73,74,,60,,,,66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31,30,104',
'103,105,106,,,22,,,,,,,48,,,108,107,109,98,59,100,99,101,,102,110,111',
',94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,227,,,233,,,61,62,,,63,,,,,,47,',
',,,,,,23,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97',
'72,73,74,,60,,,,66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31,30,104',
'103,105,106,,,22,,,,,,,48,,,108,107,109,98,59,100,99,101,,102,110,111',
',94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,227,,,233,,,61,62,,,63,,,,,,47,',
',,,,,,23,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97',
'72,73,74,,60,,,,66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31,30,104',
'103,105,106,,,22,,,,,,,48,,,108,107,109,98,59,100,99,101,,102,110,111',
',94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,227,,,233,,,61,62,,,63,,,,,,47,',
',,,,,,23,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97',
'72,73,74,,60,,,,66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31,30,104',
'103,105,106,,,22,,,,,,,48,,,108,107,109,98,59,100,99,101,,102,110,111',
',94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,227,,,233,,,61,62,,,63,,,,,,47,',
',,,,,,23,,,,,91,83,85,86,87,89,,,,84,92,222,,,,,,65,,,81,88,90,,,96',
'97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,311,312,75,76,,,,,,307,308',
'314,104,103,105,106,,,234,,,,,,,48,,,108,107,109,98,59,100,99,101,,102',
'110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,227,,,233,,,61,62,,,63,',
',,,,47,,,,,,,,232,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90',
',,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,311,312,75,76,,,,,,307',
'308,314,104,103,105,106,,,234,,,,,,,48,,,108,107,109,98,59,100,99,101',
',102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,227,,,233,,,61,62,',
',63,,,,,,47,,,,,,,,232,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81',
'88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,311,312,75,76,,',
',,,307,308,314,104,103,105,106,,,234,,,,,,,48,,,108,107,109,98,59,100',
'99,101,,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,227,,,233,,',
'61,62,,,63,,,,,,47,,,,,,,,232,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65',
',,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,311,312,75',
'76,,,,,,307,308,314,104,103,105,106,,,234,,,,,,,48,,,108,107,109,98',
'59,100,99,101,,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,227,',
',233,,,61,62,,,63,,,,,,47,,,,,,,,232,,,,,91,83,85,86,87,89,,,,84,92',
',,,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,311',
'312,75,76,,,,,,307,308,314,104,103,105,106,,,234,,,,,,,48,,,108,107',
'109,98,59,100,99,101,,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,',
',,227,,,233,,,61,62,,,63,,,,,,47,,,,,,,,232,,,,,91,83,85,86,87,89,,',
',84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69',
'71,311,312,75,76,,,,,,307,308,314,104,103,105,106,,,234,,,,,,,48,,,108',
'107,109,98,59,100,99,101,,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,',
',,,,,,227,,,233,,,61,62,,,63,,,,,,47,,,,,,,,232,,,,,91,83,85,86,87,89',
',,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68',
'69,71,311,312,75,76,,,,,,307,308,314,104,103,105,106,,,234,,,,,,,48',
',,108,107,109,98,59,100,99,101,,102,110,111,,94,95,,45,46,44,,,,,,,',
',,,,,,,,,,,,227,,,233,,,61,62,,,63,,,,,,47,,,,,,,,232,,,,,91,83,85,86',
'87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,',
'70,,68,69,71,311,312,75,76,,,,,,307,308,314,104,103,105,106,,,234,,',
',,,,48,,,108,107,109,98,59,100,99,101,,102,110,111,,94,95,,45,46,44',
',,,,,,,,,,,,,,,,,,,227,,,233,,,61,62,,,63,,,,,,47,,,,,,,,232,,,,,91',
'83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,',
'66,67,,,,70,,68,69,71,311,312,75,76,,,,,,307,308,314,104,103,105,106',
',,234,,,,,,,48,,,108,107,109,98,59,100,99,101,,102,110,111,,94,95,,45',
'46,44,,,,,,,,,,,,,,,,,,,,227,,,233,,,61,62,,,63,,,,,,47,,,,,,,,232,',
',,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,',
'60,,,,66,67,,,,70,,68,69,71,311,312,75,76,,,,,,307,308,314,104,103,105',
'106,,,234,,,,,,,48,,,108,107,109,98,59,100,99,101,,102,110,111,,94,95',
',45,46,44,,,,,,,,,,,,,,,,,,,,227,,,233,,,61,62,,,63,,,,,,47,,,,,,,,232',
',,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74',
',60,,,,66,67,,,,70,,68,69,71,311,312,75,76,,,,,,307,308,314,104,103',
'105,106,,,234,,,,,,,48,,,108,107,109,98,59,100,99,101,,102,110,111,',
'94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,227,,,233,,,61,62,,,63,,,,,,47,,',
',,,,,232,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97',
'72,73,74,,60,,,,66,67,,,,70,,68,69,71,311,312,75,76,,,,,,307,308,314',
'104,103,105,106,,,234,,,,,,,48,,,108,107,109,98,59,100,99,101,,102,110',
'111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,227,,,233,,,61,62,,,63,,,,,',
'47,,,,,,,,232,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96',
'97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,311,312,75,76,,,,,,307,308',
'314,104,103,105,106,,,234,,,,,,,48,,,108,107,109,98,59,100,99,101,,102',
'110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,227,,,233,,,61,62,,,63,',
',,,,47,,,,,,,,232,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90',
',,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,311,312,75,76,,,,,,307',
'308,314,104,103,105,106,,,234,,,,,,,48,,,108,107,109,98,59,100,99,101',
',102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,227,,,233,,,61,62,',
',63,,,,,,47,,,,,,,,232,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81',
'88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,311,312,75,76,,',
',,,307,308,314,104,103,105,106,,,234,,,,,,,48,,,108,107,109,98,59,100',
'99,101,,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,227,,,233,,',
'61,62,,,63,,,,,,47,,,,,,,,232,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65',
',,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,311,312,75',
'76,,,,,,307,308,314,104,103,105,106,,,234,,,,,,,48,,,108,107,109,98',
'59,100,99,101,,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,227,',
',233,,,61,62,,,63,,,,,,47,,,,,,,,232,,,,,91,83,85,86,87,89,,,,84,92',
',,,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,311',
'312,75,76,,,,,,307,308,314,104,103,105,106,,,234,,,,,,,48,,,108,107',
'109,98,59,100,99,101,,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,',
',,227,,,233,,,61,62,,,63,,,,,,47,,,,,,,,232,,,,,91,83,85,86,87,89,,',
',84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69',
'71,311,312,75,76,,,,,,307,308,314,104,103,105,106,,,234,,,,,,,48,,,108',
'107,109,98,59,100,99,101,,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,',
',,,,,,227,,,233,,,61,62,,,63,,,,,,47,,,,,,,,232,,,,,91,83,85,86,87,89',
',,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68',
'69,71,311,312,75,76,,,,,,307,308,314,104,103,105,106,,,234,,,,,,,48',
',,108,107,109,98,59,100,99,101,,102,110,111,,94,95,,45,46,44,,,,,,,',
',,,,,,,,,,,,227,,,233,,,61,62,,,63,,,,,,47,,,,,,,,232,,,,,91,83,85,86',
'87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,',
'70,,68,69,71,311,312,75,76,,,,,,307,308,314,104,103,105,106,,,234,,',
',,,,48,,,108,107,109,98,59,100,99,101,,102,110,111,,94,95,,45,46,44',
',,,,,,,,,,,,,,,,,,,227,,,233,,,61,62,,,63,,,,,,47,,,,,,,,232,,,,,91',
'83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,',
'66,67,,,,70,,68,69,71,311,312,75,76,,,,,,307,308,314,104,103,105,106',
',,234,,,,,,,48,,,108,107,109,98,59,100,99,101,,102,110,111,,94,95,,45',
'46,44,,,,,,,,,,,,,,,,,,,,227,,,233,,,61,62,,,63,,,,,,47,,,,,,,,232,',
',,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,',
'60,,,,66,67,,,,70,,68,69,71,311,312,75,76,,,,,,307,308,314,104,103,105',
'106,,,234,,,,,,,48,,,108,107,109,98,59,100,99,101,,102,110,111,,94,95',
',45,46,44,,,,,,,,,,,,,,,,,,,,227,,,233,,,61,62,,,63,,,,,,47,,,,,,,,232',
',,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74',
',60,,,,66,67,,,,70,,68,69,71,311,312,75,76,,,,,,307,308,314,104,103',
'105,106,,,234,,,,,,,48,,,108,107,109,98,59,100,99,101,,102,110,111,',
'94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,227,,,233,,,61,62,,,63,,,,,,47,,',
',,,,,232,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97',
'72,73,74,,60,,,,66,67,,,,70,,68,69,71,311,312,75,76,,,,,,307,308,314',
'104,103,105,106,,,234,,,,,,,48,,,108,107,109,98,59,100,99,101,,102,110',
'111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,227,,,233,,,61,62,,,63,,,,,',
'47,,,,,,,,232,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96',
'97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,311,312,75,76,,,,,,307,308',
'314,104,103,105,106,,,234,,,,,,,48,,,108,107,109,98,59,100,99,101,,102',
'110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,227,,,233,,,61,62,,,63,',
',,,,47,,,,,,,,232,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90',
',,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,311,312,75,76,,,,,,307',
'308,314,104,103,105,106,,,234,,,,,,,48,,,108,107,109,98,59,100,99,101',
',102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,227,,,233,,,61,62,',
',63,,,,,,47,,,,,,,,232,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81',
'88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,311,312,75,76,,',
',,,307,308,314,104,103,105,106,,,234,,,,,,,48,,,108,107,109,98,59,100',
'99,101,,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,227,,,233,,',
'61,62,,,63,,,,,,47,,,,,,,,232,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65',
',,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,33,34,75,76',
',,,,,32,31,30,104,103,105,106,,,234,,,,,,,48,,,108,107,109,98,59,100',
'99,101,287,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,227,,,233',
',,61,62,,,63,,285,,283,,47,,,,,,,,232,,,,,91,83,85,86,87,89,,,,84,92',
',,,,,,65,,288,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71',
'33,34,75,76,,,,,,32,31,30,104,103,105,106,,,234,,,,,,,48,,,108,107,109',
'98,59,100,99,101,287,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,',
',227,,,233,,,61,62,,,63,,285,,283,,47,,,,,,,,232,,,,,91,83,85,86,87',
'89,,,,84,92,,,,,,,65,,288,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,',
'70,,68,69,71,33,34,75,76,,,,,,32,31,30,104,103,105,106,,,234,,,,,,,48',
',,108,107,109,98,59,100,99,101,287,102,110,111,,94,95,,45,46,44,,,,',
',,,,,,,,,,,,,,,227,,,233,,,61,62,,,63,,285,,283,,47,,,,,,,,232,,,,,91',
'83,85,86,87,89,,,,84,92,222,,,,,,65,,288,81,88,90,,,96,97,72,73,74,',
'60,,,,66,67,,,,70,,68,69,71,311,312,75,76,,,,,,307,308,314,104,103,105',
'106,,,234,,,,,,,48,,,108,107,109,98,59,100,99,101,,102,110,111,,94,95',
',45,46,44,,,,,,,,,,,,,,,,,,,,227,,,233,,,61,62,,,63,,,,,,47,,,,,,,,232',
',,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74',
',60,,,,66,67,,,,70,,68,69,71,311,312,75,76,,,,,,307,308,314,104,103',
'105,106,,,234,,,,,,,48,,,108,107,109,98,59,100,99,101,,102,110,111,',
'94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,227,,,233,,,61,62,,,63,,,,,,47,,',
',,,,,232,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97',
'72,73,74,,60,,,,66,67,,,,70,,68,69,71,311,312,75,76,,,,,,307,308,314',
'104,103,105,106,,,234,,,,,,,48,,,108,107,109,98,59,100,99,101,,102,110',
'111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,227,,,233,,,61,62,,,63,,,,,',
'47,,,,,,,,232,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96',
'97,72,73,74,12,60,,,,66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31,30',
'104,103,105,106,,,22,,,,,,11,48,,13,108,107,109,98,59,100,99,101,,102',
'110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,43,,,36,,,61,62,,,63,,38',
',,,47,,,,,,,,23,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,',
',96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,311,312,75,76,,,,,,307',
'308,314,104,103,105,106,,,234,,,,,,,309,,,108,107,109,98,59,100,99,101',
',102,110,111,,94,95,,,,315,,,,,,,,,,,,,,,,,,,,305,,,233,,,61,62,,,63',
',,,,,,,,,,,,,,,,,,91,83,85,86,87,89,,,,84,92,,,,514,,,65,,,81,88,90',
',,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,311,312,75,76,,,,,,307',
'308,314,104,103,105,106,,,234,,,,,,,309,,,108,107,109,98,59,100,99,101',
',102,110,111,,94,95,,,,315,,,,,,,,,,,,,,,,,,,,305,,,301,,,61,62,,,63',
',,,,,,,,,,,,,,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96',
'97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,311,312,75,76,,,,,,307,308',
'314,104,103,105,106,,,234,,,,,,,48,,,108,107,109,98,59,100,99,101,,102',
'110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,227,,,233,530,,61,62,,,63',
',,,,,47,,,,,,,,232,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90',
',,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31',
'30,104,103,105,106,,,22,,,,,,,48,,,108,107,109,98,59,100,99,101,,102',
'110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,227,,,233,,,61,62,,,63,',
',,,,47,,,,,,,,23,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90',
',,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,311,312,75,76,,,,,,307',
'308,314,104,103,105,106,,,234,,,,,,,48,,,108,107,109,98,59,100,99,101',
'287,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,227,,,233,,,61,62',
',,63,,,,,,47,,,,,,,,232,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,288',
'81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,33,34,75,76,',
',,,,32,31,30,104,103,105,106,,,22,,,,,,,48,,,108,107,109,98,59,100,99',
'101,,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,227,,,233,,,61',
'62,,,63,,,,,,47,,,,,,,,23,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,',
'81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,33,34,75,76,',
',,,,32,31,30,104,103,105,106,,,22,,,,,,,48,,,108,107,109,98,59,100,99',
'101,,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,227,,,233,,,61',
'62,,,63,,,,,,47,,,,,,,,23,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,',
'81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,311,312,75,76',
',,,,,307,308,314,104,103,105,106,,,234,,,,,,,309,,,108,107,109,591,59',
'100,99,592,,102,110,111,,94,95,,,,315,,,,,,,,,,,,,,,,,,,,593,,,233,',
',61,62,,,63,,,,,,,,,,,,,,,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,',
'81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,311,312,75,76',
',,,,,307,308,314,104,103,105,106,,,234,,,,,,,309,,,108,107,109,591,59',
'100,99,592,,102,110,111,,94,95,,,,315,,,,,,,,,,,,,,,,,,,,593,,,233,',
',61,62,,,63,,,,,,,,,,,,,,,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,',
'81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,311,312,75,76',
',,,,,307,308,314,104,103,105,106,,,234,,,,,,,48,,,108,107,109,98,59',
'100,99,101,,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,227,,,233',
',,61,62,,,63,,,,,,47,,,,,,,,232,,,,,91,83,85,86,87,89,,,,84,92,,,,,',
',65,,,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,33,34,75',
'76,,,,,,32,31,30,104,103,105,106,,,234,,,,,,,48,,,108,107,109,98,59',
'100,99,101,287,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,227,',
',233,,,61,62,,,63,,285,,283,,47,,,,,,,,232,,,,,91,83,85,86,87,89,,,',
'84,92,,,,,,,65,,288,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68',
'69,71,311,312,75,76,,,,,,307,308,314,104,103,105,106,,,234,,,,,,,48',
',,108,107,109,98,59,100,99,101,,102,110,111,,94,95,,45,46,44,,,,,,,',
',,,,,,,,,,,,227,,,233,,,61,62,,,63,,,,,,47,,,,,,,,232,,,,,91,83,85,86',
'87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,',
'70,,68,69,71,311,312,75,76,,,,,,307,308,314,104,103,105,106,,,234,,',
',,,,48,,,108,107,109,98,59,100,99,101,,102,110,111,,94,95,,45,46,44',
',,,,,,,,,,,,,,,,,,,227,,,233,,,61,62,,,63,,,,,,47,,,,,,,,232,,,,,91',
'83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,',
'66,67,,,,70,,68,69,71,311,312,75,76,,,,,,307,308,314,104,103,105,106',
',,234,,,,,,,48,,,108,107,109,98,59,100,99,101,,102,110,111,,94,95,,45',
'46,44,,,,,,,,,,,,,,,,,,,,227,,,233,,,61,62,,,63,,,,,,47,,,,,,,,232,',
',,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,',
'60,,,,66,67,,,,70,,68,69,71,311,312,75,76,,,,,,307,308,314,104,103,105',
'106,,,234,,,,,,,48,,,108,107,109,98,59,100,99,101,287,102,110,111,,94',
'95,,45,46,44,,,,,,,,,,,,,,,,,,,,227,,,233,,,61,62,,,63,,672,,283,,47',
',,,,,,,232,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,288,81,88,90,,,96',
'97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,311,312,75,76,,,,,,307,308',
'314,104,103,105,106,,,234,,,,,,,48,,,108,107,109,98,59,100,99,101,287',
'102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,227,,,233,,,61,62,,',
'63,,,,283,,47,,,,,,,,232,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,288',
'81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,311,312,75,76',
',,,,,307,308,314,104,103,105,106,,,234,,,,,,,48,,,108,107,109,98,59',
'100,99,101,,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,227,,,233',
',,61,62,,,63,,,,,,47,,,,,,,,232,,,,,91,83,85,86,87,89,,,,84,92,,,,,',
',65,,,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,311,312',
'75,76,,,,,,307,308,314,104,103,105,106,,,234,,,,,,,48,,,108,107,109',
'98,59,100,99,101,,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,227',
',,233,,,61,62,,,63,,,,,,47,,,,,,,,232,,,,,91,83,85,86,87,89,,,,84,92',
',,,,,,65,,,81,88,90,,,96,97,72,73,74,12,60,,,,66,67,,,,70,,68,69,71',
'33,34,75,76,,,,,,32,31,30,104,103,105,106,,,22,,,,,,11,48,,13,108,107',
'109,98,59,100,99,101,,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,',
',,43,,,36,,,61,62,,,63,,38,,,,47,,,,,,,,23,,,,,91,83,85,86,87,89,,,',
'84,92,,,,,,398,65,,,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68',
'69,71,311,312,75,76,,,,,,307,308,314,104,103,105,106,,,234,,,,,,,309',
',,108,107,109,98,59,100,99,101,,102,110,111,,94,95,,,,315,,,,,,,,,,',
',,,,,,,,,305,,,301,,,61,62,,,63,,,,,,,,,,,,,,,,,,,91,83,85,86,87,89',
',,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68',
'69,71,33,34,75,76,,,,,,32,31,30,104,103,105,106,,,234,,,,,,,48,,,108',
'107,109,98,59,100,99,101,287,102,110,111,,94,95,,45,46,44,,,,,,,,,,',
',,,,,,,,,227,,,233,,,61,62,,,63,,285,,283,,47,,,,,,,,232,,,,,91,83,85',
'86,87,89,,,,84,92,,,,,,,65,,288,81,88,90,,,96,97,72,73,74,,60,,,,66',
'67,,,,70,,68,69,71,311,312,75,76,,,,,,307,308,314,104,103,105,106,,',
'234,,,,,,,309,,,108,107,109,98,59,100,99,101,,102,110,111,,94,95,,,',
'315,,,,,,,,,,,,,,,,,,,,305,,,301,,,61,62,,,63,,,,,,,,,,,,,,,,,,,91,83',
'85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,,66',
'67,,,,70,,68,69,71,311,312,75,76,,,,,,307,308,314,104,103,105,106,,',
'234,,,,,,,48,,,108,107,109,98,59,100,99,101,,102,110,111,,94,95,,45',
'46,44,,,,,,,,,,,,,,,,,,,,227,,,233,,,61,62,,,63,,,,,,47,,,,,,,,232,',
',,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,',
'60,,,,66,67,,,,70,,68,69,71,311,312,75,76,,,,,,307,308,314,104,103,105',
'106,,,234,,,,,,,48,,,108,107,109,98,59,100,99,101,,102,110,111,,94,95',
',45,46,44,,,,,,,,,,,,,,,,,,,,227,,,233,,,61,62,,,63,,,,,,47,,,,,,,,232',
',,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74',
',60,,,,66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31,30,104,103,105,106',
',,22,,,,,,,48,,,108,107,109,98,59,100,99,101,,102,110,111,,94,95,,45',
'46,44,,,,,,,,,,,,,,,,,,,,227,,,233,,,61,62,,,63,,,,,,47,,,,,,,,23,,',
',,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,,60',
',,,66,67,,,,70,,68,69,71,311,312,75,76,,,,,,307,308,314,104,103,105',
'106,,,234,,,,,,,48,,,108,107,109,98,59,100,99,101,287,102,110,111,,94',
'95,,45,46,44,,,,,,,,,,,,,,,,,,,,227,,,233,,,61,62,,,63,,672,,,,47,,',
',,,,,232,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,288,81,88,90,,,96',
'97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,311,312,75,76,,,,,,307,308',
'314,104,103,105,106,,,234,,,,,,,48,,,108,107,109,98,59,100,99,101,287',
'102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,227,,,233,,,61,62,,',
'63,,,,,,47,,,,,,,,232,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,288,81',
'88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,311,312,75,76,,',
',,,307,308,314,104,103,105,106,,,234,,,,,,,48,,,108,107,109,98,59,100',
'99,101,,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,227,,,233,,',
'61,62,,,63,,,,,,47,,,,,,,,232,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65',
',,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,33,34,75,76',
',,,,,32,31,30,104,103,105,106,,,234,,,,,,,48,,,108,107,109,98,59,100',
'99,101,287,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,227,,,233',
',,61,62,,,63,,285,,283,,47,,,,,,,,232,,,,,91,83,85,86,87,89,,,,84,92',
',,,,,,65,,288,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71',
'33,34,75,76,,,,,,32,31,30,104,103,105,106,,,22,,,,,,,48,,,108,107,109',
'98,59,100,99,101,,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,227',
',,233,,,61,62,,,63,,,,,,47,,,,,,,,23,,,,,91,83,85,86,87,89,,,,84,92',
',,,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,33',
'34,75,76,,,,,,32,31,30,104,103,105,106,,,22,,,,,,,48,,,108,107,109,98',
'59,100,99,101,,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,227,',
',233,,,61,62,,,63,,,,,,47,,,,,,,,23,,,,,91,83,85,86,87,89,,,,84,92,',
',,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,311',
'312,75,76,,,,,,307,308,314,104,103,105,106,,,234,,,,,,,48,,,108,107',
'109,98,59,100,99,101,,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,',
',,227,,,233,,,61,62,,,63,,768,,,,47,,,,,,,,232,,,,,91,83,85,86,87,89',
',,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68',
'69,71,311,312,75,76,,,,,,307,308,314,104,103,105,106,,,234,,,,,,,48',
',,108,107,109,98,59,100,99,101,,102,110,111,,94,95,,45,46,44,,,,,,,',
',,,,,,,,,,,,227,,,233,,,61,62,,,63,,,,,,47,,,,,,,,232,,,,,91,83,85,86',
'87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,',
'70,,68,69,71,311,312,75,76,,,,,,307,308,314,104,103,105,106,,,234,,',
',,,,48,,,108,107,109,98,59,100,99,101,287,102,110,111,,94,95,,45,46',
'44,,,,,,,,,,,,,,,,,,,,227,,,233,,,61,62,,,63,,672,,283,,47,,,,,,,,232',
',,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,288,81,88,90,,,96,97,72,73',
'74,,60,,,,66,67,,,,70,,68,69,71,311,312,75,76,,,,,,307,308,314,104,103',
'105,106,,,234,,,,,,,48,,,108,107,109,98,59,100,99,101,287,102,110,111',
',94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,227,,,233,,,61,62,,,63,,,,283,,47',
',,,,,,,232,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,288,81,88,90,,,96',
'97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31,30,104',
'103,105,106,,,234,,,,,,,48,,,108,107,109,98,59,100,99,101,,102,110,111',
',94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,227,,,233,,,61,62,,,63,,,,,,47,',
',,,,,,232,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97',
'72,73,74,,60,,,,66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31,30,104',
'103,105,106,,,234,,,,,,,48,,,108,107,109,98,59,100,99,101,,102,110,111',
',94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,227,,,233,,,61,62,,,63,,,,,,47,',
',,,,,,232,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97',
'72,73,74,,60,,,,66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31,30,104',
'103,105,106,,,234,,,,,,,48,,,108,107,109,98,59,100,99,101,,102,110,111',
',94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,227,,,233,,,61,62,,,63,,,,,,47,',
',,,,,,232,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97',
'72,73,74,,60,,,,66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31,30,104',
'103,105,106,,,234,,,,,,,48,,,108,107,109,98,59,100,99,101,,102,110,111',
',94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,227,,,233,,,61,62,,,63,,,,,,47,',
',,,,,,232,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97',
'72,73,74,,60,,,,66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31,30,104',
'103,105,106,,,234,,,,,,,48,,,108,107,109,98,59,100,99,101,,102,110,111',
',94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,227,,,233,,,61,62,,,63,,,,,,47,',
',,,,,,232,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97',
'72,73,74,,60,,,,66,67,,,,70,,68,69,71,311,312,75,76,,,,,,307,308,314',
'104,103,105,106,,,234,,,,,,,48,,,108,107,109,98,59,100,99,101,,102,110',
'111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,227,,,233,,,61,62,,,63,,,,,',
'47,,,,,,,,232,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96',
'97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,311,312,75,76,,,,,,307,308',
'314,104,103,105,106,,,234,,,,,,,48,,,108,107,109,98,59,100,99,101,,102',
'110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,227,,,233,,,61,62,,,63,',
',,,,47,,,,,,,,232,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90',
',,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,311,312,75,76,,,,,,307',
'308,314,104,103,105,106,,,234,,,,,,,309,,,108,107,109,98,59,100,99,101',
',102,110,111,,94,95,,,,315,,,,,,,,,,,,,,,,,,,,305,,,301,,,61,62,,,63',
',,,,,,,,,,,,,,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96',
'97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,311,312,75,76,,,,,,307,308',
'314,104,103,105,106,,,234,,,,,,,309,,,108,107,109,98,59,100,99,101,',
'102,110,111,,94,95,,,,315,,,,,,,,,,,,,,,,,,,,305,,,301,,,61,62,,,63',
',,,,,,,,,,,,,,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96',
'97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,311,312,75,76,,,,,,307,308',
'314,104,103,105,106,,,234,,,,,,,48,,,108,107,109,98,59,100,99,101,,102',
'110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,227,,,233,,,61,62,,,63,',
'414,,,,47,,,,,,,,232,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88',
'90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,311,312,75,76,,,,,',
'307,308,314,104,103,105,106,,,234,,,,,,,48,,,108,107,109,98,59,100,99',
'101,,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,227,,,233,,,61',
'62,,,63,,,,,,47,,,,,,,,232,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,',
',81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,311,312,75,76',
',,,,,307,308,314,104,103,105,106,,,234,,,,,,,48,,,108,107,109,98,59',
'100,99,101,,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,227,,,233',
',,61,62,,,63,,285,,,,47,,,,,,,,232,,,,,91,83,85,86,87,89,,,,84,92,,',
',,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,33,34',
'75,76,,,,,,32,31,30,104,103,105,106,,,22,,,,,,,48,,,108,107,109,98,59',
'100,99,101,,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,227,,,233',
',,61,62,,,63,,,,,,47,,,,,,,,23,,,,,91,83,85,86,87,89,,,,84,92,,,,,,',
'65,,,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,33,34,75',
'76,,,,,,32,31,30,104,103,105,106,,,234,,,,,,,48,,,108,107,109,98,59',
'100,99,101,287,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,227,',
',233,,,61,62,,,63,,285,,283,,47,,,,,,,,232,,,,,91,83,85,86,87,89,,,',
'84,92,,,,,,,65,,288,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68',
'69,71,311,312,75,76,,,,,,307,308,314,104,103,105,106,,,234,,,,,,,48',
',,108,107,109,98,59,100,99,101,,102,110,111,,94,95,,45,46,44,,,,,,,',
',,,,,,,,,,,,227,,,233,,,61,62,,,63,,,,,,47,,,,,,,,232,,,,,91,83,85,86',
'87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,',
'70,,68,69,71,33,34,75,76,,,,,,32,31,30,104,103,105,106,,,234,,,,,,,48',
',,108,107,109,98,59,100,99,101,,102,110,111,,94,95,,45,46,44,,,,,,,',
',,,,,,,,,,,,227,,,233,,,61,62,,,63,,,,,,47,,,,,,,,232,,,,,91,83,85,86',
'87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,',
'70,,68,69,71,311,312,75,76,,,,,,307,308,314,104,103,105,106,,,234,,',
',,,,48,,,108,107,109,98,59,100,99,101,,102,110,111,,94,95,,45,46,44',
',,,,,,,,,,,,,,,,,,,227,,,233,,,61,62,,,63,,,,,,47,,,,,,,,232,,,,,91',
'83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,',
'66,67,,,,70,,68,69,71,311,312,75,76,,,,,,307,308,314,104,103,105,106',
',,234,,,,,,,48,,,108,107,109,98,59,100,99,101,,102,110,111,,94,95,,45',
'46,44,,,,,,,,,,,,,,,,,,,,227,,,233,,,61,62,,,63,,,,,,47,,,,,,,,232,',
',,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,',
'60,,,,66,67,,,,70,,68,69,71,311,312,75,76,,,,,,307,308,314,104,103,105',
'106,,,234,,,,,,,48,,,108,107,109,98,59,100,99,101,,102,110,111,,94,95',
',45,46,44,,,,,,,,,,,,,,,,,,,,227,,,233,,,61,62,,,63,,,,,,47,,,,,,,,232',
',,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74',
',60,,,,66,67,,,,70,,68,69,71,311,312,75,76,,,,,,307,308,314,104,103',
'105,106,,,234,,,,,,,48,,,108,107,109,98,59,100,99,101,,102,110,111,',
'94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,227,,,233,,,61,62,,,63,,,,,,47,,',
',,,,,232,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97',
'72,73,74,,60,,,,66,67,,,,70,,68,69,71,311,312,75,76,,,,,,307,308,314',
'104,103,105,106,,,234,,,,,,,48,,,108,107,109,98,59,100,99,101,,102,110',
'111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,227,,,233,,,61,62,,,63,,,,,',
'47,,,,,,,,232,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96',
'97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,311,312,75,76,,,,,,307,308',
'314,104,103,105,106,,,234,,,,,,,309,,,108,107,109,98,59,100,99,101,',
'102,110,111,,94,95,,,,315,,,,,,,,,,,,,,,,,,,,897,,,233,,,61,62,,,63',
',,,,,,,,,,,,,,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96',
'97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31,30,104',
'103,105,106,,,22,,,,,,,48,,,108,107,109,98,59,100,99,101,,102,110,111',
',94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,227,,,233,,,61,62,,,63,,,,,,47,',
',,,,,,23,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97',
'72,73,74,,60,,,,66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31,30,104',
'103,105,106,,,22,,,,,,,48,,,108,107,109,98,59,100,99,101,,102,110,111',
',94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,227,,,233,,,61,62,,,63,,,,,,47,',
',,,,,,23,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97',
'72,73,74,,60,,,,66,67,,,,70,,68,69,71,311,312,75,76,,,,,,307,308,314',
'104,103,105,106,,,234,,,,,,,48,,,108,107,109,98,59,100,99,101,287,102',
'110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,227,,,233,,,61,62,,,63,',
',,283,,47,,,,,,,,232,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,288,81',
'88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,311,312,75,76,,',
',,,307,308,314,104,103,105,106,,,234,,,,,,,48,,,108,107,109,98,59,100',
'99,101,,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,227,,,233,,',
'61,62,,,63,,,,,,47,,,,,,,,232,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65',
',,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,311,312,75',
'76,,,,,,307,308,314,104,103,105,106,,,234,,,,,,,309,,,108,107,109,98',
'59,100,99,101,,102,110,111,,94,95,,,,315,,,,,,,,,,,,,,,,,,,,897,,,233',
',,61,62,,,63,,,,,,,,,,,,,,,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,',
',81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,311,312,75,76',
',,,,,307,308,314,104,103,105,106,,,234,,,,,,,309,,,108,107,109,98,59',
'100,99,101,,102,110,111,,94,95,,,,315,,,,,,,,,,,,,,,,,,,,970,,,233,',
',61,62,,,63,,,,,,,,,,,,,,,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,',
'81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,311,312,75,76',
',,,,,307,308,314,104,103,105,106,,,234,,,,,,,48,,,108,107,109,98,59',
'100,99,101,,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,227,,,233',
',,61,62,,,63,,672,,,,47,,,,,,,,232,,,,,91,83,85,86,87,89,,,,84,92,,',
',,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,33,34',
'75,76,,,,,,32,31,30,104,103,105,106,,,234,,,,,,,48,,,108,107,109,98',
'59,100,99,101,287,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,227',
',,233,,,61,62,,,63,,285,,283,,47,,,,,,,,232,,,,,91,83,85,86,87,89,,',
',84,92,,,,,,,65,,288,81,88,90,-281,,96,97,,,,-281,-281,-281,,,-281,-281',
'-281,560,-281,557,556,555,564,558,,,,,-281,-281,-281,,,567,,,,,-281',
'-281,,-281,-281,-281,-281,-281,,,,,,,,,,562,,,,,,,,,572,571,575,574',
',-281,-281,-281,-281,-281,-281,-281,-281,-281,-281,-281,-281,-281,-281',
',,-281,-281,-281,,,-281,,,-281,,,-281,-281,,-281,568,-281,,-281,,-281',
'-281,-281,-281,-281,-281,-281,,-281,,-281,,,,,,,,,,,,,-281,-281,-281',
'-281,-605,-281,,-281,,,,-605,-605,-605,,,-605,-605,-605,560,-605,557',
'556,555,564,558,,,,-605,-605,-605,-605,,,567,,,,,-605,-605,,-605,-605',
'-605,-605,-605,,,,,,,,,,562,754,,,,,,,,572,571,575,574,,-605,-605,-605',
'-605,-605,-605,-605,-605,-605,-605,-605,-605,-605,-605,,,-605,-605,-605',
',,-605,,,-605,,,-605,-605,,-605,568,-605,,-605,,-605,-605,-605,-605',
'-605,-605,-605,,-605,-605,-605,,,,,,,,,,,,,-605,-605,-605,-605,-606',
'-605,,-605,,,,-606,-606,-606,,,-606,-606,-606,560,-606,557,556,555,564',
'558,,,,-606,-606,-606,-606,,,567,,,,,-606,-606,,-606,-606,-606,-606',
'-606,,,,,,,,,,562,,,,,,,,,572,571,575,574,,-606,-606,-606,-606,-606',
'-606,-606,-606,-606,-606,-606,-606,-606,-606,,,-606,-606,-606,,,-606',
',222,-606,,,-606,-606,,-606,568,-606,,-606,,-606,-606,-606,-606,-606',
'-606,-606,,-606,-606,-606,,,,,,,,,,,,,-606,-606,-606,-606,,-606,,-606',
'176,187,177,200,173,193,183,182,203,204,198,181,180,175,201,205,206',
'185,174,188,192,194,186,179,,,,195,202,197,196,189,199,184,172,191,190',
',,,,,171,178,169,170,166,167,168,127,129,126,,128,,,,,,,,,161,162,,157',
'139,140,141,148,145,147,,,142,143,,,,163,164,149,150,,,,,,,,,,,,,,154',
'153,,138,160,156,155,151,152,146,144,136,159,137,,,165,91,,,,,,,,,,92',
',,,,,,,,158,176,187,177,200,173,193,183,182,203,204,198,181,180,175',
'201,205,206,185,174,188,192,194,186,179,,,,195,202,197,196,189,199,184',
'172,191,190,,,,,,171,178,169,170,166,167,168,127,129,,,128,,,,,,,,,161',
'162,,157,139,140,141,148,145,147,,,142,143,,,,163,164,149,150,,,,,,',
',,,,,,,154,153,,138,160,156,155,151,152,146,144,136,159,137,,,165,91',
',,,,,,,,,92,,,,,,,,,158,176,187,177,200,173,193,183,182,203,204,198',
'181,180,175,201,205,206,185,174,188,192,194,186,179,,,,195,202,197,364',
'363,365,362,172,191,190,,,,,,171,178,169,170,359,360,361,357,129,100',
'99,358,,102,,,,,,,161,162,,157,139,140,141,148,145,147,,,142,143,,,',
'163,164,149,150,,,,,,371,,,,,,,,154,153,,138,160,156,155,151,152,146',
'144,136,159,137,,,165,,,,,,,,,,,,,,,,,,,,158,176,187,177,200,173,193',
'183,182,203,204,198,181,180,175,201,205,206,185,174,188,192,194,186',
'179,,,,195,202,197,196,189,199,184,172,191,190,,,,,,171,178,169,170',
'166,167,168,127,129,395,394,128,,396,,,,,,,161,162,,157,139,140,141',
'148,145,147,,,142,143,,,,163,164,149,150,,,,,,,,,,,,,,154,153,,138,160',
'156,155,151,152,146,144,136,159,137,,,165,,,,,,,,,,,,,,,,,,,,158,176',
'187,177,200,173,193,183,182,203,204,198,181,180,175,201,205,206,185',
'174,188,192,194,186,179,,,,195,202,197,196,189,199,184,172,191,190,',
',,,,171,178,169,170,166,167,168,127,129,,,128,,,,,,,,,161,162,,157,139',
'140,141,148,145,147,,,142,143,,,,163,164,149,150,,,,,,,,,,,,,,154,153',
',138,160,156,155,151,152,146,144,136,159,137,,,165,91,,,,,,,,,,92,,',
',,,,,,158,176,187,177,200,173,193,183,182,203,204,198,181,180,175,201',
'205,206,185,174,188,192,194,186,179,,,,195,202,197,196,189,199,184,172',
'191,190,,,,,,171,178,169,170,166,167,168,127,129,,,128,,,,,,,,,161,162',
',157,139,140,141,148,145,147,,,142,143,,,,163,164,149,150,,,,,,,,,,',
',,,154,153,,138,160,156,155,151,152,146,144,136,159,137,,,165,91,,,',
',,,,,,92,,,,,,,,,158,176,187,177,200,173,193,183,182,203,204,198,181',
'180,175,201,205,206,185,174,188,192,194,186,179,,,,195,202,197,196,189',
'199,184,172,191,190,,,,,,171,178,169,170,166,167,168,127,129,,,128,',
',,,,,,,161,162,,157,139,140,141,148,145,147,,,142,143,,,,163,164,149',
'150,,,,,,,,,,,,,,154,153,,138,160,156,155,151,152,146,144,136,159,137',
'-426,,165,,,,,-426,-426,-426,,,-426,-426,-426,560,-426,557,556,555,564',
'558,158,,,-426,-426,-426,,,,567,,,,,-426,-426,,-426,-426,-426,-426,-426',
',,,,,,,,,562,,,,,,,,,572,571,575,574,,-426,-426,-426,-426,-426,-426',
'-426,-426,-426,-426,-426,-426,-426,-426,,,-426,-426,-426,,,-426,,273',
'-426,,,-426,-426,,-426,568,-426,,-426,,-426,-426,-426,-426,-426,-426',
'-426,,-426,-426,-426,,,,,,,,,,,,-297,-426,-426,,-426,,-426,-297,-297',
'-297,,,-297,-297,-297,560,-297,557,556,555,564,558,,,,,-297,-297,,,',
'567,,,,,-297,-297,,-297,-297,-297,-297,-297,,,,,,,,,,562,,,,,,,,,572',
'571,575,574,,-297,-297,-297,-297,-297,-297,-297,-297,-297,-297,-297',
'-297,-297,-297,,,-297,-297,-297,,,-297,,276,-297,,,-297,-297,,-297,568',
'-297,,-297,,-297,-297,-297,-297,-297,-297,-297,,-297,,-297,,,,,,,,,',
',,-623,-297,-297,,-297,,-297,-623,-623,-623,,,-623,-623,-623,560,-623',
'557,556,555,564,558,,,,-623,-623,-623,,,,567,,,,,-623,-623,,-623,-623',
'-623,-623,-623,,,,,,,,,,562,,,,,,,,,,,575,574,,-623,-623,-623,-623,-623',
'-623,-623,-623,-623,-623,-623,-623,-623,-623,,,-623,-623,-623,,,-623',
',273,-623,,,-623,-623,,-623,568,-623,,-623,,-623,-623,-623,-623,-623',
'-623,-623,,-623,-623,-623,,,,,,,,,,,,-623,-623,-623,,-623,,-623,-623',
'-623,-623,,,-623,-623,-623,560,-623,557,556,555,564,558,,,,-623,-623',
',,,,567,,,,,-623,-623,,-623,-623,-623,-623,-623,,,,,,,,,,562,,560,,557',
'556,555,564,558,572,571,575,574,,,,,,567,,,,,,,-623,,,,,,,-623,,,,,273',
'-623,,562,,,,,568,,,,424,428,575,574,425,,,,,,-623,-623,,161,162,,157',
'139,140,141,148,145,147,,-623,142,143,,,-623,163,164,149,150,,,568,',
',273,,,,,,,,154,153,,138,160,156,155,151,152,146,144,136,159,137,,,165',
',,,,431,435,,,430,,,,,,,,,161,162,158,157,139,140,141,148,145,147,,',
'142,143,,,,163,164,149,150,,,,,,273,,,,,,,,154,153,,138,160,156,155',
'151,152,146,144,136,159,137,,,165,,,,,485,428,,,486,,,,,,,,,161,162',
'158,157,139,140,141,148,145,147,,,142,143,,,,163,164,149,150,,,,,,,',
',,,,,,154,153,,138,160,156,155,151,152,146,144,136,159,137,,,165,,,',
',650,428,,,651,,,,,,,,,161,162,158,157,139,140,141,148,145,147,,,142',
'143,,,,163,164,149,150,,,,,,273,,,,,,,,154,153,,138,160,156,155,151',
'152,146,144,136,159,137,,,165,,,,,652,435,,,653,,,,,,,,,161,162,158',
'157,139,140,141,148,145,147,,,142,143,,,,163,164,149,150,,,,,,273,,',
',,,,,154,153,,138,160,156,155,151,152,146,144,136,159,137,,,165,,,,',
'682,428,,,683,,,,,,,,,161,162,158,157,139,140,141,148,145,147,,,142',
'143,,,,163,164,149,150,,,,,,273,,,,,,,,154,153,,138,160,156,155,151',
'152,146,144,136,159,137,,,165,,,,,685,435,,,686,,,,,,,,,161,162,158',
'157,139,140,141,148,145,147,,,142,143,,,,163,164,149,150,,,,,,273,,',
',,,,,154,153,,138,160,156,155,151,152,146,144,136,159,137,,,165,,,,',
'650,428,,,651,,,,,,,,,161,162,158,157,139,140,141,148,145,147,,,142',
'143,,,,163,164,149,150,,,,,,273,,,,,,,,154,153,,138,160,156,155,151',
'152,146,144,136,159,137,,,165,,,,,652,435,,,653,,,,,,,,,161,162,158',
'157,139,140,141,148,145,147,,,142,143,,,,163,164,149,150,,,,,,273,,',
',,,,,154,153,,138,160,156,155,151,152,146,144,136,159,137,,,165,,,,',
'736,428,,,737,,,,,,,,,161,162,158,157,139,140,141,148,145,147,,,142',
'143,,,,163,164,149,150,,,,,,273,,,,,,,,154,153,,138,160,156,155,151',
'152,146,144,136,159,137,,,165,,,,,738,435,,,739,,,,,,,,,161,162,158',
'157,139,140,141,148,145,147,,,142,143,,,,163,164,149,150,,,,,,273,,',
',,,,,154,153,,138,160,156,155,151,152,146,144,136,159,137,,,165,,,,',
'856,435,,,857,,,,,,,,,161,162,158,157,139,140,141,148,145,147,,,142',
'143,,,,163,164,149,150,,,,,,273,,,,,,,,154,153,,138,160,156,155,151',
'152,146,144,136,159,137,,,165,,,,,485,428,,,486,,,,,,,,,161,162,158',
'157,139,140,141,148,145,147,,,142,143,,,,163,164,149,150,,,,,,273,,',
',,,,,154,153,,138,160,156,155,151,152,146,144,136,159,137,,560,165,557',
'556,555,564,558,560,,557,556,555,564,558,,,567,,,,,158,,567,560,,557',
'556,555,564,558,,,,,,,,562,,567,,,,,562,,572,571,575,574,,,,572,571',
'575,574,,,,560,562,557,556,555,564,558,,,,572,571,575,574,,560,567,557',
'556,555,564,558,568,,,,,,,568,,567,,,,,,,562,560,,557,556,555,564,558',
'568,,,575,574,,,562,560,567,557,556,555,564,558,,,,575,574,,,,,567,',
',,,,,562,,,,,,568,,,,,575,574,,,562,754,,1004,435,,568,1003,,572,571',
'575,574,,,,161,162,,157,139,140,141,148,145,147,,,142,143,568,,,163',
'164,149,150,,,,,,273,,,568,,,,,154,153,,138,160,156,155,151,152,146',
'144,136,159,137,,560,165,557,556,555,564,558,560,,557,556,555,564,558',
',,567,,,,,158,,567,560,,557,556,555,564,558,,,,,,,,562,,567,,,,,562',
',572,571,575,574,,,,,,575,574,,,,560,562,557,556,555,564,558,,,,,,575',
'574,,,567,,,,,,568,,,,,,,568,,,,,,,,,562,1032,428,,,1033,,,568,,,575',
'574,,161,162,,157,139,140,141,148,145,147,,,142,143,,,,163,164,149,150',
',,,,,273,,,,,568,,,154,153,,138,160,156,155,151,152,146,144,136,159',
'137,,,165,,,,,1034,435,,,1035,,,,,,,,,161,162,158,157,139,140,141,148',
'145,147,,,142,143,,,,163,164,149,150,,,,,,273,,,,,,,,154,153,,138,160',
'156,155,151,152,146,144,136,159,137,,560,165,557,556,555,564,558,560',
',557,556,555,564,558,,,567,,,,,158,,567,,,,,,,,,,,,,,,562,,,,,,,562',
',,,575,574,,,,,,575,574,,,,,,,,,,,,,,,,,,,,,,,,,,568,,,,,,,568' ]
        racc_action_table = arr = ::Array.new(26260, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

clist = [
'98,339,340,386,906,853,64,98,98,98,483,928,98,98,98,310,98,478,491,389',
'448,448,692,692,98,479,98,98,98,346,347,350,597,1032,593,1033,98,98',
'593,98,98,98,98,98,483,545,589,1047,736,478,737,61,491,478,478,478,478',
'479,854,225,22,479,479,479,479,1034,386,98,98,98,98,98,98,98,98,98,98',
'98,98,98,98,581,389,98,98,98,61,98,98,582,855,98,1,64,98,98,22,98,3',
'98,663,98,310,98,98,98,98,98,98,98,448,98,692,98,225,339,340,738,906',
'853,339,340,853,906,853,928,98,98,98,98,928,98,101,98,346,347,350,13',
'597,101,101,101,98,1034,101,101,101,1032,101,1033,545,589,1032,736,1033',
'737,101,597,101,101,101,1047,597,854,757,757,1047,677,101,101,80,101',
'101,101,101,101,739,682,80,1034,677,581,683,738,1034,29,581,663,15,582',
'855,226,18,228,582,855,492,453,650,101,101,101,101,101,101,101,101,101',
'101,101,101,101,101,44,44,101,101,101,16,101,101,664,738,101,614,41',
'101,101,651,101,492,101,19,101,18,101,101,101,101,101,101,101,739,101',
'682,101,226,18,228,683,29,373,453,650,757,664,591,592,101,101,101,101',
'430,101,788,101,985,41,985,430,430,430,29,42,101,430,430,25,430,682',
'41,739,682,651,683,614,614,683,40,617,27,5,44,44,614,682,5,27,430,430',
'683,430,430,430,430,430,315,315,43,591,592,17,373,373,373,42,591,592',
'17,788,48,591,592,813,72,591,592,17,42,430,430,430,430,430,430,430,430',
'430,430,430,430,430,430,591,592,430,430,430,87,430,617,617,375,430,88',
'380,430,357,383,617,89,430,90,430,357,430,430,430,430,430,430,430,358',
'430,124,430,813,391,207,358,227,685,856,813,229,315,315,431,430,430',
'49,430,813,430,431,431,431,49,230,331,431,431,331,431,430,719,49,719',
'719,719,813,719,431,375,375,375,380,380,380,383,383,383,332,431,431',
'332,431,431,431,431,431,291,704,234,685,856,291,224,391,391,391,685',
'856,704,224,377,685,856,377,543,685,856,543,224,431,431,431,431,431',
'431,431,431,431,431,431,431,431,431,685,856,431,431,431,266,431,359',
'704,704,431,126,319,431,359,719,126,126,431,269,431,424,431,431,431',
'431,431,431,431,882,431,431,431,425,360,633,361,280,377,377,882,360',
'704,361,652,431,431,281,431,284,431,652,652,652,319,287,652,652,652',
'295,652,431,924,424,924,924,924,319,924,652,652,652,652,882,882,425',
'424,633,297,697,652,652,697,652,652,652,652,652,425,302,633,954,298',
'303,954,562,302,562,562,562,303,562,299,362,305,302,308,882,309,303',
'362,652,652,652,652,652,652,652,652,652,652,652,652,652,652,20,20,652',
'652,652,304,652,652,562,314,652,316,304,652,652,924,652,562,652,320',
'652,304,652,652,652,652,652,652,652,323,652,652,652,337,363,337,337',
'337,337,337,329,363,338,338,333,652,652,652,652,337,652,653,652,533',
'533,364,707,707,653,653,653,652,364,653,653,653,365,653,306,321,344',
'337,337,365,345,306,321,653,653,653,337,337,337,337,306,321,349,653',
'653,367,653,653,653,653,653,844,367,844,844,844,351,844,716,379,716',
'716,716,382,716,925,385,925,925,925,388,925,337,410,653,653,653,653',
'653,653,653,653,653,653,653,653,653,653,413,844,653,653,653,348,653',
'653,716,415,653,419,348,653,653,925,653,716,653,422,653,348,653,653',
'653,653,653,653,653,423,653,894,653,894,894,894,432,894,978,440,978',
'978,978,461,978,653,653,653,653,462,653,463,653,2,2,2,2,2,2,343,750',
'653,2,2,343,750,464,2,493,2,2,2,2,2,2,2,978,725,725,751,751,2,2,2,2',
'2,2,2,758,758,2,494,758,758,758,443,2,2,2,2,2,2,2,2,2,2,2,2,509,2,2',
'2,510,2,2,513,2,2,2,443,443,443,443,443,443,443,443,443,443,443,515',
'443,443,519,755,443,443,863,2,755,519,2,863,520,2,2,459,937,2,519,2',
'443,937,443,2,443,443,443,443,443,443,443,2,443,1018,1018,523,2,2,2',
'2,2,2,531,532,541,2,2,459,443,544,443,459,459,2,548,549,2,2,2,551,552',
'2,2,36,36,36,36,36,36,553,561,595,36,36,569,573,576,36,595,36,36,36',
'36,36,36,36,578,595,583,584,621,36,36,36,36,36,36,36,624,626,36,630',
'634,639,645,418,36,36,654,36,36,36,36,36,36,36,36,36,656,36,36,36,662',
'36,36,669,36,36,36,418,418,418,418,418,418,418,418,418,418,418,671,418',
'418,742,679,418,418,681,36,684,742,36,687,688,36,36,460,691,36,742,36',
'418,693,418,36,418,418,418,418,418,418,418,36,418,696,703,718,36,36',
'36,36,36,36,720,686,727,36,36,460,418,732,686,460,460,36,735,686,36',
'36,36,686,767,36,36,209,209,209,209,209,209,772,790,896,209,209,791',
'793,794,209,896,209,209,209,209,209,209,209,795,896,797,798,799,209',
'209,209,209,209,209,209,800,812,209,816,819,820,825,655,209,209,826',
'209,209,209,209,209,209,209,209,209,827,209,209,209,828,209,209,832',
'209,209,209,655,655,655,655,655,655,655,655,655,655,655,857,655,655',
'958,833,655,655,857,209,835,958,209,857,836,209,209,857,838,209,958',
'209,655,841,655,209,655,655,655,655,655,655,655,209,655,843,846,967',
'209,209,209,209,209,209,967,968,849,209,209,859,655,864,968,967,865',
'209,866,875,209,209,209,968,876,209,209,233,233,233,233,233,233,893',
'897,969,233,233,898,900,901,233,969,233,233,233,233,233,233,233,926',
'969,930,931,936,233,233,233,233,233,233,233,944,1002,233,1002,1002,1002',
'947,1002,233,233,948,233,233,233,233,233,233,233,233,233,949,233,233',
'233,950,233,233,952,233,233,233,24,24,24,24,24,24,24,24,24,24,24,971',
'24,24,1010,962,24,24,971,233,970,1010,233,973,974,233,233,971,975,233',
'1010,233,24,976,24,233,24,24,24,24,24,24,24,233,24,977,979,1035,233',
'233,233,233,233,233,1035,1003,1004,233,233,1035,24,1006,1017,1035,1022',
'233,1023,1024,233,233,233,1025,1026,233,233,296,296,296,296,296,296',
'1027,1028,1031,296,296,1036,1037,1049,296,,296,296,296,296,296,296,296',
'9,9,9,9,9,296,296,296,296,296,296,296,,,296,293,293,293,293,293,296',
'296,,296,296,296,296,296,296,296,296,296,,296,296,296,,296,296,,296',
'296,296,278,278,278,278,278,278,278,278,278,278,278,,278,278,,,278,278',
',296,,,296,,,296,296,,,296,,296,278,,278,296,278,278,278,278,278,278',
'278,296,278,,,,296,296,296,296,296,296,,,,296,296,,278,,,,,296,,,296',
'296,296,,,296,296,301,301,301,301,301,301,,,,301,301,,,,301,,301,301',
'301,301,301,301,301,508,508,508,508,508,301,301,301,301,301,301,301',
',,301,676,676,676,676,676,301,301,,301,301,301,301,301,301,301,301,301',
',301,301,301,,301,301,,301,301,301,438,438,438,438,438,438,438,438,438',
'438,438,,438,438,,,438,438,,301,,,301,,,301,301,,,301,,301,438,,438',
'301,438,438,438,438,438,438,438,301,438,,,,301,301,301,301,301,301,',
',,301,301,,438,,,,,301,,,301,301,301,,,301,301,326,326,326,326,326,326',
',,,326,326,,,,326,,326,326,326,326,326,326,326,,,,,,326,326,326,326',
'326,326,326,,,326,,,,,,326,326,,326,326,326,326,326,326,326,326,326',
',326,326,326,,326,326,,326,326,326,482,482,482,482,482,482,482,482,482',
'482,482,,482,482,,,482,482,,326,,,326,,,326,326,,,326,,326,482,,482',
'326,482,482,482,482,482,482,482,326,482,,,,326,326,326,326,326,326,',
',,326,326,482,482,,,,,326,,,326,326,326,,,326,326,404,404,404,404,404',
'404,,,,404,404,,,,404,,404,404,404,404,404,404,404,,,,,,404,404,404',
'404,404,404,404,,,404,,,,,,404,404,404,404,404,404,404,404,404,404,404',
'404,,404,404,404,,404,404,,404,404,404,529,529,529,529,529,529,529,529',
'529,529,529,,529,529,,,529,529,,404,,,404,,,404,404,,,404,,404,529,',
'529,404,529,529,529,529,529,529,529,404,529,,,,404,404,404,404,404,404',
',,,404,404,,529,,,,,404,,,404,404,404,,,404,404,577,577,577,577,577',
'577,,,,577,577,,,,577,,577,577,577,577,577,577,577,,,,,,577,577,577',
'577,577,577,577,,,577,,,,,,577,577,,577,577,577,577,577,577,577,577',
'577,,577,577,577,,577,577,,577,577,577,690,690,690,690,690,690,690,690',
'690,690,690,,690,690,,,690,690,,577,,,577,,,577,577,,,577,,577,690,',
'690,577,690,690,690,690,690,690,690,577,690,,,,577,577,577,577,577,577',
',,,577,577,,690,,,,,577,,,577,577,577,,,577,577,580,580,580,580,580',
'580,,,,580,580,,,,580,,580,580,580,580,580,580,580,,,,,,580,580,580',
'580,580,580,580,,,580,,,,,,580,580,,580,580,580,580,580,580,580,580',
'580,,580,580,580,,580,580,,580,580,580,769,769,769,769,769,769,769,769',
'769,769,769,,769,769,,,769,769,,580,,,580,,,580,580,,,580,,580,769,',
'769,580,769,769,769,769,769,769,769,580,769,,,,580,580,580,580,580,580',
',,,580,580,,769,,,,,580,,,580,580,580,,,580,580,701,701,701,701,701',
'701,,,,701,701,,,,701,,701,701,701,701,701,701,701,,,,,,701,701,701',
'701,701,701,701,,,701,,,,,,701,701,,701,701,701,701,701,701,701,701',
'701,,701,701,701,,701,701,,701,701,701,774,774,774,774,774,774,774,774',
'774,774,774,,774,774,,,774,774,,701,,,701,,,701,701,,,701,,701,774,',
'774,701,774,774,774,774,774,774,774,701,774,,,,701,701,701,701,701,701',
',,,701,701,,774,,,,,701,,,701,701,701,,,701,701,702,702,702,702,702',
'702,,,,702,702,,,,702,,702,702,702,702,702,702,702,,,,,,702,702,702',
'702,702,702,702,,,702,,,,,,702,702,,702,702,702,702,702,702,702,702',
'702,,702,702,702,,702,702,,702,702,702,776,776,776,776,776,776,776,776',
'776,776,776,,776,776,,,776,776,,702,,,702,,,702,702,,,702,,702,776,',
'776,702,776,776,776,776,776,776,776,702,776,,,,702,702,702,702,702,702',
',,,702,702,,776,,,,,702,,,702,702,702,,,702,702,752,752,752,752,752',
'752,,,,752,752,,,,752,,752,752,752,752,752,752,752,,,,,,752,752,752',
'752,752,752,752,,,752,,,,,,752,752,,752,752,752,752,752,752,752,752',
'752,,752,752,752,,752,752,,752,752,752,779,779,779,779,779,779,779,779',
'779,779,779,,779,779,,,779,779,,752,,,752,,,752,752,,,752,,752,779,',
'779,752,779,779,779,779,779,779,779,752,779,,,,752,752,752,752,752,752',
',,,752,752,,779,,,,,752,,,752,752,752,,,752,752,753,753,753,753,753',
'753,,,,753,753,,,,753,,753,753,753,753,753,753,753,,,,,,753,753,753',
'753,753,753,753,,,753,,,,,,753,753,,753,753,753,753,753,753,753,753',
'753,,753,753,753,,753,753,,753,753,753,781,781,781,781,781,781,781,781',
'781,781,781,,781,781,,,781,781,,753,,,753,,,753,753,,,753,,753,781,',
'781,753,781,781,781,781,781,781,781,753,781,,,,753,753,753,753,753,753',
',,,753,753,,781,,,,,753,,,753,753,753,,,753,753,759,759,759,759,759',
'759,,,,759,759,,,,759,,759,759,759,759,759,759,759,,,,,,759,759,759',
'759,759,759,759,,,759,,,,,,759,759,,759,759,759,759,759,759,759,759',
'759,,759,759,759,,759,759,,759,759,759,783,783,783,783,783,783,783,783',
'783,783,783,,783,783,,,783,783,,759,,,759,,,759,759,,,759,,759,783,',
'783,759,783,783,783,783,783,783,783,759,783,,,,759,759,759,759,759,759',
',,,759,759,,783,,,,,759,,,759,759,759,,,759,759,804,804,804,804,804',
'804,,,,804,804,,,,804,,804,804,804,804,804,804,804,,,,,,804,804,804',
'804,804,804,804,,,804,,,,,,804,804,,804,804,804,804,804,804,804,804',
'804,,804,804,804,,804,804,,804,804,804,878,878,878,878,878,878,878,878',
'878,878,878,,878,878,,,878,878,,804,,,804,,,804,804,,,804,,804,878,',
'878,804,878,878,878,878,878,878,878,804,878,,,,804,804,804,804,804,804',
',,,804,804,,878,,,,,804,,,804,804,804,,,804,804,808,808,808,808,808',
'808,,,,808,808,,,,808,,808,808,808,808,808,808,808,,,,,,808,808,808',
'808,808,808,808,,,808,,,,,,808,808,,808,808,808,808,808,808,808,808',
'808,,808,808,808,,808,808,,808,808,808,881,881,881,881,881,881,881,881',
'881,881,881,,881,881,,,881,881,,808,,,808,,,808,808,,,808,,808,881,',
'881,808,881,881,881,881,881,881,881,808,881,,,,808,808,808,808,808,808',
',,,808,808,,881,,,,,808,,,808,808,808,,,808,808,809,809,809,809,809',
'809,,,,809,809,,,,809,,809,809,809,809,809,809,809,,,,,,809,809,809',
'809,809,809,809,,842,809,842,842,842,,842,809,809,,809,809,809,809,809',
'809,809,809,809,,809,809,809,,809,809,,809,809,809,980,,980,980,980',
',980,1016,842,1016,1016,1016,,1016,,,,842,,809,,,809,467,,809,809,,',
'809,,809,,,,809,,,980,467,467,,,809,,1016,,,809,809,809,809,809,809',
',467,,809,809,467,467,467,467,,,809,,,809,809,809,,,809,809,818,818',
'818,818,818,818,,,,818,818,,,,818,,818,818,818,818,818,818,818,,,,,',
'818,818,818,818,818,818,818,,,818,,,,,,818,818,,818,818,818,818,818',
'818,818,818,818,,818,818,818,,818,818,,818,818,818,457,457,457,457,457',
'457,457,457,457,457,457,,457,457,,,457,457,,818,,,818,,,818,818,,,818',
',818,457,,457,818,457,457,457,457,457,457,457,818,457,,,,818,818,818',
'818,818,818,,,,818,818,,,,,,,818,,,818,818,818,,,818,818,850,850,850',
'850,850,850,,,,850,850,,,,850,,850,850,850,850,850,850,850,,,,,,850',
'850,850,850,850,850,850,,,850,,,,,,850,850,,850,850,850,850,850,850',
'850,850,850,,850,850,850,,850,850,,850,850,850,458,458,458,458,458,458',
'458,458,458,458,458,,458,458,,,458,458,,850,,,850,,,850,850,,,850,,850',
'458,,458,850,458,458,458,458,458,458,458,850,458,,,,850,850,850,850',
'850,850,,,,850,850,,,,,,,850,,,850,850,850,,,850,850,851,851,851,851',
'851,851,,,,851,851,,,,851,,851,851,851,851,851,851,851,,,,,,851,851',
'851,851,851,851,851,,,851,,,,,,851,851,,851,851,851,851,851,851,851',
'851,851,,851,851,851,,851,851,,851,851,851,468,468,468,468,468,468,468',
',,468,468,,,,,,468,468,,851,,,851,,,851,851,,,851,,851,468,,468,851',
'468,468,468,468,468,468,468,851,468,,,,851,851,851,851,851,851,,,,851',
'851,,,,,,,851,,,851,851,851,,,851,851,860,860,860,860,860,860,,,,860',
'860,,,,860,,860,860,860,860,860,860,860,,,,,,860,860,860,860,860,860',
'860,,,860,,,,,,860,860,,860,860,860,860,860,860,860,860,860,,860,860',
'860,,860,860,,860,860,860,469,,,,,,,,,,,,,,,,469,469,,860,,,860,,,860',
'860,,,860,,860,469,,469,860,469,469,469,469,,,469,860,469,,,,860,860',
'860,860,860,860,,,,860,860,,,,,,,860,,,860,860,860,,,860,860,899,899',
'899,899,899,899,,,,899,899,,,,899,,899,899,899,899,899,899,899,,,,,',
'899,899,899,899,899,899,899,,,899,,,,,,899,899,,899,899,899,899,899',
'899,899,899,899,,899,899,899,,899,899,,899,899,899,470,,,,,,,,,,,,,',
',,470,470,,899,,,899,,,899,899,,,899,,899,470,,470,899,470,470,470,470',
',,470,899,470,,,,899,899,899,899,899,899,,,,899,899,,,,,,,899,,,899',
'899,899,,,899,899,903,903,903,903,903,903,,,,903,903,,,,903,,903,903',
'903,903,903,903,903,,,,,,903,903,903,903,903,903,903,,,903,,,,,,903',
'903,,903,903,903,903,903,903,903,903,903,,903,903,903,,903,903,,903',
'903,903,471,,,,,,,,,,,,,,,,471,471,,903,,,903,,,903,903,,,903,,903,471',
',471,903,471,471,471,471,,,471,903,471,,,,903,903,903,903,903,903,,',
',903,903,,,,,,,903,,,903,903,903,,,903,903,933,933,933,933,933,933,',
',,933,933,,,,933,,933,933,933,933,933,933,933,,,,,,933,933,933,933,933',
'933,933,,,933,,,,,,933,933,,933,933,933,933,933,933,933,933,933,,933',
'933,933,,933,933,,933,933,933,472,,,,,,,,,,,,,,,,472,472,,933,,,933',
',,933,933,,,933,,933,472,,472,933,472,472,472,472,,,472,933,472,,,,933',
'933,933,933,933,933,,,,933,933,,,,,,,933,,,933,933,933,,,933,933,966',
'966,966,966,966,966,,,,966,966,,,,966,,966,966,966,966,966,966,966,',
',,,,966,966,966,966,966,966,966,,,966,,,,,,966,966,,966,966,966,966',
'966,966,966,966,966,,966,966,966,,966,966,,966,966,966,473,473,473,473',
'473,473,473,,,473,473,,,,,,473,473,,966,,,966,,,966,966,,,966,,966,473',
',473,966,473,473,473,473,473,473,473,966,473,,,,966,966,966,966,966',
'966,,,,966,966,,,,,,,966,,,966,966,966,,,966,966,981,981,981,981,981',
'981,,,,981,981,,,,981,,981,981,981,981,981,981,981,,,,,,981,981,981',
'981,981,981,981,,,981,,,,,,981,981,,981,981,981,981,981,981,981,981',
'981,,981,981,981,,981,981,,981,981,981,474,474,474,474,474,474,474,',
',474,474,,,,,,474,474,,981,,,981,,,981,981,,,981,,981,474,,474,981,474',
'474,474,474,474,474,474,981,474,,,,981,981,981,981,981,981,,,,981,981',
',,,,,,981,,,981,981,981,,,981,981,986,986,986,986,986,986,,,,986,986',
',,,986,,986,986,986,986,986,986,986,,,,,,986,986,986,986,986,986,986',
',,986,,,,,,986,986,,986,986,986,986,986,986,986,986,986,,986,986,986',
',986,986,,986,986,986,475,475,475,475,475,475,475,,,475,475,,,,,,475',
'475,,986,,,986,,,986,986,,,986,,986,475,,475,986,475,475,475,475,475',
'475,475,986,475,,,,986,986,986,986,986,986,,,,986,986,,,,,,,986,,,986',
'986,986,,,986,986,989,989,989,989,989,989,,,,989,989,,,,989,,989,989',
'989,989,989,989,989,,,,,,989,989,989,989,989,989,989,,,989,,,,,,989',
'989,,989,989,989,989,989,989,989,989,989,,989,989,989,,989,989,,989',
'989,989,476,476,476,476,476,476,476,,,476,476,,,,,,476,476,,989,,,989',
',,989,989,,,989,,989,476,,476,989,476,476,476,476,476,476,476,989,476',
',,,989,989,989,989,989,989,,,,989,989,,,,,,,989,,,989,989,989,,,989',
'989,990,990,990,990,990,990,,,,990,990,,,,990,,990,990,990,990,990,990',
'990,,,,,,990,990,990,990,990,990,990,,,990,,,,,,990,990,,990,990,990',
'990,990,990,990,990,990,,990,990,990,,990,990,,990,990,990,477,477,477',
'477,477,477,477,,,477,477,,,,,,477,477,,990,,,990,,,990,990,,,990,,990',
'477,,477,990,477,477,477,477,477,477,477,990,477,,,,990,990,990,990',
'990,990,,,,990,990,,,,,,,990,,,990,990,990,,,990,990,8,8,8,8,8,,,,8',
'8,,,,8,,8,8,8,8,8,8,8,,,,,,8,8,8,8,8,8,8,,,8,,,,,,8,8,8,8,8,8,8,8,8',
'8,8,8,,8,8,8,,8,8,,8,8,8,480,480,480,480,480,480,480,,,480,480,,,,,',
'480,480,,8,,,8,,,8,8,,,8,,8,480,,480,8,480,480,480,480,480,480,480,8',
'480,,,,8,8,8,8,8,8,,,,8,8,,,,,,,8,,,8,8,8,,,8,8,23,23,23,,23,,,,23,23',
',,,23,,23,23,23,23,23,23,23,,,,,,23,23,23,23,23,23,23,,,23,,,,,,,23',
',,23,23,23,23,23,23,23,23,,23,23,23,,23,23,,23,23,23,481,481,481,481',
'481,481,481,481,,481,481,,,,,,481,481,,23,,,23,,,23,23,,,23,,,481,,481',
'23,481,481,481,481,481,481,481,23,481,,,,23,23,23,23,23,23,,,,23,23',
',,,,,,23,,,23,23,23,,,23,23,32,32,32,,32,,,,32,32,,,,32,,32,32,32,32',
'32,32,32,,,,,,32,32,32,32,32,32,32,,,32,,,,,,,32,,,32,32,32,32,32,32',
'32,32,32,32,32,32,,32,32,,32,32,32,465,,,,,,,,,,,,,,,,465,465,,32,,',
'32,,,32,32,,,32,,32,465,32,465,32,465,465,465,465,,,,32,,,,,32,32,32',
'32,32,32,,,,32,32,,,,,,,32,,32,32,32,32,,,32,32,33,33,33,,33,,,,33,33',
',,,33,,33,33,33,33,33,33,33,,,,,,33,33,33,33,33,33,33,,,33,,,,,,,33',
',,33,33,33,33,33,33,33,33,33,33,33,33,,33,33,,33,33,33,466,,,,,,,,,',
',,,,,,466,466,,33,,,33,,,33,33,,,33,,33,466,33,466,33,466,466,466,466',
',,,33,,,,,33,33,33,33,33,33,,,,33,33,,,,,,,33,,33,33,33,33,,,33,33,34',
'34,34,,34,,,,34,34,,,,34,,34,34,34,34,34,34,34,,,,,,34,34,34,34,34,34',
'34,,,34,,,,,,,34,,,34,34,34,34,34,34,34,34,34,34,34,34,,34,34,,34,34',
'34,,,,,,,,,,,,,,,,,,,,34,,,34,,,34,34,,,34,,34,,34,,34,,,,,,,,34,,,',
',34,34,34,34,34,34,,,,34,34,,,,,,,34,,34,34,34,34,,,34,34,37,37,37,',
'37,,,,37,37,,,,37,,37,37,37,37,37,37,37,,,,,,37,37,37,37,37,37,37,,',
'37,,,,,,,37,,,37,37,37,37,37,37,37,37,,37,37,37,,37,37,,,,37,,,,,,,',
',,,,,,,,,,,,37,,,37,,,37,37,,,37,,37,,,,,,,,,,,,,,,,,37,37,37,37,37',
'37,,,,37,37,,,,,,,37,,,37,37,37,,,37,37,38,38,38,,38,,,,38,38,,,,38',
',38,38,38,38,38,38,38,,,,,,38,38,38,38,38,38,38,,,38,,,,,,,38,,,38,38',
'38,38,38,38,38,38,,38,38,38,,38,38,,,,38,,,,,,,,,,,,,,,,,,,,38,,,38',
',,38,38,,,38,,,,,,,,,,,,,,,,,,,38,38,38,38,38,38,,,,38,38,,,,38,,,38',
',,38,38,38,,,38,38,45,45,45,,45,,,,45,45,,,,45,,45,45,45,45,45,45,45',
',,,,,45,45,45,45,45,45,45,,,45,,,,,,,45,,,45,45,45,45,45,45,45,45,,45',
'45,45,,45,45,,45,45,45,,,,,,,,,,,,,,,,,,,,45,,,45,,,45,45,,,45,,,,,',
'45,,,,,,,,45,,,,,45,45,45,45,45,45,,,,45,45,,,,,,,45,,,45,45,45,,,45',
'45,46,46,46,,46,,,,46,46,,,,46,,46,46,46,46,46,46,46,,,,,,46,46,46,46',
'46,46,46,,,46,,,,,,,46,,,46,46,46,46,46,46,46,46,,46,46,46,,46,46,,46',
'46,46,,,,,,,,,,,,,,,,,,,,46,,,46,,,46,46,,,46,,,,,,46,,,,,,,,46,,,,',
'46,46,46,46,46,46,,,,46,46,,,,,,,46,,,46,46,46,,,46,46,47,47,47,,47',
',,,47,47,,,,47,,47,47,47,47,47,47,47,,,,,,47,47,47,47,47,47,47,,,47',
',,,,,,47,,,47,47,47,47,47,47,47,47,,47,47,47,,47,47,,47,47,47,,,,,,',
',,,,,,,,,,,,,47,,,47,,,47,47,,,47,,,,,,47,,,,,,,,47,,,,,47,47,47,47',
'47,47,,,,47,47,,,,,,,47,,,47,47,47,,,47,47,62,62,62,,62,,,,62,62,,,',
'62,,62,62,62,62,62,62,62,,,,,,62,62,62,62,62,62,62,,,62,,,,,,,62,,,62',
'62,62,62,62,62,62,62,62,62,62,62,,62,62,,62,62,62,,,,,,,,,,,,,,,,,,',
',62,,,62,,,62,62,,,62,,62,,,,62,,,,,,,,62,,,,,62,62,62,62,62,62,,,,62',
'62,,,,,,,62,,62,62,62,62,,,62,62,66,66,66,,66,,,,66,66,,,,66,,66,66',
'66,66,66,66,66,,,,,,66,66,66,66,66,66,66,,,66,,,,,,,66,,,66,66,66,66',
'66,66,66,66,,66,66,66,,66,66,,66,66,66,,,,,,,,,,,,,,,,,,,,66,,,66,,',
'66,66,,,66,,,,,,66,,,,,,,,66,,,,,66,66,66,66,66,66,,,,66,66,,,,,,,66',
',,66,66,66,,,66,66,67,67,67,,67,,,,67,67,,,,67,,67,67,67,67,67,67,67',
',,,,,67,67,67,67,67,67,67,,,67,,,,,,,67,,,67,67,67,67,67,67,67,67,,67',
'67,67,,67,67,,67,67,67,,,,,,,,,,,,,,,,,,,,67,,,67,,,67,67,,,67,,,,,',
'67,,,,,,,,67,,,,,67,67,67,67,67,67,,,,67,67,,,,,,,67,,,67,67,67,,,67',
'67,70,70,70,,70,,,,70,70,,,,70,,70,70,70,70,70,70,70,,,,,,70,70,70,70',
'70,70,70,,,70,,,,,,,70,,,70,70,70,70,70,70,70,70,,70,70,70,,70,70,,70',
'70,70,,,,,,,,,,,,,,,,,,,,70,,,70,,,70,70,,,70,,,,,,70,,,,,,,,70,,,,',
'70,70,70,70,70,70,,,,70,70,70,,,,,70,70,,,70,70,70,,,70,70,71,71,71',
',71,,,,71,71,,,,71,,71,71,71,71,71,71,71,,,,,,71,71,71,71,71,71,71,',
',71,,,,,,,71,,,71,71,71,71,71,71,71,71,,71,71,71,,71,71,,,,71,,,,,,',
',,,,,,,,,,,,,71,,,71,,,71,71,,,71,,71,,,,,,,,,,,,,,,,,71,71,71,71,71',
'71,,,,71,71,,,,,,,71,,,71,71,71,,,71,71,114,114,114,114,114,,,,114,114',
',,,114,,114,114,114,114,114,114,114,,,,,,114,114,114,114,114,114,114',
',,114,,,,,,114,114,114,114,114,114,114,114,114,114,114,114,,114,114',
'114,,114,114,,114,114,114,,,,,,,,,,,,,,,,,,,,114,,,114,,,114,114,,,114',
',114,,,,114,,,,,,,,114,,,,,114,114,114,114,114,114,,,,114,114,,,,,,114',
'114,,,114,114,114,,,114,114,119,119,119,,119,,,,119,119,,,,119,,119',
'119,119,119,119,119,119,,,,,,119,119,119,119,119,119,119,,,119,,,,,',
',119,,,119,119,119,119,119,119,119,119,,119,119,119,,119,119,,119,119',
'119,,,,,,,,,,,,,,,,,,,,119,,,119,,,119,119,,,119,,,,,,119,,,,,,,,119',
',,,,119,119,119,119,119,119,,,,119,119,,,,,,,119,,,119,119,119,,,119',
'119,120,120,120,,120,,,,120,120,,,,120,,120,120,120,120,120,120,120',
',,,,,120,120,120,120,120,120,120,,,120,,,,,,,120,,,120,120,120,120,120',
'120,120,120,,120,120,120,,120,120,,120,120,120,,,,,,,,,,,,,,,,,,,,120',
',,120,,,120,120,,,120,,,,,,120,,,,,,,,120,,,,,120,120,120,120,120,120',
',,,120,120,,,,,,,120,,,120,120,120,,,120,120,121,121,121,,121,,,,121',
'121,,,,121,,121,121,121,121,121,121,121,,,,,,121,121,121,121,121,121',
'121,,,121,,,,,,,121,,,121,121,121,121,121,121,121,121,,121,121,121,',
'121,121,,121,121,121,,,,,,,,,,,,,,,,,,,,121,,,121,,,121,121,,,121,,',
',,,121,,,,,,,,121,,,,,121,121,121,121,121,121,,,,121,121,,,,,,,121,',
',121,121,121,,,121,121,122,122,122,,122,,,,122,122,,,,122,,122,122,122',
'122,122,122,122,,,,,,122,122,122,122,122,122,122,,,122,,,,,,,122,,,122',
'122,122,122,122,122,122,122,,122,122,122,,122,122,,122,122,122,,,,,',
',,,,,,,,,,,,,,122,,,122,,,122,122,,,122,,,,,,122,,,,,,,,122,,,,,122',
'122,122,122,122,122,,,,122,122,,,,,,,122,,,122,122,122,,,122,122,123',
'123,123,123,123,,,,123,123,,,,123,,123,123,123,123,123,123,123,,,,,',
'123,123,123,123,123,123,123,,,123,,,,,,123,123,,123,123,123,123,123',
'123,123,123,123,,123,123,123,,123,123,,123,123,123,,,,,,,,,,,,,,,,,',
',,123,,,123,,,123,123,,,123,,123,,,,123,,,,,,,,123,,,,,123,123,123,123',
'123,123,,,,123,123,,,,,,,123,,,123,123,123,,,123,123,210,210,210,,210',
',,,210,210,,,,210,,210,210,210,210,210,210,210,,,,,,210,210,210,210',
'210,210,210,,,210,,,,,,,210,,,210,210,210,210,210,210,210,210,,210,210',
'210,,210,210,,210,210,210,,,,,,,,,,,,,,,,,,,,210,,,210,,,210,210,,,210',
',210,,,,210,,,,,,,,210,,,,,210,210,210,210,210,210,,,,210,210,,,,,,',
'210,,,210,210,210,,,210,210,211,211,211,,211,,,,211,211,,,,211,,211',
'211,211,211,211,211,211,,,,,,211,211,211,211,211,211,211,,,211,,,,,',
',211,,,211,211,211,211,211,211,211,211,,211,211,211,,211,211,,211,211',
'211,,,,,,,,,,,,,,,,,,,,211,,,211,,,211,211,,,211,,,,,,211,,,,,,,,211',
',,,,211,211,211,211,211,211,,,,211,211,,,,,,,211,,,211,211,211,,,211',
'211,212,212,212,,212,,,,212,212,,,,212,,212,212,212,212,212,212,212',
',,,,,212,212,212,212,212,212,212,,,212,,,,,,,212,,,212,212,212,212,212',
'212,212,212,212,212,212,212,,212,212,,212,212,212,,,,,,,,,,,,,,,,,,',
',212,,,212,,,212,212,,,212,,212,,212,,212,,,,,,,,212,,,,,212,212,212',
'212,212,212,,,,212,212,,,,,,,212,,212,212,212,212,,,212,212,216,216',
'216,,216,,,,216,216,,,,216,,216,216,216,216,216,216,216,,,,,,216,216',
'216,216,216,216,216,,,216,,,,,,,216,,,216,216,216,216,216,216,216,216',
',216,216,216,,216,216,,216,216,216,,,,,,,,,,,,,,,,,,,,216,,,216,,,216',
'216,,,216,,,,,,216,,,,,,,,216,,,,,216,216,216,216,216,216,,,,216,216',
',,,,,,216,,,216,216,216,,,216,216,217,217,217,,217,,,,217,217,,,,217',
',217,217,217,217,217,217,217,,,,,,217,217,217,217,217,217,217,,,217',
',,,,,,217,,,217,217,217,217,217,217,217,217,,217,217,217,,217,217,,217',
'217,217,,,,,,,,,,,,,,,,,,,,217,,,217,,,217,217,,,217,,217,,,,217,,,',
',,,,217,,,,,217,217,217,217,217,217,,,,217,217,,,,,,,217,,,217,217,217',
',,217,217,218,218,218,,218,,,,218,218,,,,218,,218,218,218,218,218,218',
'218,,,,,,218,218,218,218,218,218,218,,,218,,,,,,,218,,,218,218,218,218',
'218,218,218,218,,218,218,218,,218,218,,218,218,218,,,,,,,,,,,,,,,,,',
',,218,,,218,,,218,218,,,218,,,,,,218,,,,,,,,218,,,,,218,218,218,218',
'218,218,,,,218,218,,,,,,,218,,,218,218,218,,,218,218,219,219,219,,219',
',,,219,219,,,,219,,219,219,219,219,219,219,219,,,,,,219,219,219,219',
'219,219,219,,,219,,,,,,,219,,,219,219,219,219,219,219,219,219,,219,219',
'219,,219,219,,219,219,219,,,,,,,,,,,,,,,,,,,,219,,,219,,,219,219,,,219',
',,,,,219,,,,,,,,219,,,,,219,219,219,219,219,219,,,,219,219,,,,,,,219',
',,219,219,219,,,219,219,220,220,220,,220,,,,220,220,,,,220,,220,220',
'220,220,220,220,220,,,,,,220,220,220,220,220,220,220,,,220,,,,,,,220',
',,220,220,220,220,220,220,220,220,,220,220,220,,220,220,,220,220,220',
',,,,,,,,,,,,,,,,,,,220,,,220,,,220,220,,,220,,,,,,220,,,,,,,,220,,,',
',220,220,220,220,220,220,,,,220,220,,,,,,,220,,,220,220,220,,,220,220',
'221,221,221,,221,,,,221,221,,,,221,,221,221,221,221,221,221,221,,,,',
',221,221,221,221,221,221,221,,,221,,,,,,,221,,,221,221,221,221,221,221',
'221,221,,221,221,221,,221,221,,221,221,221,,,,,,,,,,,,,,,,,,,,221,,',
'221,,,221,221,,,221,,,,,,221,,,,,,,,221,,,,,221,221,221,221,221,221',
',,,221,221,221,,,,,,221,,,221,221,221,,,221,221,232,232,232,,232,,,',
'232,232,,,,232,,232,232,232,232,232,232,232,,,,,,232,232,232,232,232',
'232,232,,,232,,,,,,,232,,,232,232,232,232,232,232,232,232,,232,232,232',
',232,232,,232,232,232,,,,,,,,,,,,,,,,,,,,232,,,232,,,232,232,,,232,',
',,,,232,,,,,,,,232,,,,,232,232,232,232,232,232,,,,232,232,,,,,,,232',
',,232,232,232,,,232,232,235,235,235,,235,,,,235,235,,,,235,,235,235',
'235,235,235,235,235,,,,,,235,235,235,235,235,235,235,,,235,,,,,,,235',
',,235,235,235,235,235,235,235,235,,235,235,235,,235,235,,235,235,235',
',,,,,,,,,,,,,,,,,,,235,,,235,,,235,235,,,235,,,,,,235,,,,,,,,235,,,',
',235,235,235,235,235,235,,,,235,235,,,,,,,235,,,235,235,235,,,235,235',
'236,236,236,,236,,,,236,236,,,,236,,236,236,236,236,236,236,236,,,,',
',236,236,236,236,236,236,236,,,236,,,,,,,236,,,236,236,236,236,236,236',
'236,236,,236,236,236,,236,236,,236,236,236,,,,,,,,,,,,,,,,,,,,236,,',
'236,,,236,236,,,236,,,,,,236,,,,,,,,236,,,,,236,236,236,236,236,236',
',,,236,236,,,,,,,236,,,236,236,236,,,236,236,237,237,237,,237,,,,237',
'237,,,,237,,237,237,237,237,237,237,237,,,,,,237,237,237,237,237,237',
'237,,,237,,,,,,,237,,,237,237,237,237,237,237,237,237,,237,237,237,',
'237,237,,237,237,237,,,,,,,,,,,,,,,,,,,,237,,,237,,,237,237,,,237,,',
',,,237,,,,,,,,237,,,,,237,237,237,237,237,237,,,,237,237,,,,,,,237,',
',237,237,237,,,237,237,238,238,238,,238,,,,238,238,,,,238,,238,238,238',
'238,238,238,238,,,,,,238,238,238,238,238,238,238,,,238,,,,,,,238,,,238',
'238,238,238,238,238,238,238,,238,238,238,,238,238,,238,238,238,,,,,',
',,,,,,,,,,,,,,238,,,238,,,238,238,,,238,,,,,,238,,,,,,,,238,,,,,238',
'238,238,238,238,238,,,,238,238,,,,,,,238,,,238,238,238,,,238,238,239',
'239,239,,239,,,,239,239,,,,239,,239,239,239,239,239,239,239,,,,,,239',
'239,239,239,239,239,239,,,239,,,,,,,239,,,239,239,239,239,239,239,239',
'239,,239,239,239,,239,239,,239,239,239,,,,,,,,,,,,,,,,,,,,239,,,239',
',,239,239,,,239,,,,,,239,,,,,,,,239,,,,,239,239,239,239,239,239,,,,239',
'239,,,,,,,239,,,239,239,239,,,239,239,240,240,240,,240,,,,240,240,,',
',240,,240,240,240,240,240,240,240,,,,,,240,240,240,240,240,240,240,',
',240,,,,,,,240,,,240,240,240,240,240,240,240,240,,240,240,240,,240,240',
',240,240,240,,,,,,,,,,,,,,,,,,,,240,,,240,,,240,240,,,240,,,,,,240,',
',,,,,,240,,,,,240,240,240,240,240,240,,,,240,240,,,,,,,240,,,240,240',
'240,,,240,240,241,241,241,,241,,,,241,241,,,,241,,241,241,241,241,241',
'241,241,,,,,,241,241,241,241,241,241,241,,,241,,,,,,,241,,,241,241,241',
'241,241,241,241,241,,241,241,241,,241,241,,241,241,241,,,,,,,,,,,,,',
',,,,,,241,,,241,,,241,241,,,241,,,,,,241,,,,,,,,241,,,,,241,241,241',
'241,241,241,,,,241,241,,,,,,,241,,,241,241,241,,,241,241,242,242,242',
',242,,,,242,242,,,,242,,242,242,242,242,242,242,242,,,,,,242,242,242',
'242,242,242,242,,,242,,,,,,,242,,,242,242,242,242,242,242,242,242,,242',
'242,242,,242,242,,242,242,242,,,,,,,,,,,,,,,,,,,,242,,,242,,,242,242',
',,242,,,,,,242,,,,,,,,242,,,,,242,242,242,242,242,242,,,,242,242,,,',
',,,242,,,242,242,242,,,242,242,243,243,243,,243,,,,243,243,,,,243,,243',
'243,243,243,243,243,243,,,,,,243,243,243,243,243,243,243,,,243,,,,,',
',243,,,243,243,243,243,243,243,243,243,,243,243,243,,243,243,,243,243',
'243,,,,,,,,,,,,,,,,,,,,243,,,243,,,243,243,,,243,,,,,,243,,,,,,,,243',
',,,,243,243,243,243,243,243,,,,243,243,,,,,,,243,,,243,243,243,,,243',
'243,244,244,244,,244,,,,244,244,,,,244,,244,244,244,244,244,244,244',
',,,,,244,244,244,244,244,244,244,,,244,,,,,,,244,,,244,244,244,244,244',
'244,244,244,,244,244,244,,244,244,,244,244,244,,,,,,,,,,,,,,,,,,,,244',
',,244,,,244,244,,,244,,,,,,244,,,,,,,,244,,,,,244,244,244,244,244,244',
',,,244,244,,,,,,,244,,,244,244,244,,,244,244,245,245,245,,245,,,,245',
'245,,,,245,,245,245,245,245,245,245,245,,,,,,245,245,245,245,245,245',
'245,,,245,,,,,,,245,,,245,245,245,245,245,245,245,245,,245,245,245,',
'245,245,,245,245,245,,,,,,,,,,,,,,,,,,,,245,,,245,,,245,245,,,245,,',
',,,245,,,,,,,,245,,,,,245,245,245,245,245,245,,,,245,245,,,,,,,245,',
',245,245,245,,,245,245,246,246,246,,246,,,,246,246,,,,246,,246,246,246',
'246,246,246,246,,,,,,246,246,246,246,246,246,246,,,246,,,,,,,246,,,246',
'246,246,246,246,246,246,246,,246,246,246,,246,246,,246,246,246,,,,,',
',,,,,,,,,,,,,,246,,,246,,,246,246,,,246,,,,,,246,,,,,,,,246,,,,,246',
'246,246,246,246,246,,,,246,246,,,,,,,246,,,246,246,246,,,246,246,247',
'247,247,,247,,,,247,247,,,,247,,247,247,247,247,247,247,247,,,,,,247',
'247,247,247,247,247,247,,,247,,,,,,,247,,,247,247,247,247,247,247,247',
'247,,247,247,247,,247,247,,247,247,247,,,,,,,,,,,,,,,,,,,,247,,,247',
',,247,247,,,247,,,,,,247,,,,,,,,247,,,,,247,247,247,247,247,247,,,,247',
'247,,,,,,,247,,,247,247,247,,,247,247,248,248,248,,248,,,,248,248,,',
',248,,248,248,248,248,248,248,248,,,,,,248,248,248,248,248,248,248,',
',248,,,,,,,248,,,248,248,248,248,248,248,248,248,,248,248,248,,248,248',
',248,248,248,,,,,,,,,,,,,,,,,,,,248,,,248,,,248,248,,,248,,,,,,248,',
',,,,,,248,,,,,248,248,248,248,248,248,,,,248,248,,,,,,,248,,,248,248',
'248,,,248,248,249,249,249,,249,,,,249,249,,,,249,,249,249,249,249,249',
'249,249,,,,,,249,249,249,249,249,249,249,,,249,,,,,,,249,,,249,249,249',
'249,249,249,249,249,,249,249,249,,249,249,,249,249,249,,,,,,,,,,,,,',
',,,,,,249,,,249,,,249,249,,,249,,,,,,249,,,,,,,,249,,,,,249,249,249',
'249,249,249,,,,249,249,,,,,,,249,,,249,249,249,,,249,249,250,250,250',
',250,,,,250,250,,,,250,,250,250,250,250,250,250,250,,,,,,250,250,250',
'250,250,250,250,,,250,,,,,,,250,,,250,250,250,250,250,250,250,250,,250',
'250,250,,250,250,,250,250,250,,,,,,,,,,,,,,,,,,,,250,,,250,,,250,250',
',,250,,,,,,250,,,,,,,,250,,,,,250,250,250,250,250,250,,,,250,250,,,',
',,,250,,,250,250,250,,,250,250,251,251,251,,251,,,,251,251,,,,251,,251',
'251,251,251,251,251,251,,,,,,251,251,251,251,251,251,251,,,251,,,,,',
',251,,,251,251,251,251,251,251,251,251,,251,251,251,,251,251,,251,251',
'251,,,,,,,,,,,,,,,,,,,,251,,,251,,,251,251,,,251,,,,,,251,,,,,,,,251',
',,,,251,251,251,251,251,251,,,,251,251,,,,,,,251,,,251,251,251,,,251',
'251,252,252,252,,252,,,,252,252,,,,252,,252,252,252,252,252,252,252',
',,,,,252,252,252,252,252,252,252,,,252,,,,,,,252,,,252,252,252,252,252',
'252,252,252,,252,252,252,,252,252,,252,252,252,,,,,,,,,,,,,,,,,,,,252',
',,252,,,252,252,,,252,,,,,,252,,,,,,,,252,,,,,252,252,252,252,252,252',
',,,252,252,,,,,,,252,,,252,252,252,,,252,252,253,253,253,,253,,,,253',
'253,,,,253,,253,253,253,253,253,253,253,,,,,,253,253,253,253,253,253',
'253,,,253,,,,,,,253,,,253,253,253,253,253,253,253,253,,253,253,253,',
'253,253,,253,253,253,,,,,,,,,,,,,,,,,,,,253,,,253,,,253,253,,,253,,',
',,,253,,,,,,,,253,,,,,253,253,253,253,253,253,,,,253,253,,,,,,,253,',
',253,253,253,,,253,253,254,254,254,,254,,,,254,254,,,,254,,254,254,254',
'254,254,254,254,,,,,,254,254,254,254,254,254,254,,,254,,,,,,,254,,,254',
'254,254,254,254,254,254,254,,254,254,254,,254,254,,254,254,254,,,,,',
',,,,,,,,,,,,,,254,,,254,,,254,254,,,254,,,,,,254,,,,,,,,254,,,,,254',
'254,254,254,254,254,,,,254,254,,,,,,,254,,,254,254,254,,,254,254,255',
'255,255,,255,,,,255,255,,,,255,,255,255,255,255,255,255,255,,,,,,255',
'255,255,255,255,255,255,,,255,,,,,,,255,,,255,255,255,255,255,255,255',
'255,,255,255,255,,255,255,,255,255,255,,,,,,,,,,,,,,,,,,,,255,,,255',
',,255,255,,,255,,,,,,255,,,,,,,,255,,,,,255,255,255,255,255,255,,,,255',
'255,,,,,,,255,,,255,255,255,,,255,255,256,256,256,,256,,,,256,256,,',
',256,,256,256,256,256,256,256,256,,,,,,256,256,256,256,256,256,256,',
',256,,,,,,,256,,,256,256,256,256,256,256,256,256,,256,256,256,,256,256',
',256,256,256,,,,,,,,,,,,,,,,,,,,256,,,256,,,256,256,,,256,,,,,,256,',
',,,,,,256,,,,,256,256,256,256,256,256,,,,256,256,,,,,,,256,,,256,256',
'256,,,256,256,257,257,257,,257,,,,257,257,,,,257,,257,257,257,257,257',
'257,257,,,,,,257,257,257,257,257,257,257,,,257,,,,,,,257,,,257,257,257',
'257,257,257,257,257,,257,257,257,,257,257,,257,257,257,,,,,,,,,,,,,',
',,,,,,257,,,257,,,257,257,,,257,,,,,,257,,,,,,,,257,,,,,257,257,257',
'257,257,257,,,,257,257,,,,,,,257,,,257,257,257,,,257,257,258,258,258',
',258,,,,258,258,,,,258,,258,258,258,258,258,258,258,,,,,,258,258,258',
'258,258,258,258,,,258,,,,,,,258,,,258,258,258,258,258,258,258,258,,258',
'258,258,,258,258,,258,258,258,,,,,,,,,,,,,,,,,,,,258,,,258,,,258,258',
',,258,,,,,,258,,,,,,,,258,,,,,258,258,258,258,258,258,,,,258,258,,,',
',,,258,,,258,258,258,,,258,258,259,259,259,,259,,,,259,259,,,,259,,259',
'259,259,259,259,259,259,,,,,,259,259,259,259,259,259,259,,,259,,,,,',
',259,,,259,259,259,259,259,259,259,259,,259,259,259,,259,259,,259,259',
'259,,,,,,,,,,,,,,,,,,,,259,,,259,,,259,259,,,259,,,,,,259,,,,,,,,259',
',,,,259,259,259,259,259,259,,,,259,259,,,,,,,259,,,259,259,259,,,259',
'259,260,260,260,,260,,,,260,260,,,,260,,260,260,260,260,260,260,260',
',,,,,260,260,260,260,260,260,260,,,260,,,,,,,260,,,260,260,260,260,260',
'260,260,260,,260,260,260,,260,260,,260,260,260,,,,,,,,,,,,,,,,,,,,260',
',,260,,,260,260,,,260,,,,,,260,,,,,,,,260,,,,,260,260,260,260,260,260',
',,,260,260,,,,,,,260,,,260,260,260,,,260,260,267,267,267,,267,,,,267',
'267,,,,267,,267,267,267,267,267,267,267,,,,,,267,267,267,267,267,267',
'267,,,267,,,,,,,267,,,267,267,267,267,267,267,267,267,267,267,267,267',
',267,267,,267,267,267,,,,,,,,,,,,,,,,,,,,267,,,267,,,267,267,,,267,',
'267,,267,,267,,,,,,,,267,,,,,267,267,267,267,267,267,,,,267,267,,,,',
',,267,,267,267,267,267,,,267,267,273,273,273,,273,,,,273,273,,,,273',
',273,273,273,273,273,273,273,,,,,,273,273,273,273,273,273,273,,,273',
',,,,,,273,,,273,273,273,273,273,273,273,273,273,273,273,273,,273,273',
',273,273,273,,,,,,,,,,,,,,,,,,,,273,,,273,,,273,273,,,273,,273,,273',
',273,,,,,,,,273,,,,,273,273,273,273,273,273,,,,273,273,,,,,,,273,,273',
'273,273,273,,,273,273,276,276,276,,276,,,,276,276,,,,276,,276,276,276',
'276,276,276,276,,,,,,276,276,276,276,276,276,276,,,276,,,,,,,276,,,276',
'276,276,276,276,276,276,276,276,276,276,276,,276,276,,276,276,276,,',
',,,,,,,,,,,,,,,,,276,,,276,,,276,276,,,276,,276,,276,,276,,,,,,,,276',
',,,,276,276,276,276,276,276,,,,276,276,276,,,,,,276,,276,276,276,276',
',,276,276,283,283,283,,283,,,,283,283,,,,283,,283,283,283,283,283,283',
'283,,,,,,283,283,283,283,283,283,283,,,283,,,,,,,283,,,283,283,283,283',
'283,283,283,283,,283,283,283,,283,283,,283,283,283,,,,,,,,,,,,,,,,,',
',,283,,,283,,,283,283,,,283,,,,,,283,,,,,,,,283,,,,,283,283,283,283',
'283,283,,,,283,283,,,,,,,283,,,283,283,283,,,283,283,285,285,285,,285',
',,,285,285,,,,285,,285,285,285,285,285,285,285,,,,,,285,285,285,285',
'285,285,285,,,285,,,,,,,285,,,285,285,285,285,285,285,285,285,,285,285',
'285,,285,285,,285,285,285,,,,,,,,,,,,,,,,,,,,285,,,285,,,285,285,,,285',
',,,,,285,,,,,,,,285,,,,,285,285,285,285,285,285,,,,285,285,,,,,,,285',
',,285,285,285,,,285,285,288,288,288,,288,,,,288,288,,,,288,,288,288',
'288,288,288,288,288,,,,,,288,288,288,288,288,288,288,,,288,,,,,,,288',
',,288,288,288,288,288,288,288,288,,288,288,288,,288,288,,288,288,288',
',,,,,,,,,,,,,,,,,,,288,,,288,,,288,288,,,288,,,,,,288,,,,,,,,288,,,',
',288,288,288,288,288,288,,,,288,288,,,,,,,288,,,288,288,288,,,288,288',
'294,294,294,294,294,,,,294,294,,,,294,,294,294,294,294,294,294,294,',
',,,,294,294,294,294,294,294,294,,,294,,,,,,294,294,,294,294,294,294',
'294,294,294,294,294,,294,294,294,,294,294,,294,294,294,,,,,,,,,,,,,',
',,,,,,294,,,294,,,294,294,,,294,,294,,,,294,,,,,,,,294,,,,,294,294,294',
'294,294,294,,,,294,294,,,,,,,294,,,294,294,294,,,294,294,300,300,300',
',300,,,,300,300,,,,300,,300,300,300,300,300,300,300,,,,,,300,300,300',
'300,300,300,300,,,300,,,,,,,300,,,300,300,300,300,300,300,300,300,,300',
'300,300,,300,300,,,,300,,,,,,,,,,,,,,,,,,,,300,,,300,,,300,300,,,300',
',,,,,,,,,,,,,,,,,,300,300,300,300,300,300,,,,300,300,,,,300,,,300,,',
'300,300,300,,,300,300,317,317,317,,317,,,,317,317,,,,317,,317,317,317',
'317,317,317,317,,,,,,317,317,317,317,317,317,317,,,317,,,,,,,317,,,317',
'317,317,317,317,317,317,317,,317,317,317,,317,317,,,,317,,,,,,,,,,,',
',,,,,,,,317,,,317,,,317,317,,,317,,,,,,,,,,,,,,,,,,,317,317,317,317',
'317,317,,,,317,317,,,,,,,317,,,317,317,317,,,317,317,325,325,325,,325',
',,,325,325,,,,325,,325,325,325,325,325,325,325,,,,,,325,325,325,325',
'325,325,325,,,325,,,,,,,325,,,325,325,325,325,325,325,325,325,,325,325',
'325,,325,325,,325,325,325,,,,,,,,,,,,,,,,,,,,325,,,325,325,,325,325',
',,325,,,,,,325,,,,,,,,325,,,,,325,325,325,325,325,325,,,,325,325,,,',
',,,325,,,325,325,325,,,325,325,328,328,328,,328,,,,328,328,,,,328,,328',
'328,328,328,328,328,328,,,,,,328,328,328,328,328,328,328,,,328,,,,,',
',328,,,328,328,328,328,328,328,328,328,,328,328,328,,328,328,,328,328',
'328,,,,,,,,,,,,,,,,,,,,328,,,328,,,328,328,,,328,,,,,,328,,,,,,,,328',
',,,,328,328,328,328,328,328,,,,328,328,,,,,,,328,,,328,328,328,,,328',
'328,334,334,334,,334,,,,334,334,,,,334,,334,334,334,334,334,334,334',
',,,,,334,334,334,334,334,334,334,,,334,,,,,,,334,,,334,334,334,334,334',
'334,334,334,334,334,334,334,,334,334,,334,334,334,,,,,,,,,,,,,,,,,,',
',334,,,334,,,334,334,,,334,,,,,,334,,,,,,,,334,,,,,334,334,334,334,334',
'334,,,,334,334,,,,,,,334,,334,334,334,334,,,334,334,341,341,341,,341',
',,,341,341,,,,341,,341,341,341,341,341,341,341,,,,,,341,341,341,341',
'341,341,341,,,341,,,,,,,341,,,341,341,341,341,341,341,341,341,,341,341',
'341,,341,341,,341,341,341,,,,,,,,,,,,,,,,,,,,341,,,341,,,341,341,,,341',
',,,,,341,,,,,,,,341,,,,,341,341,341,341,341,341,,,,341,341,,,,,,,341',
',,341,341,341,,,341,341,342,342,342,,342,,,,342,342,,,,342,,342,342',
'342,342,342,342,342,,,,,,342,342,342,342,342,342,342,,,342,,,,,,,342',
',,342,342,342,342,342,342,342,342,,342,342,342,,342,342,,342,342,342',
',,,,,,,,,,,,,,,,,,,342,,,342,,,342,342,,,342,,,,,,342,,,,,,,,342,,,',
',342,342,342,342,342,342,,,,342,342,,,,,,,342,,,342,342,342,,,342,342',
'354,354,354,,354,,,,354,354,,,,354,,354,354,354,354,354,354,354,,,,',
',354,354,354,354,354,354,354,,,354,,,,,,,354,,,354,354,354,354,354,354',
'354,354,,354,354,354,,354,354,,,,354,,,,,,,,,,,,,,,,,,,,354,,,354,,',
'354,354,,,354,,,,,,,,,,,,,,,,,,,354,354,354,354,354,354,,,,354,354,',
',,,,,354,,,354,354,354,,,354,354,356,356,356,,356,,,,356,356,,,,356',
',356,356,356,356,356,356,356,,,,,,356,356,356,356,356,356,356,,,356',
',,,,,,356,,,356,356,356,356,356,356,356,356,,356,356,356,,356,356,,',
',356,,,,,,,,,,,,,,,,,,,,356,,,356,,,356,356,,,356,,,,,,,,,,,,,,,,,,',
'356,356,356,356,356,356,,,,356,356,,,,,,,356,,,356,356,356,,,356,356',
'414,414,414,,414,,,,414,414,,,,414,,414,414,414,414,414,414,414,,,,',
',414,414,414,414,414,414,414,,,414,,,,,,,414,,,414,414,414,414,414,414',
'414,414,,414,414,414,,414,414,,414,414,414,,,,,,,,,,,,,,,,,,,,414,,',
'414,,,414,414,,,414,,,,,,414,,,,,,,,414,,,,,414,414,414,414,414,414',
',,,414,414,,,,,,,414,,,414,414,414,,,414,414,452,452,452,,452,,,,452',
'452,,,,452,,452,452,452,452,452,452,452,,,,,,452,452,452,452,452,452',
'452,,,452,,,,,,,452,,,452,452,452,452,452,452,452,452,452,452,452,452',
',452,452,,452,452,452,,,,,,,,,,,,,,,,,,,,452,,,452,,,452,452,,,452,',
'452,,452,,452,,,,,,,,452,,,,,452,452,452,452,452,452,,,,452,452,,,,',
',,452,,452,452,452,452,,,452,452,454,454,454,,454,,,,454,454,,,,454',
',454,454,454,454,454,454,454,,,,,,454,454,454,454,454,454,454,,,454',
',,,,,,454,,,454,454,454,454,454,454,454,454,,454,454,454,,454,454,,454',
'454,454,,,,,,,,,,,,,,,,,,,,454,,,454,,,454,454,,,454,,,,,,454,,,,,,',
',454,,,,,454,454,454,454,454,454,,,,454,454,,,,,,,454,,,454,454,454',
',,454,454,455,455,455,,455,,,,455,455,,,,455,,455,455,455,455,455,455',
'455,,,,,,455,455,455,455,455,455,455,,,455,,,,,,,455,,,455,455,455,455',
'455,455,455,455,,455,455,455,,455,455,,455,455,455,,,,,,,,,,,,,,,,,',
',,455,,,455,,,455,455,,,455,,,,,,455,,,,,,,,455,,,,,455,455,455,455',
'455,455,,,,455,455,,,,,,,455,,,455,455,455,,,455,455,456,456,456,,456',
',,,456,456,,,,456,,456,456,456,456,456,456,456,,,,,,456,456,456,456',
'456,456,456,,,456,,,,,,,456,,,456,456,456,456,456,456,456,456,,456,456',
'456,,456,456,,456,456,456,,,,,,,,,,,,,,,,,,,,456,,,456,,,456,456,,,456',
',,,,,456,,,,,,,,456,,,,,456,456,456,456,456,456,,,,456,456,,,,,,,456',
',,456,456,456,,,456,456,497,497,497,,497,,,,497,497,,,,497,,497,497',
'497,497,497,497,497,,,,,,497,497,497,497,497,497,497,,,497,,,,,,,497',
',,497,497,497,497,497,497,497,497,497,497,497,497,,497,497,,497,497',
'497,,,,,,,,,,,,,,,,,,,,497,,,497,,,497,497,,,497,,497,,497,,497,,,,',
',,,497,,,,,497,497,497,497,497,497,,,,497,497,,,,,,,497,,497,497,497',
'497,,,497,497,500,500,500,,500,,,,500,500,,,,500,,500,500,500,500,500',
'500,500,,,,,,500,500,500,500,500,500,500,,,500,,,,,,,500,,,500,500,500',
'500,500,500,500,500,500,500,500,500,,500,500,,500,500,500,,,,,,,,,,',
',,,,,,,,,500,,,500,,,500,500,,,500,,,,500,,500,,,,,,,,500,,,,,500,500',
'500,500,500,500,,,,500,500,,,,,,,500,,500,500,500,500,,,500,500,502',
'502,502,,502,,,,502,502,,,,502,,502,502,502,502,502,502,502,,,,,,502',
'502,502,502,502,502,502,,,502,,,,,,,502,,,502,502,502,502,502,502,502',
'502,,502,502,502,,502,502,,502,502,502,,,,,,,,,,,,,,,,,,,,502,,,502',
',,502,502,,,502,,,,,,502,,,,,,,,502,,,,,502,502,502,502,502,502,,,,502',
'502,,,,,,,502,,,502,502,502,,,502,502,504,504,504,,504,,,,504,504,,',
',504,,504,504,504,504,504,504,504,,,,,,504,504,504,504,504,504,504,',
',504,,,,,,,504,,,504,504,504,504,504,504,504,504,,504,504,504,,504,504',
',504,504,504,,,,,,,,,,,,,,,,,,,,504,,,504,,,504,504,,,504,,,,,,504,',
',,,,,,504,,,,,504,504,504,504,504,504,,,,504,504,,,,,,,504,,,504,504',
'504,,,504,504,507,507,507,507,507,,,,507,507,,,,507,,507,507,507,507',
'507,507,507,,,,,,507,507,507,507,507,507,507,,,507,,,,,,507,507,,507',
'507,507,507,507,507,507,507,507,,507,507,507,,507,507,,507,507,507,',
',,,,,,,,,,,,,,,,,,507,,,507,,,507,507,,,507,,507,,,,507,,,,,,,,507,',
',,,507,507,507,507,507,507,,,,507,507,,,,,,507,507,,,507,507,507,,,507',
'507,514,514,514,,514,,,,514,514,,,,514,,514,514,514,514,514,514,514',
',,,,,514,514,514,514,514,514,514,,,514,,,,,,,514,,,514,514,514,514,514',
'514,514,514,,514,514,514,,514,514,,,,514,,,,,,,,,,,,,,,,,,,,514,,,514',
',,514,514,,,514,,,,,,,,,,,,,,,,,,,514,514,514,514,514,514,,,,514,514',
',,,,,,514,,,514,514,514,,,514,514,516,516,516,,516,,,,516,516,,,,516',
',516,516,516,516,516,516,516,,,,,,516,516,516,516,516,516,516,,,516',
',,,,,,516,,,516,516,516,516,516,516,516,516,516,516,516,516,,516,516',
',516,516,516,,,,,,,,,,,,,,,,,,,,516,,,516,,,516,516,,,516,,516,,516',
',516,,,,,,,,516,,,,,516,516,516,516,516,516,,,,516,516,,,,,,,516,,516',
'516,516,516,,,516,516,522,522,522,,522,,,,522,522,,,,522,,522,522,522',
'522,522,522,522,,,,,,522,522,522,522,522,522,522,,,522,,,,,,,522,,,522',
'522,522,522,522,522,522,522,,522,522,522,,522,522,,,,522,,,,,,,,,,,',
',,,,,,,,522,,,522,,,522,522,,,522,,,,,,,,,,,,,,,,,,,522,522,522,522',
'522,522,,,,522,522,,,,,,,522,,,522,522,522,,,522,522,525,525,525,,525',
',,,525,525,,,,525,,525,525,525,525,525,525,525,,,,,,525,525,525,525',
'525,525,525,,,525,,,,,,,525,,,525,525,525,525,525,525,525,525,,525,525',
'525,,525,525,,525,525,525,,,,,,,,,,,,,,,,,,,,525,,,525,,,525,525,,,525',
',,,,,525,,,,,,,,525,,,,,525,525,525,525,525,525,,,,525,525,,,,,,,525',
',,525,525,525,,,525,525,526,526,526,,526,,,,526,526,,,,526,,526,526',
'526,526,526,526,526,,,,,,526,526,526,526,526,526,526,,,526,,,,,,,526',
',,526,526,526,526,526,526,526,526,,526,526,526,,526,526,,526,526,526',
',,,,,,,,,,,,,,,,,,,526,,,526,,,526,526,,,526,,,,,,526,,,,,,,,526,,,',
',526,526,526,526,526,526,,,,526,526,,,,,,,526,,,526,526,526,,,526,526',
'530,530,530,,530,,,,530,530,,,,530,,530,530,530,530,530,530,530,,,,',
',530,530,530,530,530,530,530,,,530,,,,,,,530,,,530,530,530,530,530,530',
'530,530,,530,530,530,,530,530,,530,530,530,,,,,,,,,,,,,,,,,,,,530,,',
'530,,,530,530,,,530,,,,,,530,,,,,,,,530,,,,,530,530,530,530,530,530',
',,,530,530,,,,,,,530,,,530,530,530,,,530,530,536,536,536,,536,,,,536',
'536,,,,536,,536,536,536,536,536,536,536,,,,,,536,536,536,536,536,536',
'536,,,536,,,,,,,536,,,536,536,536,536,536,536,536,536,536,536,536,536',
',536,536,,536,536,536,,,,,,,,,,,,,,,,,,,,536,,,536,,,536,536,,,536,',
'536,,,,536,,,,,,,,536,,,,,536,536,536,536,536,536,,,,536,536,,,,,,,536',
',536,536,536,536,,,536,536,539,539,539,,539,,,,539,539,,,,539,,539,539',
'539,539,539,539,539,,,,,,539,539,539,539,539,539,539,,,539,,,,,,,539',
',,539,539,539,539,539,539,539,539,539,539,539,539,,539,539,,539,539',
'539,,,,,,,,,,,,,,,,,,,,539,,,539,,,539,539,,,539,,,,,,539,,,,,,,,539',
',,,,539,539,539,539,539,539,,,,539,539,,,,,,,539,,539,539,539,539,,',
'539,539,565,565,565,,565,,,,565,565,,,,565,,565,565,565,565,565,565',
'565,,,,,,565,565,565,565,565,565,565,,,565,,,,,,,565,,,565,565,565,565',
'565,565,565,565,,565,565,565,,565,565,,565,565,565,,,,,,,,,,,,,,,,,',
',,565,,,565,,,565,565,,,565,,,,,,565,,,,,,,,565,,,,,565,565,565,565',
'565,565,,,,565,565,,,,,,,565,,,565,565,565,,,565,565,586,586,586,,586',
',,,586,586,,,,586,,586,586,586,586,586,586,586,,,,,,586,586,586,586',
'586,586,586,,,586,,,,,,,586,,,586,586,586,586,586,586,586,586,586,586',
'586,586,,586,586,,586,586,586,,,,,,,,,,,,,,,,,,,,586,,,586,,,586,586',
',,586,,586,,586,,586,,,,,,,,586,,,,,586,586,586,586,586,586,,,,586,586',
',,,,,,586,,586,586,586,586,,,586,586,598,598,598,,598,,,,598,598,,,',
'598,,598,598,598,598,598,598,598,,,,,,598,598,598,598,598,598,598,,',
'598,,,,,,,598,,,598,598,598,598,598,598,598,598,,598,598,598,,598,598',
',598,598,598,,,,,,,,,,,,,,,,,,,,598,,,598,,,598,598,,,598,,,,,,598,',
',,,,,,598,,,,,598,598,598,598,598,598,,,,598,598,,,,,,,598,,,598,598',
'598,,,598,598,602,602,602,,602,,,,602,602,,,,602,,602,602,602,602,602',
'602,602,,,,,,602,602,602,602,602,602,602,,,602,,,,,,,602,,,602,602,602',
'602,602,602,602,602,,602,602,602,,602,602,,602,602,602,,,,,,,,,,,,,',
',,,,,,602,,,602,,,602,602,,,602,,,,,,602,,,,,,,,602,,,,,602,602,602',
'602,602,602,,,,602,602,,,,,,,602,,,602,602,602,,,602,602,631,631,631',
',631,,,,631,631,,,,631,,631,631,631,631,631,631,631,,,,,,631,631,631',
'631,631,631,631,,,631,,,,,,,631,,,631,631,631,631,631,631,631,631,,631',
'631,631,,631,631,,631,631,631,,,,,,,,,,,,,,,,,,,,631,,,631,,,631,631',
',,631,,631,,,,631,,,,,,,,631,,,,,631,631,631,631,631,631,,,,631,631',
',,,,,,631,,,631,631,631,,,631,631,632,632,632,,632,,,,632,632,,,,632',
',632,632,632,632,632,632,632,,,,,,632,632,632,632,632,632,632,,,632',
',,,,,,632,,,632,632,632,632,632,632,632,632,,632,632,632,,632,632,,632',
'632,632,,,,,,,,,,,,,,,,,,,,632,,,632,,,632,632,,,632,,,,,,632,,,,,,',
',632,,,,,632,632,632,632,632,632,,,,632,632,,,,,,,632,,,632,632,632',
',,632,632,635,635,635,,635,,,,635,635,,,,635,,635,635,635,635,635,635',
'635,,,,,,635,635,635,635,635,635,635,,,635,,,,,,,635,,,635,635,635,635',
'635,635,635,635,635,635,635,635,,635,635,,635,635,635,,,,,,,,,,,,,,',
',,,,,635,,,635,,,635,635,,,635,,635,,635,,635,,,,,,,,635,,,,,635,635',
'635,635,635,635,,,,635,635,,,,,,,635,,635,635,635,635,,,635,635,636',
'636,636,,636,,,,636,636,,,,636,,636,636,636,636,636,636,636,,,,,,636',
'636,636,636,636,636,636,,,636,,,,,,,636,,,636,636,636,636,636,636,636',
'636,636,636,636,636,,636,636,,636,636,636,,,,,,,,,,,,,,,,,,,,636,,,636',
',,636,636,,,636,,,,636,,636,,,,,,,,636,,,,,636,636,636,636,636,636,',
',,636,636,,,,,,,636,,636,636,636,636,,,636,636,637,637,637,,637,,,,637',
'637,,,,637,,637,637,637,637,637,637,637,,,,,,637,637,637,637,637,637',
'637,,,637,,,,,,,637,,,637,637,637,637,637,637,637,637,,637,637,637,',
'637,637,,637,637,637,,,,,,,,,,,,,,,,,,,,637,,,637,,,637,637,,,637,,',
',,,637,,,,,,,,637,,,,,637,637,637,637,637,637,,,,637,637,,,,,,,637,',
',637,637,637,,,637,637,638,638,638,,638,,,,638,638,,,,638,,638,638,638',
'638,638,638,638,,,,,,638,638,638,638,638,638,638,,,638,,,,,,,638,,,638',
'638,638,638,638,638,638,638,,638,638,638,,638,638,,638,638,638,,,,,',
',,,,,,,,,,,,,,638,,,638,,,638,638,,,638,,,,,,638,,,,,,,,638,,,,,638',
'638,638,638,638,638,,,,638,638,,,,,,,638,,,638,638,638,,,638,638,643',
'643,643,,643,,,,643,643,,,,643,,643,643,643,643,643,643,643,,,,,,643',
'643,643,643,643,643,643,,,643,,,,,,,643,,,643,643,643,643,643,643,643',
'643,,643,643,643,,643,643,,643,643,643,,,,,,,,,,,,,,,,,,,,643,,,643',
',,643,643,,,643,,,,,,643,,,,,,,,643,,,,,643,643,643,643,643,643,,,,643',
'643,,,,,,,643,,,643,643,643,,,643,643,644,644,644,,644,,,,644,644,,',
',644,,644,644,644,644,644,644,644,,,,,,644,644,644,644,644,644,644,',
',644,,,,,,,644,,,644,644,644,644,644,644,644,644,,644,644,644,,644,644',
',644,644,644,,,,,,,,,,,,,,,,,,,,644,,,644,,,644,644,,,644,,,,,,644,',
',,,,,,644,,,,,644,644,644,644,644,644,,,,644,644,,,,,,,644,,,644,644',
'644,,,644,644,647,647,647,,647,,,,647,647,,,,647,,647,647,647,647,647',
'647,647,,,,,,647,647,647,647,647,647,647,,,647,,,,,,,647,,,647,647,647',
'647,647,647,647,647,,647,647,647,,647,647,,647,647,647,,,,,,,,,,,,,',
',,,,,,647,,,647,,,647,647,,,647,,,,,,647,,,,,,,,647,,,,,647,647,647',
'647,647,647,,,,647,647,,,,,,,647,,,647,647,647,,,647,647,648,648,648',
',648,,,,648,648,,,,648,,648,648,648,648,648,648,648,,,,,,648,648,648',
'648,648,648,648,,,648,,,,,,,648,,,648,648,648,648,648,648,648,648,,648',
'648,648,,648,648,,648,648,648,,,,,,,,,,,,,,,,,,,,648,,,648,,,648,648',
',,648,,,,,,648,,,,,,,,648,,,,,648,648,648,648,648,648,,,,648,648,,,',
',,,648,,,648,648,648,,,648,648,672,672,672,,672,,,,672,672,,,,672,,672',
'672,672,672,672,672,672,,,,,,672,672,672,672,672,672,672,,,672,,,,,',
',672,,,672,672,672,672,672,672,672,672,,672,672,672,,672,672,,672,672',
'672,,,,,,,,,,,,,,,,,,,,672,,,672,,,672,672,,,672,,,,,,672,,,,,,,,672',
',,,,672,672,672,672,672,672,,,,672,672,,,,,,,672,,,672,672,672,,,672',
'672,678,678,678,,678,,,,678,678,,,,678,,678,678,678,678,678,678,678',
',,,,,678,678,678,678,678,678,678,,,678,,,,,,,678,,,678,678,678,678,678',
'678,678,678,,678,678,678,,678,678,,,,678,,,,,,,,,,,,,,,,,,,,678,,,678',
',,678,678,,,678,,,,,,,,,,,,,,,,,,,678,678,678,678,678,678,,,,678,678',
',,,,,,678,,,678,678,678,,,678,678,689,689,689,,689,,,,689,689,,,,689',
',689,689,689,689,689,689,689,,,,,,689,689,689,689,689,689,689,,,689',
',,,,,,689,,,689,689,689,689,689,689,689,689,,689,689,689,,689,689,,',
',689,,,,,,,,,,,,,,,,,,,,689,,,689,,,689,689,,,689,,,,,,,,,,,,,,,,,,',
'689,689,689,689,689,689,,,,689,689,,,,,,,689,,,689,689,689,,,689,689',
'694,694,694,,694,,,,694,694,,,,694,,694,694,694,694,694,694,694,,,,',
',694,694,694,694,694,694,694,,,694,,,,,,,694,,,694,694,694,694,694,694',
'694,694,,694,694,694,,694,694,,694,694,694,,,,,,,,,,,,,,,,,,,,694,,',
'694,,,694,694,,,694,,694,,,,694,,,,,,,,694,,,,,694,694,694,694,694,694',
',,,694,694,,,,,,,694,,,694,694,694,,,694,694,714,714,714,,714,,,,714',
'714,,,,714,,714,714,714,714,714,714,714,,,,,,714,714,714,714,714,714',
'714,,,714,,,,,,,714,,,714,714,714,714,714,714,714,714,,714,714,714,',
'714,714,,714,714,714,,,,,,,,,,,,,,,,,,,,714,,,714,,,714,714,,,714,,',
',,,714,,,,,,,,714,,,,,714,714,714,714,714,714,,,,714,714,,,,,,,714,',
',714,714,714,,,714,714,734,734,734,,734,,,,734,734,,,,734,,734,734,734',
'734,734,734,734,,,,,,734,734,734,734,734,734,734,,,734,,,,,,,734,,,734',
'734,734,734,734,734,734,734,,734,734,734,,734,734,,734,734,734,,,,,',
',,,,,,,,,,,,,,734,,,734,,,734,734,,,734,,734,,,,734,,,,,,,,734,,,,,734',
'734,734,734,734,734,,,,734,734,,,,,,,734,,,734,734,734,,,734,734,740',
'740,740,,740,,,,740,740,,,,740,,740,740,740,740,740,740,740,,,,,,740',
'740,740,740,740,740,740,,,740,,,,,,,740,,,740,740,740,740,740,740,740',
'740,,740,740,740,,740,740,,740,740,740,,,,,,,,,,,,,,,,,,,,740,,,740',
',,740,740,,,740,,,,,,740,,,,,,,,740,,,,,740,740,740,740,740,740,,,,740',
'740,,,,,,,740,,,740,740,740,,,740,740,746,746,746,,746,,,,746,746,,',
',746,,746,746,746,746,746,746,746,,,,,,746,746,746,746,746,746,746,',
',746,,,,,,,746,,,746,746,746,746,746,746,746,746,746,746,746,746,,746',
'746,,746,746,746,,,,,,,,,,,,,,,,,,,,746,,,746,,,746,746,,,746,,746,',
'746,,746,,,,,,,,746,,,,,746,746,746,746,746,746,,,,746,746,,,,,,,746',
',746,746,746,746,,,746,746,768,768,768,,768,,,,768,768,,,,768,,768,768',
'768,768,768,768,768,,,,,,768,768,768,768,768,768,768,,,768,,,,,,,768',
',,768,768,768,768,768,768,768,768,,768,768,768,,768,768,,768,768,768',
',,,,,,,,,,,,,,,,,,,768,,,768,,,768,768,,,768,,,,,,768,,,,,,,,768,,,',
',768,768,768,768,768,768,,,,768,768,,,,,,,768,,,768,768,768,,,768,768',
'770,770,770,,770,,,,770,770,,,,770,,770,770,770,770,770,770,770,,,,',
',770,770,770,770,770,770,770,,,770,,,,,,,770,,,770,770,770,770,770,770',
'770,770,,770,770,770,,770,770,,770,770,770,,,,,,,,,,,,,,,,,,,,770,,',
'770,,,770,770,,,770,,,,,,770,,,,,,,,770,,,,,770,770,770,770,770,770',
',,,770,770,,,,,,,770,,,770,770,770,,,770,770,784,784,784,,784,,,,784',
'784,,,,784,,784,784,784,784,784,784,784,,,,,,784,784,784,784,784,784',
'784,,,784,,,,,,,784,,,784,784,784,784,784,784,784,784,,784,784,784,',
'784,784,,784,784,784,,,,,,,,,,,,,,,,,,,,784,,,784,,,784,784,,,784,,',
',,,784,,,,,,,,784,,,,,784,784,784,784,784,784,,,,784,784,,,,,,,784,',
',784,784,784,,,784,784,785,785,785,,785,,,,785,785,,,,785,,785,785,785',
'785,785,785,785,,,,,,785,785,785,785,785,785,785,,,785,,,,,,,785,,,785',
'785,785,785,785,785,785,785,,785,785,785,,785,785,,785,785,785,,,,,',
',,,,,,,,,,,,,,785,,,785,,,785,785,,,785,,,,,,785,,,,,,,,785,,,,,785',
'785,785,785,785,785,,,,785,785,,,,,,,785,,,785,785,785,,,785,785,786',
'786,786,,786,,,,786,786,,,,786,,786,786,786,786,786,786,786,,,,,,786',
'786,786,786,786,786,786,,,786,,,,,,,786,,,786,786,786,786,786,786,786',
'786,,786,786,786,,786,786,,786,786,786,,,,,,,,,,,,,,,,,,,,786,,,786',
',,786,786,,,786,,,,,,786,,,,,,,,786,,,,,786,786,786,786,786,786,,,,786',
'786,,,,,,,786,,,786,786,786,,,786,786,787,787,787,,787,,,,787,787,,',
',787,,787,787,787,787,787,787,787,,,,,,787,787,787,787,787,787,787,',
',787,,,,,,,787,,,787,787,787,787,787,787,787,787,,787,787,787,,787,787',
',787,787,787,,,,,,,,,,,,,,,,,,,,787,,,787,,,787,787,,,787,,,,,,787,',
',,,,,,787,,,,,787,787,787,787,787,787,,,,787,787,,,,,,,787,,,787,787',
'787,,,787,787,789,789,789,,789,,,,789,789,,,,789,,789,789,789,789,789',
'789,789,,,,,,789,789,789,789,789,789,789,,,789,,,,,,,789,,,789,789,789',
'789,789,789,789,789,,789,789,789,,789,789,,789,789,789,,,,,,,,,,,,,',
',,,,,,789,,,789,,,789,789,,,789,,,,,,789,,,,,,,,789,,,,,789,789,789',
'789,789,789,,,,789,789,,,,,,,789,,,789,789,789,,,789,789,801,801,801',
',801,,,,801,801,,,,801,,801,801,801,801,801,801,801,,,,,,801,801,801',
'801,801,801,801,,,801,,,,,,,801,,,801,801,801,801,801,801,801,801,,801',
'801,801,,801,801,,,,801,,,,,,,,,,,,,,,,,,,,801,,,801,,,801,801,,,801',
',,,,,,,,,,,,,,,,,,801,801,801,801,801,801,,,,801,801,,,,,,,801,,,801',
'801,801,,,801,801,848,848,848,,848,,,,848,848,,,,848,,848,848,848,848',
'848,848,848,,,,,,848,848,848,848,848,848,848,,,848,,,,,,,848,,,848,848',
'848,848,848,848,848,848,,848,848,848,,848,848,,848,848,848,,,,,,,,,',
',,,,,,,,,,848,,,848,,,848,848,,,848,,,,,,848,,,,,,,,848,,,,,848,848',
'848,848,848,848,,,,848,848,,,,,,,848,,,848,848,848,,,848,848,861,861',
'861,,861,,,,861,861,,,,861,,861,861,861,861,861,861,861,,,,,,861,861',
'861,861,861,861,861,,,861,,,,,,,861,,,861,861,861,861,861,861,861,861',
',861,861,861,,861,861,,861,861,861,,,,,,,,,,,,,,,,,,,,861,,,861,,,861',
'861,,,861,,,,,,861,,,,,,,,861,,,,,861,861,861,861,861,861,,,,861,861',
',,,,,,861,,,861,861,861,,,861,861,879,879,879,,879,,,,879,879,,,,879',
',879,879,879,879,879,879,879,,,,,,879,879,879,879,879,879,879,,,879',
',,,,,,879,,,879,879,879,879,879,879,879,879,879,879,879,879,,879,879',
',879,879,879,,,,,,,,,,,,,,,,,,,,879,,,879,,,879,879,,,879,,,,879,,879',
',,,,,,,879,,,,,879,879,879,879,879,879,,,,879,879,,,,,,,879,,879,879',
'879,879,,,879,879,880,880,880,,880,,,,880,880,,,,880,,880,880,880,880',
'880,880,880,,,,,,880,880,880,880,880,880,880,,,880,,,,,,,880,,,880,880',
'880,880,880,880,880,880,,880,880,880,,880,880,,880,880,880,,,,,,,,,',
',,,,,,,,,,880,,,880,,,880,880,,,880,,,,,,880,,,,,,,,880,,,,,880,880',
'880,880,880,880,,,,880,880,,,,,,,880,,,880,880,880,,,880,880,895,895',
'895,,895,,,,895,895,,,,895,,895,895,895,895,895,895,895,,,,,,895,895',
'895,895,895,895,895,,,895,,,,,,,895,,,895,895,895,895,895,895,895,895',
',895,895,895,,895,895,,,,895,,,,,,,,,,,,,,,,,,,,895,,,895,,,895,895',
',,895,,,,,,,,,,,,,,,,,,,895,895,895,895,895,895,,,,895,895,,,,,,,895',
',,895,895,895,,,895,895,907,907,907,,907,,,,907,907,,,,907,,907,907',
'907,907,907,907,907,,,,,,907,907,907,907,907,907,907,,,907,,,,,,,907',
',,907,907,907,907,907,907,907,907,,907,907,907,,907,907,,,,907,,,,,',
',,,,,,,,,,,,,,907,,,907,,,907,907,,,907,,,,,,,,,,,,,,,,,,,907,907,907',
'907,907,907,,,,907,907,,,,,,,907,,,907,907,907,,,907,907,932,932,932',
',932,,,,932,932,,,,932,,932,932,932,932,932,932,932,,,,,,932,932,932',
'932,932,932,932,,,932,,,,,,,932,,,932,932,932,932,932,932,932,932,,932',
'932,932,,932,932,,932,932,932,,,,,,,,,,,,,,,,,,,,932,,,932,,,932,932',
',,932,,932,,,,932,,,,,,,,932,,,,,932,932,932,932,932,932,,,,932,932',
',,,,,,932,,,932,932,932,,,932,932,1007,1007,1007,,1007,,,,1007,1007',
',,,1007,,1007,1007,1007,1007,1007,1007,1007,,,,,,1007,1007,1007,1007',
'1007,1007,1007,,,1007,,,,,,,1007,,,1007,1007,1007,1007,1007,1007,1007',
'1007,1007,1007,1007,1007,,1007,1007,,1007,1007,1007,,,,,,,,,,,,,,,,',
',,,1007,,,1007,,,1007,1007,,,1007,,1007,,1007,,1007,,,,,,,,1007,,,,',
'1007,1007,1007,1007,1007,1007,,,,1007,1007,,,,,,,1007,,1007,1007,1007',
'1007,59,,1007,1007,,,,59,59,59,,,59,59,59,546,59,546,546,546,546,546',
',,,,59,59,59,,,546,,,,,59,59,,59,59,59,59,59,,,,,,,,,,546,,,,,,,,,546',
'546,546,546,,59,59,59,59,59,59,59,59,59,59,59,59,59,59,,,59,59,59,,',
'59,,,59,,,59,59,,59,546,59,,59,,59,59,59,59,59,59,59,,59,,59,,,,,,,',
',,,,,59,59,59,59,435,59,,59,,,,435,435,435,,,435,435,435,600,435,600',
'600,600,600,600,,,,435,435,435,435,,,600,,,,,435,435,,435,435,435,435',
'435,,,,,,,,,,600,600,,,,,,,,600,600,600,600,,435,435,435,435,435,435',
'435,435,435,435,435,435,435,435,,,435,435,435,,,435,,,435,,,435,435',
',435,600,435,,435,,435,435,435,435,435,435,435,,435,435,435,,,,,,,,',
',,,,435,435,435,435,436,435,,435,,,,436,436,436,,,436,436,436,659,436',
'659,659,659,659,659,,,,436,436,436,436,,,659,,,,,436,436,,436,436,436',
'436,436,,,,,,,,,,659,,,,,,,,,659,659,659,659,,436,436,436,436,436,436',
'436,436,436,436,436,436,436,436,,,436,436,436,,,436,,659,436,,,436,436',
',436,659,436,,436,,436,436,436,436,436,436,436,,436,436,436,,,,,,,,',
',,,,436,436,436,436,,436,,436,11,11,11,11,11,11,11,11,11,11,11,11,11',
'11,11,11,11,11,11,11,11,11,11,11,,,,11,11,11,11,11,11,11,11,11,11,,',
',,,11,11,11,11,11,11,11,11,11,11,,11,,,,,,,,,11,11,,11,11,11,11,11,11',
'11,,,11,11,,,,11,11,11,11,,,,,,,,,,,,,,11,11,,11,11,11,11,11,11,11,11',
'11,11,11,,,11,11,,,,,,,,,,11,,,,,,,,,11,12,12,12,12,12,12,12,12,12,12',
'12,12,12,12,12,12,12,12,12,12,12,12,12,12,,,,12,12,12,12,12,12,12,12',
'12,12,,,,,,12,12,12,12,12,12,12,12,12,,,12,,,,,,,,,12,12,,12,12,12,12',
'12,12,12,,,12,12,,,,12,12,12,12,,,,,,,,,,,,,,12,12,,12,12,12,12,12,12',
'12,12,12,12,12,,,12,12,,,,,,,,,,12,,,,,,,,,12,74,74,74,74,74,74,74,74',
'74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,,,,74,74,74,74,74,74',
'74,74,74,74,,,,,,74,74,74,74,74,74,74,74,74,74,74,74,,74,,,,,,,74,74',
',74,74,74,74,74,74,74,,,74,74,,,,74,74,74,74,,,,,,74,,,,,,,,74,74,,74',
'74,74,74,74,74,74,74,74,74,74,,,74,,,,,,,,,,,,,,,,,,,,74,91,91,91,91',
'91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,,,,91,91',
'91,91,91,91,91,91,91,91,,,,,,91,91,91,91,91,91,91,91,91,91,91,91,,91',
',,,,,,91,91,,91,91,91,91,91,91,91,,,91,91,,,,91,91,91,91,,,,,,,,,,,',
',,91,91,,91,91,91,91,91,91,91,91,91,91,91,,,91,,,,,,,,,,,,,,,,,,,,91',
'405,405,405,405,405,405,405,405,405,405,405,405,405,405,405,405,405',
'405,405,405,405,405,405,405,,,,405,405,405,405,405,405,405,405,405,405',
',,,,,405,405,405,405,405,405,405,405,405,,,405,,,,,,,,,405,405,,405',
'405,405,405,405,405,405,,,405,405,,,,405,405,405,405,,,,,,,,,,,,,,405',
'405,,405,405,405,405,405,405,405,405,405,405,405,,,405,405,,,,,,,,,',
'405,,,,,,,,,405,628,628,628,628,628,628,628,628,628,628,628,628,628',
'628,628,628,628,628,628,628,628,628,628,628,,,,628,628,628,628,628,628',
'628,628,628,628,,,,,,628,628,628,628,628,628,628,628,628,,,628,,,,,',
',,,628,628,,628,628,628,628,628,628,628,,,628,628,,,,628,628,628,628',
',,,,,,,,,,,,,628,628,,628,628,628,628,628,628,628,628,628,628,628,,',
'628,628,,,,,,,,,,628,,,,,,,,,628,756,756,756,756,756,756,756,756,756',
'756,756,756,756,756,756,756,756,756,756,756,756,756,756,756,,,,756,756',
'756,756,756,756,756,756,756,756,,,,,,756,756,756,756,756,756,756,756',
'756,,,756,,,,,,,,,756,756,,756,756,756,756,756,756,756,,,756,756,,,',
'756,756,756,756,,,,,,,,,,,,,,756,756,,756,756,756,756,756,756,756,756',
'756,756,756,30,,756,,,,,30,30,30,,,30,30,30,708,30,708,708,708,708,708',
'756,,,30,30,30,,,,708,,,,,30,30,,30,30,30,30,30,,,,,,,,,,708,,,,,,,',
',708,708,708,708,,30,30,30,30,30,30,30,30,30,30,30,30,30,30,,,30,30',
'30,,,30,,30,30,,,30,30,,30,708,30,,30,,30,30,30,30,30,30,30,,30,30,30',
',,,,,,,,,,,31,30,30,,30,,30,31,31,31,,,31,31,31,710,31,710,710,710,710',
'710,,,,,31,31,,,,710,,,,,31,31,,31,31,31,31,31,,,,,,,,,,710,,,,,,,,',
'710,710,710,710,,31,31,31,31,31,31,31,31,31,31,31,31,31,31,,,31,31,31',
',,31,,31,31,,,31,31,,31,710,31,,31,,31,31,31,31,31,31,31,,31,,31,,,',
',,,,,,,,426,31,31,,31,,31,426,426,426,,,426,426,426,712,426,712,712',
'712,712,712,,,,426,426,426,,,,712,,,,,426,426,,426,426,426,426,426,',
',,,,,,,,712,,,,,,,,,,,712,712,,426,426,426,426,426,426,426,426,426,426',
'426,426,426,426,,,426,426,426,,,426,,426,426,,,426,426,,426,712,426',
',426,,426,426,426,426,426,426,426,,426,426,426,,,,,,,,,,,,484,426,426',
',426,,426,484,484,484,,,484,484,484,754,484,754,754,754,754,754,,,,484',
'484,,,,,754,,,,,484,484,,484,484,484,484,484,,,,,,,,,,754,,890,,890',
'890,890,890,890,754,754,754,754,,,,,,890,,,,,,,484,,,,,,,484,,,,,484',
'484,,890,,,,,754,,,,213,213,890,890,213,,,,,,484,484,,213,213,,213,213',
'213,213,213,213,213,,484,213,213,,,484,213,213,213,213,,,890,,,213,',
',,,,,,213,213,,213,213,213,213,213,213,213,213,213,213,213,,,213,,,',
',214,214,,,214,,,,,,,,,214,214,213,214,214,214,214,214,214,214,,,214',
'214,,,,214,214,214,214,,,,,,214,,,,,,,,214,214,,214,214,214,214,214',
'214,214,214,214,214,214,,,214,,,,,263,263,,,263,,,,,,,,,263,263,214',
'263,263,263,263,263,263,263,,,263,263,,,,263,263,263,263,,,,,,,,,,,',
',,263,263,,263,263,263,263,263,263,263,263,263,263,263,,,263,,,,,450',
'450,,,450,,,,,,,,,450,450,263,450,450,450,450,450,450,450,,,450,450',
',,,450,450,450,450,,,,,,450,,,,,,,,450,450,,450,450,450,450,450,450',
'450,450,450,450,450,,,450,,,,,451,451,,,451,,,,,,,,,451,451,450,451',
'451,451,451,451,451,451,,,451,451,,,,451,451,451,451,,,,,,451,,,,,,',
',451,451,,451,451,451,451,451,451,451,451,451,451,451,,,451,,,,,517',
'517,,,517,,,,,,,,,517,517,451,517,517,517,517,517,517,517,,,517,517',
',,,517,517,517,517,,,,,,517,,,,,,,,517,517,,517,517,517,517,517,517',
'517,517,517,517,517,,,517,,,,,518,518,,,518,,,,,,,,,518,518,517,518',
'518,518,518,518,518,518,,,518,518,,,,518,518,518,518,,,,,,518,,,,,,',
',518,518,,518,518,518,518,518,518,518,518,518,518,518,,,518,,,,,527',
'527,,,527,,,,,,,,,527,527,518,527,527,527,527,527,527,527,,,527,527',
',,,527,527,527,527,,,,,,527,,,,,,,,527,527,,527,527,527,527,527,527',
'527,527,527,527,527,,,527,,,,,528,528,,,528,,,,,,,,,528,528,527,528',
'528,528,528,528,528,528,,,528,528,,,,528,528,528,528,,,,,,528,,,,,,',
',528,528,,528,528,528,528,528,528,528,528,528,528,528,,,528,,,,,587',
'587,,,587,,,,,,,,,587,587,528,587,587,587,587,587,587,587,,,587,587',
',,,587,587,587,587,,,,,,587,,,,,,,,587,587,,587,587,587,587,587,587',
'587,587,587,587,587,,,587,,,,,588,588,,,588,,,,,,,,,588,588,587,588',
'588,588,588,588,588,588,,,588,588,,,,588,588,588,588,,,,,,588,,,,,,',
',588,588,,588,588,588,588,588,588,588,588,588,588,588,,,588,,,,,744',
'744,,,744,,,,,,,,,744,744,588,744,744,744,744,744,744,744,,,744,744',
',,,744,744,744,744,,,,,,744,,,,,,,,744,744,,744,744,744,744,744,744',
'744,744,744,744,744,,,744,,,,,745,745,,,745,,,,,,,,,745,745,744,745',
'745,745,745,745,745,745,,,745,745,,,,745,745,745,745,,,,,,745,,,,,,',
',745,745,,745,745,745,745,745,745,745,745,745,745,745,,885,745,885,885',
'885,885,885,888,,888,888,888,888,888,,,885,,,,,745,,888,913,,913,913',
'913,913,913,,,,,,,,885,,913,,,,,888,,885,885,885,885,,,,888,888,888',
'888,,,,915,913,915,915,915,915,915,,,,913,913,913,913,,917,915,917,917',
'917,917,917,885,,,,,,,888,,917,,,,,,,915,919,,919,919,919,919,919,913',
',,915,915,,,917,942,919,942,942,942,942,942,,,,917,917,,,,,942,,,,,',
',919,,,,,,915,,,,,919,919,,,942,942,,959,959,,917,959,,942,942,942,942',
',,,959,959,,959,959,959,959,959,959,959,,,959,959,919,,,959,959,959',
'959,,,,,,959,,,942,,,,,959,959,,959,959,959,959,959,959,959,959,959',
'959,959,,992,959,992,992,992,992,992,994,,994,994,994,994,994,,,992',
',,,,959,,994,996,,996,996,996,996,996,,,,,,,,992,,996,,,,,994,,992,992',
'992,992,,,,,,994,994,,,,998,996,998,998,998,998,998,,,,,,996,996,,,998',
',,,,,992,,,,,,,994,,,,,,,,,998,1008,1008,,,1008,,,996,,,998,998,,1008',
'1008,,1008,1008,1008,1008,1008,1008,1008,,,1008,1008,,,,1008,1008,1008',
'1008,,,,,,1008,,,,,998,,,1008,1008,,1008,1008,1008,1008,1008,1008,1008',
'1008,1008,1008,1008,,,1008,,,,,1009,1009,,,1009,,,,,,,,,1009,1009,1008',
'1009,1009,1009,1009,1009,1009,1009,,,1009,1009,,,,1009,1009,1009,1009',
',,,,,1009,,,,,,,,1009,1009,,1009,1009,1009,1009,1009,1009,1009,1009',
'1009,1009,1009,,1011,1009,1011,1011,1011,1011,1011,1042,,1042,1042,1042',
'1042,1042,,,1011,,,,,1009,,1042,,,,,,,,,,,,,,,1011,,,,,,,1042,,,,1011',
'1011,,,,,,1042,1042,,,,,,,,,,,,,,,,,,,,,,,,,,1011,,,,,,,1042' ]
        racc_action_check = arr = ::Array.new(26260, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

racc_action_pointer = [
   nil,    92,   777,    98,   nil,   165,   nil,   nil,  5006,  1326,
   nil, 23456, 23589,    25,   nil,    46,   131,   233,   105,    90,
   557,   nil,   -30,  5146,  1200,   250,   nil,   212,   nil,   160,
 24366, 24491,  5286,  5426,  5566,   nil,   918,  5706,  5846,   nil,
   159,   138,   186,   253,   152,  5986,  6126,  6266,   194,   312,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil, 23064,
   nil,   -40,  6406,   nil,   -19,   nil,  6546,  6686,   nil,   nil,
  6826,  6966,   241,   nil, 23722,   nil,   nil,   nil,   nil,   nil,
    54,   nil,   nil,   nil,   nil,   nil,   nil,   218,   224,   230,
   232, 23855,   nil,   nil,   nil,   nil,   nil,   nil,     0,   nil,
   nil,   132,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,  7106,   nil,   nil,   nil,   nil,  7246,
  7386,  7526,  7666,  7806,   262,   nil,   426,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   249,   nil,  1059,
  7946,  8086,  8226, 24792, 24860,   nil,  8366,  8506,  8646,  8786,
  8926,  9066,   nil,   nil,   359,   -28,   104,   325,   106,   242,
   311,   nil,  9206,  1200,   343,  9346,  9486,  9626,  9766,  9906,
 10046, 10186, 10326, 10466, 10606, 10746, 10886, 11026, 11166, 11306,
 11446, 11586, 11726, 11866, 12006, 12146, 12286, 12426, 12566, 12706,
 12846,   nil,   nil, 24928,   nil,   nil,   376, 12986,   nil,   397,
   nil,   nil,   nil, 13126,   nil,   nil, 13266,   nil,  1341,   nil,
   376,   386,   nil, 13406,   429, 13546,   nil,   397, 13686,   nil,
   nil,   305,   nil,  1341, 13826,   385,  1341,   420,   469,   441,
 13966,  1482,   479,   483,   520,   517,   583,   nil,   484,   450,
   -10,   nil,   nil,   nil,   512,   245,   475, 14106,   nil,   393,
   545,   584,   nil,   555,   nil, 14246,  1623,   nil, 14386,   542,
   nil,   273,   296,   542, 14526,   nil,   nil,   575,   599,   -11,
   -10, 14666, 14806,   658,   647,   536,     5,     6,   652,   624,
     7,   669,   nil,   nil, 14946,   nil, 15086,   279,   294,   397,
   424,   426,   493,   549,   570,   581,   nil,   604,   nil,   nil,
   nil,   nil,   nil,   191,   nil,   292,   nil,   385,   nil,   573,
   295,   nil,   577,   298,   nil,   580,   -57,   nil,   584,   -41,
   nil,   317,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,  1764, 23988,   nil,   nil,   nil,   nil,
   597,   nil,   nil,   596, 15226,   605,   nil,   nil,   918,   610,
   nil,   nil,   615,   625,   402,   414, 24616,   nil,   nil,   nil,
   262,   387,   671,   nil,   nil, 23194, 23324,   nil,  1482,   nil,
   622,   nil,   nil,   777,   nil,   nil,   nil,   nil,   -16,   nil,
 24996, 25064, 15366,   110, 15506, 15646, 15786,  3315,  3456,   804,
   945,   701,   707,   709,   724,  5286,  5426,  3197,  3597,  3738,
  3879,  4020,  4161,  4302,  4443,  4584,  4725,  4866,   -50,   -42,
  5006,  5146,  1623,   -65, 24741,   nil,   nil,   nil,   nil,   nil,
   nil,   -57,   121,   667,   690,   nil,   nil, 15926,   nil,   nil,
 16066,   nil, 16206,   nil, 16346,   nil,   nil, 16486,  1467,   707,
   708,   nil,   nil,   711, 16626,   729, 16766, 25132, 25200,   780,
   778,   nil, 16906,   762,   nil, 17046, 17186, 25268, 25336,  1764,
 17326,   891,   890,   610,   nil,   nil, 17466,   nil,   nil, 17606,
   nil,   787,   nil,   323,   817,    17, 23028,   nil,   781,   782,
   nil,   786,   787,   796,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   784,   512,   nil,   nil, 17746,   nil,   nil,   nil,   879,
   nil,   nil,   nil,   880,   nil,   nil,   881,  1905,   930,   nil,
  2046,    55,    63,   928,   936,   nil, 17886, 25404, 25472,    22,
   nil,   231,   232,   -17,   nil,   849,   nil,    31, 18026,   nil,
 23158,   nil, 18166,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   164,   nil,   nil,   229,   nil,   nil,
   nil,   816,   nil,   nil,   824,   nil,   842,   nil, 24121,   nil,
   828, 18306, 18446,   416,   863, 18586, 18726, 18866, 19006,   862,
   nil,   nil,   nil, 19146, 19286,   863,   nil, 19426, 19566,   nil,
   111,   141,   512,   644,   838,  1059,   846,   nil,   nil, 23288,
   nil,   nil,   951,    75,   146,   nil,   nil,   nil,   nil,   852,
   nil,   908, 19706,   nil,   nil,   nil,  1482,    38, 19846,   871,
   nil,   877,   153,   158,   915,   356,   962,   918,   880, 19986,
  1905,   946,   -14,  1004, 20126,   nil,   904,   421,   nil,   nil,
   nil,  2187,  2328,   905,   376,   nil,   nil,   549, 24330,   nil,
 24455,   nil, 24580,   nil, 20266,   nil,   644,   nil,   903,   354,
   913,   nil,   nil,   nil,   nil,   789,   nil,  1027,   nil,   nil,
   nil,   nil,  1037,   nil, 20406,   925,    24,    26,    93,   152,
 20546,   nil,   921,   nil, 25540, 25608, 20686,   nil,   nil,   nil,
   659,   768,  2469,  2610, 24705,   733, 24254,   128,   760,  2751,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   928, 20826,  2046,
 20966,   nil,   937,   nil,  2187,   nil,  2328,   nil,   nil,  2469,
   nil,  2610,   nil,  2751, 21106, 21246, 21386, 21526,   177, 21666,
   938,   942,   nil,   943,   944,   954,   nil,   976,   960,   956,
   953, 21806,   nil,   nil,  2892,   nil,   nil,   nil,  3033,  3174,
   nil,   nil,   967,   298,   nil,   nil,  1090,   nil,  3315,   970,
  1012,   nil,   nil,   nil,   nil,   988,  1096,   989,   990,   nil,
   nil,   nil,   993,  1012,   nil,  1017,  1021,   nil,  1025,   nil,
   nil,  1033,  3160,  1042,   637,   nil,  1163,   nil, 21946,  1173,
  3456,  3597,   nil,    -7,    34,    64,   357,  1059,   nil,  1059,
  3738, 22086,   nil,   736,  1178,  1181,  1066,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,  1080,  1069,   nil,  2892, 22226,
 22366,  3033,   441,   nil,   nil, 25670,   nil,   nil, 25677,   nil,
 24745,   nil,   nil,  1098,   705, 22506,   990,  1153,  1203,  3879,
  1100,  1205,   nil,  4020,   nil,   nil,    -8, 22646,   nil,   nil,
   nil,   nil,   nil, 25694,   nil, 25731,   nil, 25746,   nil, 25770,
   nil,   nil,   nil,   nil,   479,   651,  1095,   nil,    -1,   nil,
  1217,  1218, 22786,  4161,   nil,   nil,  1219,   746,   nil,   nil,
   nil,   nil, 25785,   nil,  1107,   nil,   nil,  1113,  1117,  1127,
  1131,   nil,  1134,   nil,   433,   nil,   nil,   nil,  1062, 25826,
   nil,   nil,  1169,   nil,   nil,   nil,  4302,  1095,  1103,  1131,
  1232,  1200,   nil,  1161,  1162,  1166,  1171,  1183,   712,  1184,
  3190,  4443,   nil,   nil,   nil,   252,  4584,   nil,   nil,  4725,
  4866,   nil, 25888,   nil, 25895,   nil, 25912,   nil, 25949,   nil,
   nil,   nil,  1186,  1232,  1233,   nil,  1321, 22926, 25988, 26056,
  1203, 26118,   nil,   nil,   nil,   nil,  3197,  1200,   876,   nil,
   nil,   nil,  1322,  1324,  1325,  1209,  1210,  1219,  1220,   nil,
   nil,  1224,    21,    23,    53,  1236,  1224,  1225,   nil,   nil,
   nil,   nil, 26125,   nil,   nil,   nil,   nil,    35,   nil,  1226,
   nil ]

racc_action_default = [
    -1,  -624,  -623,  -624,    -2,  -610,    -4,    -5,  -624,    -8,
    -9,  -624,  -624,  -624,   -29,  -624,  -624,  -624,  -280,  -624,
   -40,   -43,  -612,  -624,   -48,   -50,   -51,   -52,   -57,  -257,
  -257,  -257,  -294,  -333,  -334,   -69,  -623,   -73,   -81,   -83,
  -624,  -516,  -517,  -624,  -624,  -624,  -624,  -624,  -612,  -238,
  -271,  -272,  -273,  -274,  -275,  -276,  -277,  -278,  -279,  -599,
  -282,  -285,  -623,  -292,  -302,  -405,  -624,  -624,  -307,  -310,
  -610,  -624,  -318,  -325,  -624,  -335,  -336,  -447,  -448,  -449,
  -450,  -451,  -452,  -623,  -455,  -623,  -623,  -623,  -623,  -623,
  -623,  -623,  -492,  -498,  -500,  -501,  -502,  -503,  -597,  -505,
  -506,  -598,  -508,  -509,  -510,  -511,  -512,  -513,  -514,  -515,
  -520,  -521,  1051,    -3,  -611,  -619,  -620,  -621,    -7,  -624,
  -624,  -624,  -624,  -624,  -624,   -17,  -624,  -112,  -113,  -114,
  -115,  -116,  -117,  -118,  -119,  -120,  -124,  -125,  -126,  -127,
  -128,  -129,  -130,  -131,  -132,  -133,  -134,  -135,  -136,  -137,
  -138,  -139,  -140,  -141,  -142,  -143,  -144,  -145,  -146,  -147,
  -148,  -149,  -150,  -151,  -152,  -153,  -154,  -155,  -156,  -157,
  -158,  -159,  -160,  -161,  -162,  -163,  -164,  -165,  -166,  -167,
  -168,  -169,  -170,  -171,  -172,  -173,  -174,  -175,  -176,  -177,
  -178,  -179,  -180,  -181,  -182,  -183,  -184,  -185,  -186,  -187,
  -188,  -189,  -190,  -191,  -192,  -193,  -194,   -22,  -121,  -623,
  -624,  -624,  -623,  -624,  -624,  -609,  -624,  -624,  -624,  -624,
  -624,  -612,  -613,   -47,  -624,  -516,  -517,  -624,  -280,  -624,
  -624,  -230,  -624,  -623,  -624,  -624,  -624,  -624,  -624,  -624,
  -624,  -624,  -624,  -624,  -624,  -624,  -624,  -624,  -624,  -624,
  -624,  -624,  -624,  -624,  -624,  -624,  -624,  -624,  -624,  -624,
  -624,  -411,  -414,  -624,  -607,  -608,   -58,  -624,  -301,  -624,
  -428,  -431,   -64,  -623,  -425,   -65,  -612,   -66,  -239,  -252,
  -623,  -623,  -256,  -624,  -262,  -624,  -592,  -612,  -624,   -67,
   -68,  -610,   -13,   -14,  -624,   -71,  -623,  -612,  -624,   -74,
   -77,  -623,   -89,   -90,  -624,  -624,   -97,  -294,  -297,  -612,
  -418,  -333,  -334,  -337,  -426,  -624,   -79,  -624,   -85,  -290,
  -499,  -624,  -215,  -216,  -231,  -624,  -623,  -284,  -624,  -624,
  -240,  -616,  -616,  -624,  -623,  -303,  -304,  -548,   -49,  -624,
  -624,  -624,  -624,  -610,  -624,  -611,  -516,  -517,  -624,  -624,
  -280,  -624,  -358,  -359,  -624,  -321,  -624,  -112,  -113,  -154,
  -155,  -156,  -172,  -177,  -184,  -187,  -328,  -624,  -516,  -517,
  -587,  -588,  -453,  -624,  -476,  -624,  -478,  -624,  -480,  -624,
  -624,  -460,  -624,  -624,  -466,  -624,  -624,  -472,  -624,  -624,
  -474,  -624,  -491,  -493,  -494,  -495,  -496,    -6,  -622,   -23,
   -24,   -25,   -26,   -27,  -623,  -624,   -19,   -20,   -21,  -122,
  -624,   -30,   -39,  -267,  -624,  -624,  -266,   -31,  -197,  -612,
  -247,  -248,  -623,  -623,  -600,  -601,  -257,  -423,  -602,  -603,
  -601,  -600,  -257,  -422,  -424,  -602,  -603,   -37,  -205,   -38,
  -624,   -41,   -42,  -195,  -262,   -44,   -45,   -46,  -612,  -300,
  -624,  -624,  -623,  -290,  -624,  -624,  -624,  -206,  -207,  -208,
  -209,  -210,  -211,  -212,  -213,  -217,  -218,  -219,  -220,  -221,
  -222,  -223,  -224,  -225,  -226,  -227,  -228,  -229,  -232,  -233,
  -234,  -235,  -612,  -623,  -257,  -600,  -601,   -54,   -59,  -258,
  -419,  -623,  -623,  -612,  -612,  -296,  -253,  -624,  -261,  -254,
  -624,  -259,  -624,  -263,  -624,  -596,   -12,  -611,   -16,  -612,
   -70,  -288,   -86,   -75,  -624,  -612,  -623,  -624,  -624,   -96,
  -624,  -499,  -624,   -82,   -87,  -624,  -624,  -624,  -624,  -236,
  -624,  -439,  -624,  -286,  -614,  -241,  -618,  -617,  -243,  -618,
  -291,  -624,  -590,  -616,  -624,  -624,  -548,  -408,  -586,  -586,
  -531,  -533,  -533,  -533,  -547,  -549,  -550,  -551,  -552,  -553,
  -554,  -555,  -624,  -557,  -559,  -561,  -566,  -568,  -569,  -571,
  -576,  -578,  -579,  -581,  -582,  -583,  -624,  -623,  -349,  -350,
  -623,  -624,  -624,  -624,  -624,  -434,  -623,  -624,  -624,  -290,
  -315,  -107,  -108,  -624,  -110,  -624,  -280,  -624,  -624,  -326,
  -548,  -330,  -624,  -454,  -477,  -482,  -483,  -485,  -456,  -479,
  -457,  -481,  -458,  -459,  -624,  -462,  -464,  -624,  -465,  -468,
  -469,  -624,  -470,  -471,  -624,  -497,  -624,   -18,  -624,   -28,
  -270,  -624,  -624,  -427,  -624,  -249,  -251,  -624,  -624,   -60,
  -245,  -246,  -420,  -624,  -624,   -62,  -421,  -624,  -624,  -299,
  -600,  -601,  -600,  -601,  -612,  -195,  -624,  -394,  -395,  -612,
  -397,  -412,   -53,  -415,  -623,  -429,  -432,  -244,  -295,  -623,
  -260,  -264,  -624,  -593,  -594,  -595,   -15,   -72,  -624,   -78,
   -84,  -612,  -600,  -601,  -623,   -93,   -95,  -624,   -80,  -624,
  -204,  -214,  -612,  -623,  -623,  -283,  -612,  -616,  -293,  -591,
  -406,  -623,  -623,  -612,  -624,  -529,  -530,  -624,  -624,  -540,
  -624,  -543,  -624,  -545,  -624,  -360,  -624,  -362,  -364,  -371,
  -612,  -560,  -570,  -580,  -584,  -623,  -351,  -623,  -308,  -352,
  -353,  -311,  -624,  -314,  -624,  -612,  -600,  -601,  -604,  -289,
  -624,  -107,  -108,  -109,  -624,  -624,  -623,  -319,  -522,  -523,
  -624,  -322,  -623,  -623,  -548,  -624,  -624,  -612,  -624,  -623,
  -461,  -463,  -467,  -473,  -475,   -10,  -123,  -268,  -624,  -198,
  -624,  -615,  -623,   -33,  -200,   -34,  -201,   -61,   -35,  -203,
   -36,  -202,   -63,  -196,  -624,  -624,  -624,  -624,  -427,  -624,
  -586,  -586,  -376,  -623,  -623,  -623,  -393,  -624,  -612,  -399,
  -555,  -563,  -564,  -574,  -623,  -417,  -416,   -55,  -623,  -623,
  -255,  -265,   -76,   -91,   -88,  -298,  -623,  -356,  -623,  -440,
  -623,  -441,  -442,  -287,  -242,  -624,  -624,  -612,  -586,  -567,
  -585,  -532,  -533,  -533,  -558,  -533,  -533,  -577,  -533,  -555,
  -572,  -612,  -624,  -369,  -624,  -556,  -624,  -354,  -624,  -624,
  -623,  -623,  -313,  -624,  -427,  -624,  -107,  -108,  -111,  -612,
  -623,  -624,  -525,  -624,  -624,  -624,  -612,  -527,  -331,  -589,
  -484,  -487,  -488,  -489,  -490,  -624,  -269,   -32,  -199,  -250,
  -624,  -237,  -624,  -374,  -375,  -384,  -378,  -386,  -624,  -389,
  -624,  -391,  -396,  -624,  -624,  -624,  -562,  -624,  -624,  -623,
  -624,  -624,   -11,  -623,  -446,  -357,  -624,  -624,  -444,  -409,
  -410,  -407,  -528,  -624,  -536,  -624,  -538,  -624,  -541,  -624,
  -544,  -546,  -361,  -363,  -367,  -624,  -372,  -305,  -624,  -306,
  -624,  -624,  -624,  -623,  -316,  -427,  -624,  -624,  -323,  -327,
  -329,  -526,  -548,  -486,  -586,  -565,  -377,  -623,  -623,  -623,
  -623,  -575,  -623,  -398,  -612,  -401,  -403,  -404,  -573,  -624,
  -290,  -413,  -624,  -430,  -433,  -445,  -623,   -98,   -99,  -624,
  -624,  -106,  -443,  -533,  -533,  -533,  -533,  -365,  -624,  -370,
  -624,  -623,  -309,  -312,  -264,  -623,  -623,  -320,  -524,  -623,
  -623,  -373,  -624,  -381,  -624,  -383,  -624,  -387,  -624,  -390,
  -392,  -400,  -624,  -289,  -604,   -56,  -439,  -623,  -624,  -624,
  -105,  -624,  -534,  -537,  -539,  -542,  -624,  -368,  -623,  -435,
  -436,  -437,  -624,  -624,  -624,  -623,  -623,  -623,  -623,  -402,
  -438,  -612,  -600,  -601,  -604,  -104,  -533,  -366,  -355,  -317,
  -324,  -332,  -624,  -379,  -382,  -385,  -388,  -427,  -535,  -623,
  -380 ]

clist = [
'6,584,220,419,280,280,280,366,262,125,208,335,130,130,4,633,426,432',
'299,213,416,327,693,753,393,577,580,439,325,223,532,274,554,442,331',
'846,117,133,133,263,279,279,279,673,488,320,135,135,114,113,339,340',
'295,297,343,720,313,313,837,670,330,816,670,547,493,834,484,316,794',
'523,281,281,281,926,9,130,266,272,275,499,9,374,673,376,378,381,384',
'387,390,376,313,797,130,728,731,849,743,923,955,661,332,117,118,399',
'400,401,402,665,666,705,706,957,535,538,344,795,375,597,614,599,951',
'617,391,1,277,289,290,2,124,902,207,353,412,405,664,827,899,604,628',
'333,663,611,370,541,615,336,351,615,747,367,326,328,696,334,979,341',
'850,342,851,740,986,354,860,598,833,863,835,989,356,752,600,756,942',
'796,798,954,545,700,337,673,483,449,415,804,491,808,9,492,809,415,1019',
'734,820,906,372,403,373,670,670,377,380,383,386,801,389,870,1029,1017',
'397,841,420,758,759,392,427,436,411,417,861,957,279,499,437,441,951',
'832,450,829,17,945,893,602,,,17,923,495,,,280,732,554,834,654,,1037',
',858,280,224,788,,,426,432,,,510,224,224,224,837,17,304,304,791,679',
'504,,,490,420,703,,688,279,834,813,498,498,807,279,,,279,,,,,520,,,224',
'224,947,554,224,348,524,,,,,793,,281,517,681,,,828,,295,509,281,274',
'521,295,515,313,684,,117,527,699,581,582,,1038,513,684,854,542,,507',
'506,313,,,,17,948,,,949,224,224,224,224,17,587,883,884,1020,836,834',
'838,338,338,489,,338,,,,990,508,934,494,973,792,,543,313,117,313,,735',
'761,601,16,761,,,,,16,583,,912,684,,,,,,,,,634,,,6,627,,,130,,649,,338',
'338,338,338,16,830,626,777,830,,498,498,673,782,640,,801,641,,801,812',
'133,801,646,801,17,224,224,224,,135,670,224,224,224,224,224,224,1025',
'554,420,427,436,667,668,935,864,865,,17,279,,656,442,,,,810,,677,,,',
'639,,680,9,,824,645,866,657,640,,,641,,,944,657,657,791,16,224,791,524',
'791,1030,,224,,16,224,524,821,991,,,,445,446,447,448,,420,709,711,713',
'427,436,17,,17,,279,,304,17,427,436,,662,950,313,952,669,801,859,801',
'933,801,313,801,304,,,,,684,,,,17,,224,,,974,,975,,976,,,936,,,224,224',
',810,,,,697,887,889,891,,676,595,,595,,420,,801,16,427,436,,,966,830',
'279,,792,,791,792,791,792,791,,791,,,,,,806,16,729,729,981,,,,,533,',
',,,,,766,1047,748,130,17,,338,338,634,,1026,554,1027,799,1028,,1021',
'773,775,805,,,791,778,780,,815,441,133,1036,823,,,524,,634,657,135,',
',415,498,,,814,,16,772,16,,,,224,16,845,,640,799,,641,1049,,646,868',
',817,822,1023,1024,,,313,,,,,,792,16,792,853,792,313,792,,,,,,634,,869',
',,,,,817,855,817,,,,993,995,997,999,17,1000,,,,,,304,,224,,420,436,427',
',304,,,,,792,279,,224,130,,,,,,,,,,,,,498,,,,,,877,,799,,,862,16,,,',
'867,911,,,,886,886,886,,,914,916,1031,918,920,922,921,17,,,17,1043,1044',
'1045,1046,684,224,,904,,,,908,,313,692,,,224,,941,,224,,,1050,928,,',
',,,,634,,,,,29,937,,,,,29,,,,,,,,,,,,,224,224,29,,,,224,224,,,224,29',
'29,29,,29,,,,,,,16,729,,,751,,,,757,938,,,,,,,,,,304,,,,29,29,,,29,',
'313,304,,,,,,,,,,,313,17,17,,,,,,1001,,,1012,1013,1014,1015,,,,,886',
'886,886,886,,886,,,,,16,29,,16,,436,29,29,29,29,29,224,,988,,,1008,224',
',,,,,17,17,,,,817,,17,18,,,,,,18,,,,224,,298,,1048,,,,,420,,,,427,436',
'634,,,,279,817,,,,18,306,306,886,886,886,886,896,561,,17,338,,,17,17',
',,,,,,,,17,,,886,,,,29,29,29,29,350,,,29,29,29,29,29,29,,,,,,,,,,,224',
'29,17,17,,16,16,,,,,,17,224,,,,,,,,,,,18,,,,,,,,19,18,,29,,,19,,,29',
',,29,,,958,,,,17,,,,17,16,16,,969,,,29,16,29,338,19,,,29,,,,,,,,,338',
',,,,,,17,,,,,,,,,29,,29,410,,,,352,,,,,,,16,29,29,,16,16,,,,,17,18,',
'298,16,,,,,,,,,,,17,,,,,17,,,17,17,18,19,,,,,,,,,19,16,16,,,,224,,,',
'561,16,,,,,,,,29,,,,,,,715,,,,,298,,,,,298,,,,,,,,,,,,,,16,18,,18,16',
',,306,18,,,,,,561,,,29,,,,,,,306,,,,,,,,,18,16,,19,,,,,,,,440,,,,,,',
',,,,,,,,,19,596,,596,,,,16,,41,,,29,800,,41,,,,,,29,16,,,,,16,,,16,16',
',,,29,,,,,,,,41,302,302,,,,,,18,,,,,,,,,,19,561,19,561,,,,19,,715,,',
'843,,,,,346,,,368,29,,,29,,,,,,29,,19,,,,,,,,,,29,,,,29,561,,,,,,,,',
',,,,41,,,,,,,,,41,,,,,,,,,,,,29,29,,,,,29,29,,,29,,18,,,,,,,306,,,,',
',,,306,,19,,,,,,,,,,,,,,,,,,,,,,,,,715,,715,,,,725,,,727,29,29,,,,,',
',413,,41,,,,,444,,,18,,,18,,,,,,,,,,,,800,41,,800,,,29,,,,,,29,,,,,',
'29,29,,,,,,29,,,561,,,,,,,19,29,,,977,715,,,,,,,,501,,503,,,505,,,,561',
',,,,41,,41,,,,302,41,29,,,,29,29,,,,,,,,,29,302,306,825,826,,,,,715',
'41,715,,306,,544,,,,,,19,,800,19,18,18,,,,29,,29,29,,,,,368,,368,,29',
'29,,,,715,,,,,,,,,,,,,,875,,,,42,,,,,,42,,,,,18,18,,,,29,874,18,,29',
',,41,,,440,,,,630,,,,42,303,303,,,,,898,,,,900,901,,,,29,,,,,905,,,',
',596,,,18,,,,18,18,347,,,369,,,,,18,,,19,19,,29,,,,930,931,,,,,,,,,',
'29,,,,,29,,,29,29,,18,18,,42,671,,,544,,674,18,675,42,,,29,,41,,,,,19',
'19,302,,,962,,19,,965,302,,,,,,,,,,,671,,596,544,,,18,,,,18,,,,971,',
',,985,,,,,,,,,,,721,,19,,,,19,19,,,,18,,,,41,19,,41,,,,1006,,,,42,,',
',,,,,,,,1018,,,,,1022,,18,,,,19,19,42,,,,,,,,19,18,,,,,18,,767,18,18',
',671,544,,,,,,,,,,,,,,,,,,,,,,,,,,19,,,,19,,,,972,,811,,,,42,,42,,,302',
'303,42,,,,,,,,,302,,819,,19,,,303,,,,,41,41,,,42,,,,,,840,,,,,,,,,,',
',,,,19,,,,,444,,369,,369,,,,,,19,,,,,19,,,19,19,,41,41,,,,,,41,,,,,',
'876,,,,,,,,,,,,,,,,,,42,,,,,,,,,,,,,,,,,,368,,,41,,,,41,41,,,,,231,',
',,41,,,,,278,278,278,,,,,,,,,,,322,323,324,,,,,,,,,,,,41,41,,278,,,',
',,,41,,,,,,,,,,,,,,,,544,,,,,,,,,,42,,,,,,,303,,368,,,,41,,303,,41,',
',,967,,,,,,,,,,,,,,,,,,,,,,984,,,,41,,,,,,,,,,,,,,,,,,,,,,,42,,,42,',
',,,,,41,,,,,,,,,,,,,,,41,,,,,41,,,41,41,,,,,,,,,,,278,418,278,,,,438',
'443,,,,,,,,,,,,,,,231,,,457,458,459,460,461,462,463,464,465,466,467',
'468,469,470,471,472,473,474,475,476,477,478,479,480,481,482,,,,,,303',
'278,,,,,,278,,,278,303,,,,,,278,,278,,,278,42,42,,,,,,,,,,,,,,,,,,,',
',,,,,,,,,,,,,,,529,,,,,,,,,278,,,,,,42,42,,,,,,42,,,,,,,,,,,,,,,,,,',
',,,,,,,,,,,,,,,,,,,,,,,369,,,42,,,,42,42,,,,,,,,,42,,,,,,,,278,,,,,',
',,,,,,,,,,,,,,,,,,42,42,,,,,,,,,42,,,,278,,438,655,418,,,,,,,,,,,,,',
',,,,,,,,,,,,,369,,,,42,,,,42,,,,968,,278,,,278,,278,,278,,,,,,,,,,,',
'278,,,,,42,,,,690,691,,,,,,,,,,278,,,278,,,,,,,,,,,,,,,42,,,,,,,,,,',
'278,,,,42,,,,,42,,,42,42,,,,,,,,278,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,',
',,,,,,,,,,,,278,769,,,278,278,774,776,,,,,779,781,,,655,783,,,,,,,,',
',,,,,,,,,,,,,,,278,,,,,,,,,,,,,,,,,,,,,,278,,,,,,,,,,,,,,,,,,,,278,',
',,,,,,,,,,,,,,,,,,278,,,,,,,,,,,,278,,,,,,,,,,,,,,,,,,,,,,278,,878,',
',,,,,,,,,,,,774,776,781,779,,881,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,',
',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,278,878,,,,,,',
',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,278,,,,,,,,,,,,,,,,,,,',
',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,278' ]
        racc_goto_table = arr = ::Array.new(3143, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

clist = [
'6,95,34,25,71,71,71,60,155,17,17,89,61,61,2,26,40,40,53,27,30,51,13',
'99,60,92,92,30,34,22,10,74,185,20,71,93,98,64,64,39,36,36,36,199,42',
'67,65,65,8,5,19,19,49,50,19,134,68,68,194,77,6,14,77,154,25,189,40,54',
'144,55,73,73,73,135,9,61,41,41,41,76,9,6,199,6,6,6,6,6,6,6,68,147,61',
'94,94,14,58,132,149,43,73,98,7,19,19,19,19,43,43,139,139,150,72,72,5',
'145,172,59,175,59,195,175,172,1,48,48,48,3,11,15,18,21,31,33,45,147',
'46,176,66,70,75,176,87,88,176,91,96,176,97,100,101,102,103,104,135,105',
'106,107,108,109,110,111,112,113,145,114,145,115,116,117,118,119,120',
'136,142,148,151,152,153,199,156,51,71,157,160,161,9,162,163,71,164,165',
'166,167,170,9,171,77,77,173,174,177,178,190,179,180,149,135,7,134,6',
'181,182,183,74,61,22,22,184,150,36,76,22,22,195,188,27,191,24,192,147',
'198,,,24,132,51,,,71,95,185,189,25,,135,,58,71,24,26,,,40,40,,,51,24',
'24,24,194,24,24,24,138,55,34,,,74,6,154,,55,36,189,26,6,6,43,36,,,36',
',,,,34,,,24,24,144,185,24,24,53,,,,,143,,73,27,25,,,138,,49,50,73,74',
'67,49,50,68,40,,98,27,72,19,19,,93,54,40,26,6,,8,5,68,,,,24,145,,,145',
'24,24,24,24,24,27,139,139,14,143,189,143,32,32,48,,32,,,,99,9,94,48',
'145,140,,73,68,98,68,,25,176,39,23,176,,,,,23,5,,139,40,,,,,,,,,34,',
',6,17,,,61,,51,,32,32,32,32,23,140,2,42,140,,6,6,199,42,6,,190,74,,190',
'55,64,190,74,190,24,24,24,24,,65,77,24,24,24,24,24,24,145,185,6,74,61',
'51,51,26,10,10,,24,36,,34,20,,,,76,,51,,,,41,,51,9,,72,41,154,6,6,,',
'74,,,138,6,6,138,23,24,138,53,138,13,,24,,23,24,53,30,139,,,,32,32,32',
'32,,6,187,187,187,74,61,24,,24,,36,,24,24,74,61,,41,143,68,143,73,190',
'25,190,92,190,68,190,24,,,,,40,,,,24,,24,,,143,,143,,143,,,10,,,24,24',
',76,,,,73,141,141,141,,9,24,,24,,6,,190,23,74,61,,,92,140,36,,140,,138',
'140,138,140,138,,138,,,,,,89,23,98,98,92,,,,,32,,,,,,,17,26,98,61,24',
',32,32,34,,143,185,143,34,143,,95,22,22,155,,,138,22,22,,51,22,64,143',
'51,,,53,,34,6,65,,,71,6,,,53,,23,73,23,,,,24,23,51,,6,34,,74,143,,74',
'60,,6,6,10,10,,,68,,,,,,140,23,140,71,140,68,140,,,,,,34,,51,,,,,,6',
'19,6,,,,141,141,141,141,24,141,,,,,,24,,24,,6,61,74,,24,,,,,140,36,',
'24,61,,,,,,,,,,,,,6,,,,,,22,,34,,,98,23,,,,98,51,,,,6,6,6,,,187,187',
'25,187,187,51,187,24,,,24,141,141,141,141,40,24,,6,,,,6,,68,32,,,24',
',51,,24,,,141,19,,,,,,,34,,,,,44,19,,,,,44,,,,,,,,,,,,,24,24,44,,,,24',
'24,,,24,44,44,44,,44,,,,,,,23,98,,,32,,,,32,98,,,,,,,,,,24,,,,44,44',
',,44,,68,24,,,,,,,,,,,68,24,24,,,,,,34,,,187,187,187,187,,,,,6,6,6,6',
',6,,,,,23,44,,23,,61,44,44,44,44,44,24,,98,,,27,24,,,,,,24,24,,,,6,',
'24,28,,,,,,28,,,,24,,12,,187,,,,,6,,,,74,61,34,,,,36,6,,,,28,28,28,6',
'6,6,6,24,133,,24,32,,,24,24,,,,,,,,,24,,,6,,,,44,44,44,44,28,,,44,44',
'44,44,44,44,,,,,,,,,,,24,44,24,24,,23,23,,,,,,24,24,,,,,,,,,,,28,,,',
',,,,29,28,,44,,,29,,,44,,,44,,,24,,,,24,,,,24,23,23,,24,,,44,23,44,32',
'29,,,44,,,,,,,,,32,,,,,,,24,,,,,,,,,44,,44,12,,,,29,,,,,,,23,44,44,',
'23,23,,,,,24,28,,12,23,,,,,,,,,,,24,,,,,24,,,24,24,28,29,,,,,,,,,29',
'23,23,,,,24,,,,133,23,,,,,,,,44,,,,,,,133,,,,,12,,,,,12,,,,,,,,,,,,',
',23,28,,28,23,,,28,28,,,,,,133,,,44,,,,,,,28,,,,,,,,,28,23,,29,,,,,',
',,29,,,,,,,,,,,,,,,,29,28,,28,,,,23,,56,,,44,133,,56,,,,,,44,23,,,,',
'23,,,23,23,,,,44,,,,,,,,56,56,56,,,,,,28,,,,,,,,,,29,133,29,133,,,,29',
',133,,,133,,,,,56,,,56,44,,,44,,,,,,44,,29,,,,,,,,,,44,,,,44,133,,,',
',,,,,,,,,56,,,,,,,,,56,,,,,,,,,,,,44,44,,,,,44,44,,,44,,28,,,,,,,28',
',,,,,,,28,,29,,,,,,,,,,,,,,,,,,,,,,,,,133,,133,,,,12,,,12,44,44,,,,',
',,69,,56,,,,,69,,,28,,,28,,,,,,,,,,,,133,56,,133,,,44,,,,,,44,,,,,,44',
'44,,,,,,44,,,133,,,,,,,29,44,,,133,133,,,,,,,,69,,69,,,69,,,,133,,,',
',56,,56,,,,56,56,44,,,,44,44,,,,,,,,,44,56,28,12,12,,,,,133,56,133,',
'28,,69,,,,,,29,,133,29,28,28,,,,44,,44,44,,,,,56,,56,,44,44,,,,133,',
',,,,,,,,,,,,12,,,,57,,,,,,57,,,,,28,28,,,,44,28,28,,44,,,56,,,29,,,',
'69,,,,57,57,57,,,,,12,,,,12,12,,,,44,,,,,12,,,,,28,,,28,,,,28,28,57',
',,57,,,,,28,,,29,29,,44,,,,12,12,,,,,,,,,,44,,,,,44,,,44,44,,28,28,',
'57,69,,,69,,69,28,69,57,,,44,,56,,,,,29,29,56,,,12,,29,,12,56,,,,,,',
',,,,69,,28,69,,,28,,,,28,,,,28,,,,12,,,,,,,,,,,69,,29,,,,29,29,,,,28',
',,,56,29,,56,,,,12,,,,57,,,,,,,,,,,12,,,,,12,,28,,,,29,29,57,,,,,,,',
'29,28,,,,,28,,69,28,28,,69,69,,,,,,,,,,,,,,,,,,,,,,,,,,29,,,,29,,,,29',
',69,,,,57,,57,,,56,57,57,,,,,,,,,56,,69,,29,,,57,,,,,56,56,,,57,,,,',
',69,,,,,,,,,,,,,,,29,,,,,69,,57,,57,,,,,,29,,,,,29,,,29,29,,56,56,,',
',,,56,,,,,,69,,,,,,,,,,,,,,,,,,57,,,,,,,,,,,,,,,,,,56,,,56,,,,56,56',
',,,,35,,,,56,,,,,35,35,35,,,,,,,,,,,35,35,35,,,,,,,,,,,,56,56,,35,,',
',,,,56,,,,,,,,,,,,,,,,69,,,,,,,,,,57,,,,,,,57,,56,,,,56,,57,,56,,,,56',
',,,,,,,,,,,,,,,,,,,,,69,,,,56,,,,,,,,,,,,,,,,,,,,,,,57,,,57,,,,,,,56',
',,,,,,,,,,,,,,56,,,,,56,,,56,56,,,,,,,,,,,35,35,35,,,,35,35,,,,,,,,',
',,,,,,35,,,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35',
'35,35,35,35,35,35,35,,,,,,57,35,,,,,,35,,,35,57,,,,,,35,,35,,,35,57',
'57,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,35,,,,,,,,,35,,,,,,57,57,,,,,,57',
',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,57,,,57,,,,57,57,,,,,,,,,57',
',,,,,,,35,,,,,,,,,,,,,,,,,,,,,,,,57,57,,,,,,,,,57,,,,35,,35,35,35,,',
',,,,,,,,,,,,,,,,,,,,,,,,57,,,,57,,,,57,,,,57,,35,,,35,,35,,35,,,,,,',
',,,,,35,,,,,57,,,,35,35,,,,,,,,,,35,,,35,,,,,,,,,,,,,,,57,,,,,,,,,,',
'35,,,,57,,,,,57,,,57,57,,,,,,,,35,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,',
',,,,,,,,,,35,35,,,35,35,35,35,,,,,35,35,,,35,35,,,,,,,,,,,,,,,,,,,,',
',,,35,,,,,,,,,,,,,,,,,,,,,,35,,,,,,,,,,,,,,,,,,,,35,,,,,,,,,,,,,,,,',
',,,35,,,,,,,,,,,,35,,,,,,,,,,,,,,,,,,,,,,35,,35,,,,,,,,,,,,,,35,35,35',
'35,,35,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,',
',,,,,,,,,,,,,,,,,,,,,,,,,,,,35,35,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,',
',,,,,,,,,,,,,,,,,35,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,',
',,,,,,,,,,,,,,,,,,,,,,,,,,35' ]
        racc_goto_check = arr = ::Array.new(3143, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

racc_goto_pointer = [
   nil,   123,    12,   127,   nil,    44,    -2,    94,    43,    72,
  -296,   118,   962,  -509,  -632,  -687,   nil,    -2,   118,   -16,
  -184,    60,     6,   378,   226,  -209,  -404,     2,   984,  1104,
  -190,   -78,   291,     8,   -20,  2135,     8,   nil,   nil,    12,
  -197,    47,  -222,  -384,   842,  -353,  -671,   nil,    92,    16,
    17,   -40,   nil,   -19,    29,  -248,  1344,  1723,  -497,  -237,
   -67,     1,   nil,   nil,    26,    35,  -271,     1,    19,  1341,
    77,   -28,  -219,    38,     1,  -344,  -202,  -438,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,    68,  -191,   -53,
   nil,    80,  -314,  -690,  -488,  -343,    75,  -449,    31,  -577,
    75,    90,    90,  -381,    90,    87,  -572,    88,  -573,  -431,
  -774,    89,  -585,  -192,  -586,  -771,    95,  -430,  -196,  -430,
  -696,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,  -745,   691,  -507,  -771,  -486,   nil,  -394,  -439,
  -289,  -218,  -485,  -356,  -591,  -544,   nil,  -568,  -719,  -796,
  -783,  -161,  -368,   113,  -274,   -17,   -81,  -478,   nil,   nil,
   -86,  -480,   -84,  -478,  -795,  -394,  -502,  -627,   nil,   nil,
   114,   113,    31,   113,   113,  -262,  -236,   113,   113,   114,
  -553,  -395,  -395,   122,  -531,  -305,   nil,   -36,  -483,  -643,
  -456,  -477,  -653,   nil,  -652,  -768,   nil,   nil,  -140,  -457 ]

racc_goto_default = [
   nil,   nil,   nil,   nil,     5,   nil,   292,     7,   345,   293,
   nil,   nil,   531,   nil,   847,   nil,   291,   nil,   nil,   nil,
    14,    15,    21,   230,   321,   nil,   nil,   745,   228,   229,
   nil,   nil,    20,   nil,   329,    24,    25,    26,    27,   nil,
   687,   nil,   nil,   nil,   310,   nil,   nil,    28,   421,    35,
   nil,   nil,    37,    40,    39,   nil,   225,   226,   594,   nil,
   132,   429,   131,   134,    78,    79,   nil,    93,    49,   284,
   nil,   422,   nil,   423,   434,   642,   496,   282,   267,    50,
    51,    52,    53,    54,    55,    56,    57,    58,   nil,   268,
    64,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   578,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   717,   839,   nil,   718,   946,   790,   549,   nil,
   550,   nil,   nil,   551,   nil,   553,   658,   nil,   nil,   nil,
   559,   nil,   nil,   nil,   755,   nil,   nil,   nil,   433,   269,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    77,    80,
    82,   nil,   nil,   nil,   nil,   nil,   609,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   831,   548,   nil,   552,   563,
   565,   566,   802,   569,   570,   803,   573,   576,   nil,   286 ]

racc_reduce_table = [
  0, 0, :racc_error,
  0, 147, :_reduce_1,
  2, 145, :_reduce_2,
  2, 146, :_reduce_3,
  1, 148, :_reduce_none,
  1, 148, :_reduce_none,
  3, 148, :_reduce_6,
  2, 148, :_reduce_none,
  1, 151, :_reduce_8,
  0, 155, :_reduce_9,
  5, 151, :_reduce_10,
  4, 154, :_reduce_11,
  2, 156, :_reduce_12,
  1, 160, :_reduce_none,
  1, 160, :_reduce_none,
  3, 160, :_reduce_15,
  2, 160, :_reduce_16,
  0, 177, :_reduce_17,
  4, 153, :_reduce_18,
  3, 153, :_reduce_19,
  3, 153, :_reduce_20,
  3, 153, :_reduce_21,
  2, 153, :_reduce_22,
  3, 153, :_reduce_23,
  3, 153, :_reduce_24,
  3, 153, :_reduce_25,
  3, 153, :_reduce_26,
  3, 153, :_reduce_27,
  4, 153, :_reduce_28,
  1, 153, :_reduce_none,
  3, 153, :_reduce_30,
  3, 153, :_reduce_31,
  6, 153, :_reduce_32,
  5, 153, :_reduce_33,
  5, 153, :_reduce_34,
  5, 153, :_reduce_35,
  5, 153, :_reduce_36,
  3, 153, :_reduce_37,
  3, 153, :_reduce_38,
  3, 153, :_reduce_39,
  1, 153, :_reduce_none,
  3, 164, :_reduce_41,
  3, 164, :_reduce_42,
  1, 176, :_reduce_none,
  3, 176, :_reduce_44,
  3, 176, :_reduce_45,
  3, 176, :_reduce_46,
  2, 176, :_reduce_47,
  1, 176, :_reduce_none,
  1, 163, :_reduce_49,
  1, 166, :_reduce_none,
  1, 166, :_reduce_none,
  1, 181, :_reduce_none,
  4, 181, :_reduce_53,
  0, 189, :_reduce_54,
  0, 190, :_reduce_55,
  6, 186, :_reduce_56,
  1, 188, :_reduce_57,
  2, 180, :_reduce_58,
  3, 180, :_reduce_59,
  4, 180, :_reduce_60,
  5, 180, :_reduce_61,
  4, 180, :_reduce_62,
  5, 180, :_reduce_63,
  2, 180, :_reduce_64,
  2, 180, :_reduce_65,
  2, 180, :_reduce_66,
  2, 180, :_reduce_67,
  2, 180, :_reduce_68,
  1, 165, :_reduce_none,
  3, 165, :_reduce_70,
  1, 194, :_reduce_none,
  3, 194, :_reduce_72,
  1, 193, :_reduce_73,
  2, 193, :_reduce_74,
  3, 193, :_reduce_75,
  5, 193, :_reduce_76,
  2, 193, :_reduce_77,
  4, 193, :_reduce_78,
  2, 193, :_reduce_79,
  4, 193, :_reduce_80,
  1, 193, :_reduce_81,
  3, 193, :_reduce_82,
  1, 197, :_reduce_none,
  3, 197, :_reduce_84,
  2, 196, :_reduce_85,
  3, 196, :_reduce_86,
  1, 199, :_reduce_87,
  3, 199, :_reduce_88,
  1, 198, :_reduce_89,
  1, 198, :_reduce_90,
  4, 198, :_reduce_91,
  3, 198, :_reduce_92,
  3, 198, :_reduce_93,
  3, 198, :_reduce_94,
  3, 198, :_reduce_95,
  2, 198, :_reduce_96,
  1, 198, :_reduce_97,
  1, 173, :_reduce_98,
  1, 173, :_reduce_99,
  4, 173, :_reduce_100,
  3, 173, :_reduce_101,
  3, 173, :_reduce_102,
  3, 173, :_reduce_103,
  3, 173, :_reduce_104,
  2, 173, :_reduce_105,
  1, 173, :_reduce_106,
  1, 202, :_reduce_107,
  1, 202, :_reduce_none,
  2, 203, :_reduce_109,
  1, 203, :_reduce_110,
  3, 203, :_reduce_111,
  1, 204, :_reduce_none,
  1, 204, :_reduce_none,
  1, 204, :_reduce_none,
  1, 204, :_reduce_115,
  1, 204, :_reduce_116,
  1, 207, :_reduce_none,
  1, 207, :_reduce_none,
  1, 161, :_reduce_119,
  1, 161, :_reduce_none,
  1, 162, :_reduce_121,
  0, 210, :_reduce_122,
  4, 162, :_reduce_123,
  1, 205, :_reduce_none,
  1, 205, :_reduce_none,
  1, 205, :_reduce_none,
  1, 205, :_reduce_none,
  1, 205, :_reduce_none,
  1, 205, :_reduce_none,
  1, 205, :_reduce_none,
  1, 205, :_reduce_none,
  1, 205, :_reduce_none,
  1, 205, :_reduce_none,
  1, 205, :_reduce_none,
  1, 205, :_reduce_none,
  1, 205, :_reduce_none,
  1, 205, :_reduce_none,
  1, 205, :_reduce_none,
  1, 205, :_reduce_none,
  1, 205, :_reduce_none,
  1, 205, :_reduce_none,
  1, 205, :_reduce_none,
  1, 205, :_reduce_none,
  1, 205, :_reduce_none,
  1, 205, :_reduce_none,
  1, 205, :_reduce_none,
  1, 205, :_reduce_none,
  1, 205, :_reduce_none,
  1, 205, :_reduce_none,
  1, 205, :_reduce_none,
  1, 205, :_reduce_none,
  1, 205, :_reduce_none,
  1, 205, :_reduce_none,
  1, 206, :_reduce_none,
  1, 206, :_reduce_none,
  1, 206, :_reduce_none,
  1, 206, :_reduce_none,
  1, 206, :_reduce_none,
  1, 206, :_reduce_none,
  1, 206, :_reduce_none,
  1, 206, :_reduce_none,
  1, 206, :_reduce_none,
  1, 206, :_reduce_none,
  1, 206, :_reduce_none,
  1, 206, :_reduce_none,
  1, 206, :_reduce_none,
  1, 206, :_reduce_none,
  1, 206, :_reduce_none,
  1, 206, :_reduce_none,
  1, 206, :_reduce_none,
  1, 206, :_reduce_none,
  1, 206, :_reduce_none,
  1, 206, :_reduce_none,
  1, 206, :_reduce_none,
  1, 206, :_reduce_none,
  1, 206, :_reduce_none,
  1, 206, :_reduce_none,
  1, 206, :_reduce_none,
  1, 206, :_reduce_none,
  1, 206, :_reduce_none,
  1, 206, :_reduce_none,
  1, 206, :_reduce_none,
  1, 206, :_reduce_none,
  1, 206, :_reduce_none,
  1, 206, :_reduce_none,
  1, 206, :_reduce_none,
  1, 206, :_reduce_none,
  1, 206, :_reduce_none,
  1, 206, :_reduce_none,
  1, 206, :_reduce_none,
  1, 206, :_reduce_none,
  1, 206, :_reduce_none,
  1, 206, :_reduce_none,
  1, 206, :_reduce_none,
  3, 179, :_reduce_195,
  5, 179, :_reduce_196,
  3, 179, :_reduce_197,
  5, 179, :_reduce_198,
  6, 179, :_reduce_199,
  5, 179, :_reduce_200,
  5, 179, :_reduce_201,
  5, 179, :_reduce_202,
  5, 179, :_reduce_203,
  4, 179, :_reduce_204,
  3, 179, :_reduce_205,
  3, 179, :_reduce_206,
  3, 179, :_reduce_207,
  3, 179, :_reduce_208,
  3, 179, :_reduce_209,
  3, 179, :_reduce_210,
  3, 179, :_reduce_211,
  3, 179, :_reduce_212,
  3, 179, :_reduce_213,
  4, 179, :_reduce_214,
  2, 179, :_reduce_215,
  2, 179, :_reduce_216,
  3, 179, :_reduce_217,
  3, 179, :_reduce_218,
  3, 179, :_reduce_219,
  3, 179, :_reduce_220,
  3, 179, :_reduce_221,
  3, 179, :_reduce_222,
  3, 179, :_reduce_223,
  3, 179, :_reduce_224,
  3, 179, :_reduce_225,
  3, 179, :_reduce_226,
  3, 179, :_reduce_227,
  3, 179, :_reduce_228,
  3, 179, :_reduce_229,
  2, 179, :_reduce_230,
  2, 179, :_reduce_231,
  3, 179, :_reduce_232,
  3, 179, :_reduce_233,
  3, 179, :_reduce_234,
  3, 179, :_reduce_235,
  3, 179, :_reduce_236,
  6, 179, :_reduce_237,
  1, 179, :_reduce_none,
  1, 213, :_reduce_239,
  1, 214, :_reduce_none,
  2, 214, :_reduce_241,
  4, 214, :_reduce_242,
  2, 214, :_reduce_243,
  3, 218, :_reduce_244,
  1, 219, :_reduce_none,
  1, 219, :_reduce_none,
  1, 169, :_reduce_247,
  1, 169, :_reduce_248,
  2, 169, :_reduce_249,
  4, 169, :_reduce_250,
  2, 169, :_reduce_251,
  1, 192, :_reduce_252,
  2, 192, :_reduce_253,
  2, 192, :_reduce_254,
  4, 192, :_reduce_255,
  1, 192, :_reduce_256,
  0, 222, :_reduce_257,
  2, 185, :_reduce_258,
  2, 221, :_reduce_259,
  2, 220, :_reduce_260,
  1, 220, :_reduce_none,
  1, 215, :_reduce_262,
  2, 215, :_reduce_263,
  3, 215, :_reduce_264,
  4, 215, :_reduce_265,
  1, 175, :_reduce_266,
  1, 175, :_reduce_267,
  3, 174, :_reduce_268,
  4, 174, :_reduce_269,
  2, 174, :_reduce_270,
  1, 212, :_reduce_none,
  1, 212, :_reduce_none,
  1, 212, :_reduce_none,
  1, 212, :_reduce_none,
  1, 212, :_reduce_none,
  1, 212, :_reduce_none,
  1, 212, :_reduce_none,
  1, 212, :_reduce_none,
  1, 212, :_reduce_none,
  1, 212, :_reduce_none,
  1, 212, :_reduce_281,
  0, 245, :_reduce_282,
  4, 212, :_reduce_283,
  2, 212, :_reduce_284,
  0, 246, :_reduce_285,
  0, 247, :_reduce_286,
  5, 212, :_reduce_287,
  3, 212, :_reduce_288,
  3, 212, :_reduce_289,
  2, 212, :_reduce_290,
  3, 212, :_reduce_291,
  0, 248, :_reduce_292,
  4, 212, :_reduce_293,
  1, 212, :_reduce_294,
  4, 212, :_reduce_295,
  3, 212, :_reduce_296,
  1, 212, :_reduce_297,
  5, 212, :_reduce_298,
  4, 212, :_reduce_299,
  3, 212, :_reduce_300,
  2, 212, :_reduce_301,
  1, 212, :_reduce_none,
  2, 212, :_reduce_303,
  2, 212, :_reduce_304,
  6, 212, :_reduce_305,
  6, 212, :_reduce_306,
  0, 249, :_reduce_307,
  0, 250, :_reduce_308,
  7, 212, :_reduce_309,
  0, 251, :_reduce_310,
  0, 252, :_reduce_311,
  7, 212, :_reduce_312,
  5, 212, :_reduce_313,
  4, 212, :_reduce_314,
  0, 253, :_reduce_315,
  0, 254, :_reduce_316,
  9, 212, :_reduce_317,
  0, 255, :_reduce_318,
  0, 256, :_reduce_319,
  7, 212, :_reduce_320,
  0, 257, :_reduce_321,
  0, 258, :_reduce_322,
  0, 259, :_reduce_323,
  9, 212, :_reduce_324,
  0, 260, :_reduce_325,
  0, 261, :_reduce_326,
  6, 212, :_reduce_327,
  0, 262, :_reduce_328,
  6, 212, :_reduce_329,
  0, 263, :_reduce_330,
  0, 264, :_reduce_331,
  9, 212, :_reduce_332,
  1, 212, :_reduce_333,
  1, 212, :_reduce_334,
  1, 212, :_reduce_335,
  1, 212, :_reduce_336,
  1, 168, :_reduce_337,
  1, 265, :_reduce_none,
  1, 266, :_reduce_none,
  1, 267, :_reduce_none,
  1, 268, :_reduce_none,
  1, 269, :_reduce_none,
  1, 270, :_reduce_none,
  1, 271, :_reduce_none,
  1, 272, :_reduce_none,
  1, 273, :_reduce_none,
  1, 274, :_reduce_none,
  1, 275, :_reduce_none,
  1, 236, :_reduce_none,
  1, 236, :_reduce_none,
  2, 236, :_reduce_none,
  1, 238, :_reduce_none,
  1, 238, :_reduce_none,
  1, 237, :_reduce_none,
  5, 237, :_reduce_355,
  1, 158, :_reduce_none,
  2, 158, :_reduce_357,
  1, 240, :_reduce_none,
  1, 240, :_reduce_359,
  1, 276, :_reduce_none,
  3, 276, :_reduce_361,
  1, 279, :_reduce_362,
  3, 279, :_reduce_363,
  1, 278, :_reduce_364,
  4, 278, :_reduce_365,
  6, 278, :_reduce_366,
  3, 278, :_reduce_367,
  5, 278, :_reduce_368,
  2, 278, :_reduce_369,
  4, 278, :_reduce_370,
  1, 278, :_reduce_371,
  3, 278, :_reduce_372,
  4, 280, :_reduce_373,
  2, 280, :_reduce_374,
  2, 280, :_reduce_375,
  1, 280, :_reduce_376,
  2, 285, :_reduce_377,
  1, 285, :_reduce_none,
  6, 286, :_reduce_379,
  8, 286, :_reduce_380,
  4, 286, :_reduce_381,
  6, 286, :_reduce_382,
  4, 286, :_reduce_383,
  2, 286, :_reduce_384,
  6, 286, :_reduce_385,
  2, 286, :_reduce_386,
  4, 286, :_reduce_387,
  6, 286, :_reduce_388,
  2, 286, :_reduce_389,
  4, 286, :_reduce_390,
  2, 286, :_reduce_391,
  4, 286, :_reduce_392,
  1, 286, :_reduce_393,
  1, 187, :_reduce_394,
  1, 187, :_reduce_none,
  3, 290, :_reduce_396,
  1, 290, :_reduce_397,
  4, 290, :_reduce_398,
  1, 291, :_reduce_none,
  4, 291, :_reduce_400,
  1, 292, :_reduce_401,
  3, 292, :_reduce_402,
  1, 293, :_reduce_403,
  1, 293, :_reduce_none,
  0, 297, :_reduce_405,
  3, 235, :_reduce_406,
  4, 295, :_reduce_407,
  1, 295, :_reduce_408,
  3, 296, :_reduce_409,
  3, 296, :_reduce_410,
  0, 300, :_reduce_411,
  0, 301, :_reduce_412,
  6, 299, :_reduce_413,
  2, 182, :_reduce_414,
  4, 182, :_reduce_415,
  5, 182, :_reduce_416,
  5, 182, :_reduce_417,
  0, 303, :_reduce_418,
  3, 234, :_reduce_419,
  4, 234, :_reduce_420,
  4, 234, :_reduce_421,
  3, 234, :_reduce_422,
  3, 234, :_reduce_423,
  3, 234, :_reduce_424,
  2, 234, :_reduce_425,
  1, 234, :_reduce_426,
  4, 234, :_reduce_427,
  0, 304, :_reduce_428,
  0, 305, :_reduce_429,
  6, 233, :_reduce_430,
  0, 306, :_reduce_431,
  0, 307, :_reduce_432,
  6, 233, :_reduce_433,
  0, 309, :_reduce_434,
  6, 239, :_reduce_435,
  1, 308, :_reduce_none,
  1, 308, :_reduce_none,
  6, 157, :_reduce_438,
  0, 157, :_reduce_439,
  1, 310, :_reduce_440,
  1, 310, :_reduce_none,
  1, 310, :_reduce_none,
  2, 311, :_reduce_443,
  1, 311, :_reduce_none,
  2, 159, :_reduce_445,
  1, 159, :_reduce_none,
  1, 223, :_reduce_447,
  1, 223, :_reduce_448,
  1, 223, :_reduce_none,
  1, 224, :_reduce_450,
  1, 313, :_reduce_451,
  1, 313, :_reduce_none,
  2, 313, :_reduce_453,
  3, 314, :_reduce_454,
  1, 314, :_reduce_455,
  3, 225, :_reduce_456,
  3, 226, :_reduce_457,
  3, 227, :_reduce_458,
  3, 227, :_reduce_459,
  1, 318, :_reduce_460,
  3, 318, :_reduce_461,
  1, 319, :_reduce_none,
  2, 319, :_reduce_463,
  3, 229, :_reduce_464,
  3, 229, :_reduce_465,
  1, 321, :_reduce_466,
  3, 321, :_reduce_467,
  3, 228, :_reduce_468,
  3, 228, :_reduce_469,
  3, 230, :_reduce_470,
  3, 230, :_reduce_471,
  1, 322, :_reduce_472,
  3, 322, :_reduce_473,
  1, 323, :_reduce_474,
  3, 323, :_reduce_475,
  1, 315, :_reduce_476,
  2, 315, :_reduce_477,
  1, 316, :_reduce_478,
  2, 316, :_reduce_479,
  1, 317, :_reduce_480,
  2, 317, :_reduce_481,
  1, 320, :_reduce_482,
  0, 325, :_reduce_483,
  3, 320, :_reduce_484,
  0, 326, :_reduce_485,
  4, 320, :_reduce_486,
  1, 324, :_reduce_487,
  1, 324, :_reduce_488,
  1, 324, :_reduce_489,
  1, 324, :_reduce_none,
  2, 208, :_reduce_491,
  1, 208, :_reduce_492,
  1, 327, :_reduce_none,
  1, 327, :_reduce_none,
  1, 327, :_reduce_none,
  1, 327, :_reduce_none,
  3, 209, :_reduce_497,
  1, 312, :_reduce_none,
  2, 312, :_reduce_499,
  1, 211, :_reduce_none,
  1, 211, :_reduce_none,
  1, 211, :_reduce_none,
  1, 211, :_reduce_none,
  1, 200, :_reduce_none,
  1, 200, :_reduce_none,
  1, 200, :_reduce_none,
  1, 200, :_reduce_none,
  1, 200, :_reduce_none,
  1, 201, :_reduce_509,
  1, 201, :_reduce_510,
  1, 201, :_reduce_511,
  1, 201, :_reduce_512,
  1, 201, :_reduce_513,
  1, 201, :_reduce_514,
  1, 201, :_reduce_515,
  1, 231, :_reduce_516,
  1, 231, :_reduce_517,
  1, 167, :_reduce_518,
  1, 167, :_reduce_519,
  1, 172, :_reduce_520,
  1, 172, :_reduce_521,
  1, 241, :_reduce_522,
  0, 328, :_reduce_523,
  4, 241, :_reduce_524,
  2, 241, :_reduce_525,
  3, 243, :_reduce_526,
  2, 243, :_reduce_527,
  4, 329, :_reduce_528,
  2, 329, :_reduce_529,
  2, 329, :_reduce_530,
  1, 329, :_reduce_none,
  2, 331, :_reduce_532,
  0, 331, :_reduce_533,
  6, 298, :_reduce_534,
  8, 298, :_reduce_535,
  4, 298, :_reduce_536,
  6, 298, :_reduce_537,
  4, 298, :_reduce_538,
  6, 298, :_reduce_539,
  2, 298, :_reduce_540,
  4, 298, :_reduce_541,
  6, 298, :_reduce_542,
  2, 298, :_reduce_543,
  4, 298, :_reduce_544,
  2, 298, :_reduce_545,
  4, 298, :_reduce_546,
  1, 298, :_reduce_547,
  0, 298, :_reduce_548,
  1, 294, :_reduce_549,
  1, 294, :_reduce_550,
  1, 294, :_reduce_551,
  1, 294, :_reduce_552,
  1, 277, :_reduce_none,
  1, 277, :_reduce_554,
  1, 333, :_reduce_none,
  3, 333, :_reduce_556,
  1, 287, :_reduce_557,
  3, 287, :_reduce_558,
  1, 334, :_reduce_none,
  2, 335, :_reduce_560,
  1, 335, :_reduce_561,
  2, 336, :_reduce_562,
  1, 336, :_reduce_563,
  1, 281, :_reduce_none,
  3, 281, :_reduce_565,
  1, 330, :_reduce_none,
  3, 330, :_reduce_567,
  1, 337, :_reduce_none,
  1, 337, :_reduce_none,
  2, 282, :_reduce_570,
  1, 282, :_reduce_571,
  3, 338, :_reduce_572,
  3, 339, :_reduce_573,
  1, 288, :_reduce_574,
  3, 288, :_reduce_575,
  1, 332, :_reduce_576,
  3, 332, :_reduce_577,
  1, 340, :_reduce_none,
  1, 340, :_reduce_none,
  2, 289, :_reduce_580,
  1, 289, :_reduce_581,
  1, 341, :_reduce_none,
  1, 341, :_reduce_none,
  2, 284, :_reduce_584,
  2, 283, :_reduce_585,
  0, 283, :_reduce_586,
  1, 244, :_reduce_none,
  0, 342, :_reduce_588,
  4, 244, :_reduce_589,
  1, 232, :_reduce_590,
  2, 232, :_reduce_591,
  1, 217, :_reduce_none,
  3, 217, :_reduce_593,
  3, 343, :_reduce_594,
  3, 343, :_reduce_595,
  2, 343, :_reduce_596,
  1, 191, :_reduce_none,
  1, 191, :_reduce_none,
  1, 191, :_reduce_none,
  1, 184, :_reduce_none,
  1, 184, :_reduce_none,
  1, 184, :_reduce_none,
  1, 184, :_reduce_none,
  1, 302, :_reduce_none,
  1, 302, :_reduce_none,
  1, 302, :_reduce_none,
  1, 183, :_reduce_none,
  1, 183, :_reduce_none,
  1, 171, :_reduce_none,
  0, 149, :_reduce_none,
  1, 149, :_reduce_none,
  0, 178, :_reduce_none,
  1, 178, :_reduce_none,
  2, 195, :_reduce_none,
  2, 170, :_reduce_none,
  0, 216, :_reduce_none,
  1, 216, :_reduce_none,
  1, 216, :_reduce_none,
  1, 242, :_reduce_619,
  1, 242, :_reduce_none,
  1, 152, :_reduce_none,
  2, 152, :_reduce_622,
  0, 150, :_reduce_623 ]

racc_reduce_n = 624

racc_shift_n = 1051

racc_token_table = {
  false => 0,
  :error => 1,
  :kCLASS => 2,
  :kMODULE => 3,
  :kDEF => 4,
  :kUNDEF => 5,
  :kBEGIN => 6,
  :kRESCUE => 7,
  :kENSURE => 8,
  :kEND => 9,
  :kIF => 10,
  :kUNLESS => 11,
  :kTHEN => 12,
  :kELSIF => 13,
  :kELSE => 14,
  :kCASE => 15,
  :kWHEN => 16,
  :kWHILE => 17,
  :kUNTIL => 18,
  :kFOR => 19,
  :kBREAK => 20,
  :kNEXT => 21,
  :kREDO => 22,
  :kRETRY => 23,
  :kIN => 24,
  :kDO => 25,
  :kDO_COND => 26,
  :kDO_BLOCK => 27,
  :kDO_LAMBDA => 28,
  :kRETURN => 29,
  :kYIELD => 30,
  :kSUPER => 31,
  :kSELF => 32,
  :kNIL => 33,
  :kTRUE => 34,
  :kFALSE => 35,
  :kAND => 36,
  :kOR => 37,
  :kNOT => 38,
  :kIF_MOD => 39,
  :kUNLESS_MOD => 40,
  :kWHILE_MOD => 41,
  :kUNTIL_MOD => 42,
  :kRESCUE_MOD => 43,
  :kALIAS => 44,
  :kDEFINED => 45,
  :klBEGIN => 46,
  :klEND => 47,
  :k__LINE__ => 48,
  :k__FILE__ => 49,
  :k__ENCODING__ => 50,
  :tIDENTIFIER => 51,
  :tFID => 52,
  :tGVAR => 53,
  :tIVAR => 54,
  :tCONSTANT => 55,
  :tLABEL => 56,
  :tCVAR => 57,
  :tNTH_REF => 58,
  :tBACK_REF => 59,
  :tSTRING_CONTENT => 60,
  :tINTEGER => 61,
  :tFLOAT => 62,
  :tREGEXP_END => 63,
  :tUPLUS => 64,
  :tUMINUS => 65,
  :tUMINUS_NUM => 66,
  :tPOW => 67,
  :tCMP => 68,
  :tEQ => 69,
  :tEQQ => 70,
  :tNEQ => 71,
  :tGEQ => 72,
  :tLEQ => 73,
  :tANDOP => 74,
  :tOROP => 75,
  :tMATCH => 76,
  :tNMATCH => 77,
  :tDOT => 78,
  :tDOT2 => 79,
  :tDOT3 => 80,
  :tAREF => 81,
  :tASET => 82,
  :tLSHFT => 83,
  :tRSHFT => 84,
  :tCOLON2 => 85,
  :tCOLON3 => 86,
  :tOP_ASGN => 87,
  :tASSOC => 88,
  :tLPAREN => 89,
  :tLPAREN2 => 90,
  :tRPAREN => 91,
  :tLPAREN_ARG => 92,
  :tLBRACK => 93,
  :tLBRACK2 => 94,
  :tRBRACK => 95,
  :tLBRACE => 96,
  :tLBRACE_ARG => 97,
  :tSTAR => 98,
  :tSTAR2 => 99,
  :tAMPER => 100,
  :tAMPER2 => 101,
  :tTILDE => 102,
  :tPERCENT => 103,
  :tDIVIDE => 104,
  :tPLUS => 105,
  :tMINUS => 106,
  :tLT => 107,
  :tGT => 108,
  :tPIPE => 109,
  :tBANG => 110,
  :tCARET => 111,
  :tLCURLY => 112,
  :tRCURLY => 113,
  :tBACK_REF2 => 114,
  :tSYMBEG => 115,
  :tSTRING_BEG => 116,
  :tXSTRING_BEG => 117,
  :tREGEXP_BEG => 118,
  :tWORDS_BEG => 119,
  :tQWORDS_BEG => 120,
  :tSTRING_DBEG => 121,
  :tSTRING_DVAR => 122,
  :tSTRING_END => 123,
  :tSTRING => 124,
  :tSYMBOL => 125,
  :tNL => 126,
  :tEH => 127,
  :tCOLON => 128,
  :tCOMMA => 129,
  :tSPACE => 130,
  :tSEMI => 131,
  :tLAMBDA => 132,
  :tLAMBEG => 133,
  :tDSTAR => 134,
  :tCHAR => 135,
  :tSYMBOLS_BEG => 136,
  :tQSYMBOLS_BEG => 137,
  :tSTRING_DEND => 138,
  :tUBANG => 139,
  :tRATIONAL => 140,
  :tIMAGINARY => 141,
  :tEQL => 142,
  :tLOWEST => 143 }

racc_nt_base = 144

racc_use_result_var = true

Racc_arg = [
  racc_action_table,
  racc_action_check,
  racc_action_default,
  racc_action_pointer,
  racc_goto_table,
  racc_goto_check,
  racc_goto_default,
  racc_goto_pointer,
  racc_nt_base,
  racc_reduce_table,
  racc_token_table,
  racc_shift_n,
  racc_reduce_n,
  racc_use_result_var ]

Racc_token_to_s_table = [
  "$end",
  "error",
  "kCLASS",
  "kMODULE",
  "kDEF",
  "kUNDEF",
  "kBEGIN",
  "kRESCUE",
  "kENSURE",
  "kEND",
  "kIF",
  "kUNLESS",
  "kTHEN",
  "kELSIF",
  "kELSE",
  "kCASE",
  "kWHEN",
  "kWHILE",
  "kUNTIL",
  "kFOR",
  "kBREAK",
  "kNEXT",
  "kREDO",
  "kRETRY",
  "kIN",
  "kDO",
  "kDO_COND",
  "kDO_BLOCK",
  "kDO_LAMBDA",
  "kRETURN",
  "kYIELD",
  "kSUPER",
  "kSELF",
  "kNIL",
  "kTRUE",
  "kFALSE",
  "kAND",
  "kOR",
  "kNOT",
  "kIF_MOD",
  "kUNLESS_MOD",
  "kWHILE_MOD",
  "kUNTIL_MOD",
  "kRESCUE_MOD",
  "kALIAS",
  "kDEFINED",
  "klBEGIN",
  "klEND",
  "k__LINE__",
  "k__FILE__",
  "k__ENCODING__",
  "tIDENTIFIER",
  "tFID",
  "tGVAR",
  "tIVAR",
  "tCONSTANT",
  "tLABEL",
  "tCVAR",
  "tNTH_REF",
  "tBACK_REF",
  "tSTRING_CONTENT",
  "tINTEGER",
  "tFLOAT",
  "tREGEXP_END",
  "tUPLUS",
  "tUMINUS",
  "tUMINUS_NUM",
  "tPOW",
  "tCMP",
  "tEQ",
  "tEQQ",
  "tNEQ",
  "tGEQ",
  "tLEQ",
  "tANDOP",
  "tOROP",
  "tMATCH",
  "tNMATCH",
  "tDOT",
  "tDOT2",
  "tDOT3",
  "tAREF",
  "tASET",
  "tLSHFT",
  "tRSHFT",
  "tCOLON2",
  "tCOLON3",
  "tOP_ASGN",
  "tASSOC",
  "tLPAREN",
  "tLPAREN2",
  "tRPAREN",
  "tLPAREN_ARG",
  "tLBRACK",
  "tLBRACK2",
  "tRBRACK",
  "tLBRACE",
  "tLBRACE_ARG",
  "tSTAR",
  "tSTAR2",
  "tAMPER",
  "tAMPER2",
  "tTILDE",
  "tPERCENT",
  "tDIVIDE",
  "tPLUS",
  "tMINUS",
  "tLT",
  "tGT",
  "tPIPE",
  "tBANG",
  "tCARET",
  "tLCURLY",
  "tRCURLY",
  "tBACK_REF2",
  "tSYMBEG",
  "tSTRING_BEG",
  "tXSTRING_BEG",
  "tREGEXP_BEG",
  "tWORDS_BEG",
  "tQWORDS_BEG",
  "tSTRING_DBEG",
  "tSTRING_DVAR",
  "tSTRING_END",
  "tSTRING",
  "tSYMBOL",
  "tNL",
  "tEH",
  "tCOLON",
  "tCOMMA",
  "tSPACE",
  "tSEMI",
  "tLAMBDA",
  "tLAMBEG",
  "tDSTAR",
  "tCHAR",
  "tSYMBOLS_BEG",
  "tQSYMBOLS_BEG",
  "tSTRING_DEND",
  "tUBANG",
  "tRATIONAL",
  "tIMAGINARY",
  "tEQL",
  "tLOWEST",
  "$start",
  "program",
  "top_compstmt",
  "@1",
  "top_stmts",
  "opt_terms",
  "none",
  "top_stmt",
  "terms",
  "stmt",
  "bodystmt",
  "@2",
  "compstmt",
  "opt_rescue",
  "opt_else",
  "opt_ensure",
  "stmts",
  "fitem",
  "undef_list",
  "expr_value",
  "command_asgn",
  "mlhs",
  "command_call",
  "var_lhs",
  "primary_value",
  "opt_call_args",
  "rbracket",
  "call_op",
  "backref",
  "lhs",
  "mrhs",
  "mrhs_arg",
  "expr",
  "@3",
  "opt_nl",
  "arg",
  "command",
  "block_command",
  "block_call",
  "dot_or_colon",
  "operation2",
  "command_args",
  "cmd_brace_block",
  "opt_block_param",
  "fcall",
  "@4",
  "@5",
  "operation",
  "call_args",
  "mlhs_basic",
  "mlhs_inner",
  "rparen",
  "mlhs_head",
  "mlhs_item",
  "mlhs_node",
  "mlhs_post",
  "user_variable",
  "keyword_variable",
  "cname",
  "cpath",
  "fname",
  "op",
  "reswords",
  "fsym",
  "symbol",
  "dsym",
  "@6",
  "simple_numeric",
  "primary",
  "arg_value",
  "aref_args",
  "args",
  "trailer",
  "assocs",
  "paren_args",
  "opt_paren_args",
  "opt_block_arg",
  "block_arg",
  "@7",
  "literal",
  "strings",
  "xstring",
  "regexp",
  "words",
  "qwords",
  "symbols",
  "qsymbols",
  "var_ref",
  "assoc_list",
  "brace_block",
  "method_call",
  "lambda",
  "then",
  "if_tail",
  "do",
  "case_body",
  "for_var",
  "superclass",
  "term",
  "f_arglist",
  "singleton",
  "@8",
  "@9",
  "@10",
  "@11",
  "@12",
  "@13",
  "@14",
  "@15",
  "@16",
  "@17",
  "@18",
  "@19",
  "@20",
  "@21",
  "@22",
  "@23",
  "@24",
  "@25",
  "@26",
  "@27",
  "k_begin",
  "k_if",
  "k_unless",
  "k_while",
  "k_until",
  "k_case",
  "k_for",
  "k_class",
  "k_module",
  "k_def",
  "k_end",
  "f_marg",
  "f_norm_arg",
  "f_margs",
  "f_marg_list",
  "block_args_tail",
  "f_block_kwarg",
  "f_kwrest",
  "opt_f_block_arg",
  "f_block_arg",
  "opt_block_args_tail",
  "block_param",
  "f_arg",
  "f_block_optarg",
  "f_rest_arg",
  "block_param_def",
  "opt_bv_decl",
  "bv_decls",
  "bvar",
  "f_bad_arg",
  "f_larglist",
  "lambda_body",
  "@28",
  "f_args",
  "do_block",
  "@29",
  "@30",
  "operation3",
  "@31",
  "@32",
  "@33",
  "@34",
  "@35",
  "cases",
  "@36",
  "exc_list",
  "exc_var",
  "numeric",
  "string",
  "string1",
  "string_contents",
  "xstring_contents",
  "regexp_contents",
  "word_list",
  "word",
  "string_content",
  "symbol_list",
  "qword_list",
  "qsym_list",
  "string_dvar",
  "@37",
  "@38",
  "sym",
  "@39",
  "args_tail",
  "f_kwarg",
  "opt_args_tail",
  "f_optarg",
  "f_arg_item",
  "f_label",
  "f_kw",
  "f_block_kw",
  "kwrest_mark",
  "f_opt",
  "f_block_opt",
  "restarg_mark",
  "blkarg_mark",
  "@40",
  "assoc" ]

Racc_debug_parser = false

##### State transition tables end #####

# reduce 0 omitted

def _reduce_1(val, _values, result)
                      self.lexer.lex_state = :expr_beg
                    
    result
end

def _reduce_2(val, _values, result)
                      result = new_compstmt val
                    
    result
end

def _reduce_3(val, _values, result)
                      result = val[0]
                    
    result
end

# reduce 4 omitted

# reduce 5 omitted

def _reduce_6(val, _values, result)
                      result = self.block_append val[0], val[2]
                    
    result
end

# reduce 7 omitted

def _reduce_8(val, _values, result)
                      result = val[0]

                      # TODO: remove once I have more confidence this is fixed
                      # result.each_of_type :call_args do |s|
                      #   debug20 666, s, result
                      # end
                    
    result
end

def _reduce_9(val, _values, result)
                      if (self.in_def || self.in_single > 0) then
                        debug20 1
                        yyerror "BEGIN in method"
                      end
                      self.env.extend
                    
    result
end

def _reduce_10(val, _values, result)
                      result = new_iter s(:preexe), nil, val[3]
                    
    result
end

def _reduce_11(val, _values, result)
                      result = new_body val
                    
    result
end

def _reduce_12(val, _values, result)
                      result = new_compstmt val
                    
    result
end

# reduce 13 omitted

# reduce 14 omitted

def _reduce_15(val, _values, result)
                      result = self.block_append val[0], val[2]
                    
    result
end

def _reduce_16(val, _values, result)
                      result = val[1]
                      debug20 2, val, result
                    
    result
end

def _reduce_17(val, _values, result)
                      lexer.lex_state = :expr_fname
                      result = self.lexer.lineno
                    
    result
end

def _reduce_18(val, _values, result)
                      result = s(:alias, val[1], val[3]).line(val[2])
                    
    result
end

def _reduce_19(val, _values, result)
                      result = s(:valias, val[1].to_sym, val[2].to_sym)
                    
    result
end

def _reduce_20(val, _values, result)
                      result = s(:valias, val[1].to_sym, :"$#{val[2]}")
                    
    result
end

def _reduce_21(val, _values, result)
                      yyerror "can't make alias for the number variables"
                    
    result
end

def _reduce_22(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_23(val, _values, result)
                      result = new_if val[2], val[0], nil
                    
    result
end

def _reduce_24(val, _values, result)
                      result = new_if val[2], nil, val[0]
                    
    result
end

def _reduce_25(val, _values, result)
                      result = new_while val[0], val[2], true
                    
    result
end

def _reduce_26(val, _values, result)
                      result = new_until val[0], val[2], true
                    
    result
end

def _reduce_27(val, _values, result)
                      result = s(:rescue, val[0], new_resbody(s(:array), val[2]))
                    
    result
end

def _reduce_28(val, _values, result)
                      if (self.in_def || self.in_single > 0) then
                        debug20 3
                        yyerror "END in method; use at_exit"
                      end
                      result = new_iter s(:postexe), 0, val[2]
                    
    result
end

# reduce 29 omitted

def _reduce_30(val, _values, result)
                      result = new_masgn val[0], val[2], :wrap
                    
    result
end

def _reduce_31(val, _values, result)
                      result = new_op_asgn val
                    
    result
end

def _reduce_32(val, _values, result)
                      result = s(:op_asgn1, val[0], val[2], val[4].to_sym, val[5])
                    
    result
end

def _reduce_33(val, _values, result)
                      result = s(:op_asgn, val[0], val[4], val[2].to_sym, val[3].to_sym)
                      if val[1] == '&.'
                        result.sexp_type = :safe_op_asgn
                      end
                      result.line = val[0].line
                    
    result
end

def _reduce_34(val, _values, result)
                      result = s(:op_asgn, val[0], val[4], val[2].to_sym, val[3].to_sym)
                      if val[1] == '&.'
                        result.sexp_type = :safe_op_asgn
                      end
                      result.line = val[0].line
                    
    result
end

def _reduce_35(val, _values, result)
                      result = s(:op_asgn, val[0], val[4], val[2], val[3])
                      debug20 4, val, result
                    
    result
end

def _reduce_36(val, _values, result)
                      result = s(:op_asgn, val[0], val[4], val[2], val[3])
                      debug20 5, val, result
                    
    result
end

def _reduce_37(val, _values, result)
                      self.backref_assign_error val[0]
                    
    result
end

def _reduce_38(val, _values, result)
                      result = new_assign val[0], s(:svalue, val[2])
                    
    result
end

def _reduce_39(val, _values, result)
                      result = new_masgn val[0], val[2]
                    
    result
end

# reduce 40 omitted

def _reduce_41(val, _values, result)
                      result = new_assign val[0], val[2]
                    
    result
end

def _reduce_42(val, _values, result)
                      result = new_assign val[0], val[2]
                    
    result
end

# reduce 43 omitted

def _reduce_44(val, _values, result)
                      result = logical_op :and, val[0], val[2]
                    
    result
end

def _reduce_45(val, _values, result)
                      result = logical_op :or, val[0], val[2]
                    
    result
end

def _reduce_46(val, _values, result)
                      result = s(:call, val[2], :"!")
                    
    result
end

def _reduce_47(val, _values, result)
                      result = s(:call, val[1], :"!")
                    
    result
end

# reduce 48 omitted

def _reduce_49(val, _values, result)
                      result = value_expr(val[0])
                    
    result
end

# reduce 50 omitted

# reduce 51 omitted

# reduce 52 omitted

def _reduce_53(val, _values, result)
                      result = new_call val[0], val[2].to_sym, val[3]
                    
    result
end

def _reduce_54(val, _values, result)
                      self.env.extend(:dynamic)
                      result = self.lexer.lineno
                    
    result
end

def _reduce_55(val, _values, result)
                      result = nil # self.env.dynamic.keys
                    
    result
end

def _reduce_56(val, _values, result)
                      result = new_iter nil, val[2], val[4]
                      result.line = val[1]

                      self.env.unextend
                    
    result
end

def _reduce_57(val, _values, result)
                      result = new_call nil, val[0].to_sym
                    
    result
end

def _reduce_58(val, _values, result)
                      result = val[0].concat val[1].sexp_body # REFACTOR pattern
                    
    result
end

def _reduce_59(val, _values, result)
                      result = val[0].concat val[1].sexp_body
                      if val[2] then
                        block_dup_check result, val[2]

                        result, operation = val[2], result
                        result.insert 1, operation
                      end
                    
    result
end

def _reduce_60(val, _values, result)
                      result = new_call val[0], val[2].to_sym, val[3], val[1]
                    
    result
end

def _reduce_61(val, _values, result)
                      recv, _, msg, args, block = val
                      call = new_call recv, msg.to_sym, args, val[1]

                      block_dup_check call, block

                      block.insert 1, call
                      result = block
                    
    result
end

def _reduce_62(val, _values, result)
                      result = new_call val[0], val[2].to_sym, val[3]
                    
    result
end

def _reduce_63(val, _values, result)
                      recv, _, msg, args, block = val
                      call = new_call recv, msg.to_sym, args

                      block_dup_check call, block

                      block.insert 1, call
                      result = block
                    
    result
end

def _reduce_64(val, _values, result)
                      result = new_super val[1]
                    
    result
end

def _reduce_65(val, _values, result)
                      result = new_yield val[1]
                    
    result
end

def _reduce_66(val, _values, result)
                      line = val[0].last
                      result = s(:return, ret_args(val[1])).line(line)
                    
    result
end

def _reduce_67(val, _values, result)
                      line = val[0].last
                      result = s(:break, ret_args(val[1])).line(line)
                    
    result
end

def _reduce_68(val, _values, result)
                      line = val[0].last
                      result = s(:next, ret_args(val[1])).line(line)
                    
    result
end

# reduce 69 omitted

def _reduce_70(val, _values, result)
                      result = val[1]
                    
    result
end

# reduce 71 omitted

def _reduce_72(val, _values, result)
                      result = s(:masgn, s(:array, val[1]))
                    
    result
end

def _reduce_73(val, _values, result)
                      result = s(:masgn, val[0])
                    
    result
end

def _reduce_74(val, _values, result)
                      result = s(:masgn, val[0] << val[1].compact)
                    
    result
end

def _reduce_75(val, _values, result)
                      result = s(:masgn, val[0] << s(:splat, val[2]))
                    
    result
end

def _reduce_76(val, _values, result)
                      ary1, _, splat, _, ary2 = val

                      result = list_append ary1, s(:splat, splat)
                      result.concat ary2.sexp_body
                      result = s(:masgn, result)
                    
    result
end

def _reduce_77(val, _values, result)
                      result = s(:masgn, val[0] << s(:splat))
                    
    result
end

def _reduce_78(val, _values, result)
                      ary = list_append val[0], s(:splat)
                      ary.concat val[3].sexp_body
                      result = s(:masgn, ary)
                    
    result
end

def _reduce_79(val, _values, result)
                      result = s(:masgn, s(:array, s(:splat, val[1])))
                    
    result
end

def _reduce_80(val, _values, result)
                      ary = s(:array, s(:splat, val[1]))
                      ary.concat val[3].sexp_body
                      result = s(:masgn, ary)
                    
    result
end

def _reduce_81(val, _values, result)
                      result = s(:masgn, s(:array, s(:splat)))
                    
    result
end

def _reduce_82(val, _values, result)
                      result = s(:masgn, s(:array, s(:splat), *val[2].sexp_body))
                    
    result
end

# reduce 83 omitted

def _reduce_84(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_85(val, _values, result)
                      result = s(:array, val[0])
                    
    result
end

def _reduce_86(val, _values, result)
                      result = val[0] << val[1].compact
                    
    result
end

def _reduce_87(val, _values, result)
                      result = s(:array, val[0])
                    
    result
end

def _reduce_88(val, _values, result)
                      result = list_append val[0], val[2]
                    
    result
end

def _reduce_89(val, _values, result)
                      result = self.assignable val[0]
                    
    result
end

def _reduce_90(val, _values, result)
                      result = self.assignable val[0]
                    
    result
end

def _reduce_91(val, _values, result)
                      result = self.aryset val[0], val[2]
                    
    result
end

def _reduce_92(val, _values, result)
                      result = new_attrasgn val[0], val[2], val[1]
                    
    result
end

def _reduce_93(val, _values, result)
                      result = s(:attrasgn, val[0], :"#{val[2]}=")
                    
    result
end

def _reduce_94(val, _values, result)
                      result = new_attrasgn val[0], val[2], val[1]
                    
    result
end

def _reduce_95(val, _values, result)
                      if (self.in_def || self.in_single > 0) then
                        debug20 7
                        yyerror "dynamic constant assignment"
                      end

                      result = s(:const, s(:colon2, val[0], val[2].to_sym), nil)
                    
    result
end

def _reduce_96(val, _values, result)
                      if (self.in_def || self.in_single > 0) then
                        debug20 8
                        yyerror "dynamic constant assignment"
                      end

                      result = s(:const, nil, s(:colon3, val[1].to_sym))
                    
    result
end

def _reduce_97(val, _values, result)
                      self.backref_assign_error val[0]
                    
    result
end

def _reduce_98(val, _values, result)
                      result = self.assignable val[0]
                    
    result
end

def _reduce_99(val, _values, result)
                      result = self.assignable val[0]
                      debug20 9, val, result
                    
    result
end

def _reduce_100(val, _values, result)
                      result = self.aryset val[0], val[2]
                    
    result
end

def _reduce_101(val, _values, result)
                      result = new_attrasgn val[0], val[2], val[1]
                    
    result
end

def _reduce_102(val, _values, result)
                      result = s(:attrasgn, val[0], :"#{val[2]}=")
                    
    result
end

def _reduce_103(val, _values, result)
                      result = new_attrasgn val[0], val[2], val[1]
                    
    result
end

def _reduce_104(val, _values, result)
                      if (self.in_def || self.in_single > 0) then
                        debug20 10
                        yyerror "dynamic constant assignment"
                      end

                      result = s(:const, s(:colon2, val[0], val[2].to_sym))
                    
    result
end

def _reduce_105(val, _values, result)
                      if (self.in_def || self.in_single > 0) then
                        debug20 11
                        yyerror "dynamic constant assignment"
                      end

                      result = s(:const, s(:colon3, val[1].to_sym))
                    
    result
end

def _reduce_106(val, _values, result)
                      self.backref_assign_error val[0]
                    
    result
end

def _reduce_107(val, _values, result)
                      yyerror "class/module name must be CONSTANT"
                    
    result
end

# reduce 108 omitted

def _reduce_109(val, _values, result)
                      result = s(:colon3, val[1].to_sym)
                    
    result
end

def _reduce_110(val, _values, result)
                      result = val[0].to_sym
                    
    result
end

def _reduce_111(val, _values, result)
                      result = s(:colon2, val[0], val[2].to_sym)
                    
    result
end

# reduce 112 omitted

# reduce 113 omitted

# reduce 114 omitted

def _reduce_115(val, _values, result)
                      lexer.lex_state = :expr_end
                      result = val[0]
                    
    result
end

def _reduce_116(val, _values, result)
                      lexer.lex_state = :expr_end
                      result = val[0]
                    
    result
end

# reduce 117 omitted

# reduce 118 omitted

def _reduce_119(val, _values, result)
                      result = s(:lit, val[0].to_sym)
                    
    result
end

# reduce 120 omitted

def _reduce_121(val, _values, result)
                      result = new_undef val[0]
                    
    result
end

def _reduce_122(val, _values, result)
                      lexer.lex_state = :expr_fname
                    
    result
end

def _reduce_123(val, _values, result)
                      result = new_undef val[0], val[3]
                    
    result
end

# reduce 124 omitted

# reduce 125 omitted

# reduce 126 omitted

# reduce 127 omitted

# reduce 128 omitted

# reduce 129 omitted

# reduce 130 omitted

# reduce 131 omitted

# reduce 132 omitted

# reduce 133 omitted

# reduce 134 omitted

# reduce 135 omitted

# reduce 136 omitted

# reduce 137 omitted

# reduce 138 omitted

# reduce 139 omitted

# reduce 140 omitted

# reduce 141 omitted

# reduce 142 omitted

# reduce 143 omitted

# reduce 144 omitted

# reduce 145 omitted

# reduce 146 omitted

# reduce 147 omitted

# reduce 148 omitted

# reduce 149 omitted

# reduce 150 omitted

# reduce 151 omitted

# reduce 152 omitted

# reduce 153 omitted

# reduce 154 omitted

# reduce 155 omitted

# reduce 156 omitted

# reduce 157 omitted

# reduce 158 omitted

# reduce 159 omitted

# reduce 160 omitted

# reduce 161 omitted

# reduce 162 omitted

# reduce 163 omitted

# reduce 164 omitted

# reduce 165 omitted

# reduce 166 omitted

# reduce 167 omitted

# reduce 168 omitted

# reduce 169 omitted

# reduce 170 omitted

# reduce 171 omitted

# reduce 172 omitted

# reduce 173 omitted

# reduce 174 omitted

# reduce 175 omitted

# reduce 176 omitted

# reduce 177 omitted

# reduce 178 omitted

# reduce 179 omitted

# reduce 180 omitted

# reduce 181 omitted

# reduce 182 omitted

# reduce 183 omitted

# reduce 184 omitted

# reduce 185 omitted

# reduce 186 omitted

# reduce 187 omitted

# reduce 188 omitted

# reduce 189 omitted

# reduce 190 omitted

# reduce 191 omitted

# reduce 192 omitted

# reduce 193 omitted

# reduce 194 omitted

def _reduce_195(val, _values, result)
                      result = new_assign val[0], val[2]
                    
    result
end

def _reduce_196(val, _values, result)
                      result = new_assign val[0], s(:rescue, val[2], new_resbody(s(:array), val[4]))
                    
    result
end

def _reduce_197(val, _values, result)
                      result = new_op_asgn val
                    
    result
end

def _reduce_198(val, _values, result)
                      result = new_op_asgn val
                      result = s(:rescue, result, new_resbody(s(:array), val[4]))
                    
    result
end

def _reduce_199(val, _values, result)
                      val[2].sexp_type = :arglist if val[2]
                      result = s(:op_asgn1, val[0], val[2], val[4].to_sym, val[5])
                    
    result
end

def _reduce_200(val, _values, result)
                      result = new_op_asgn2 val
                    
    result
end

def _reduce_201(val, _values, result)
                      result = new_op_asgn2 val
                    
    result
end

def _reduce_202(val, _values, result)
                      result = s(:op_asgn, val[0], val[4], val[2].to_sym, val[3].to_sym)
                    
    result
end

def _reduce_203(val, _values, result)
                      yyerror "constant re-assignment"
                    
    result
end

def _reduce_204(val, _values, result)
                      yyerror "constant re-assignment"
                    
    result
end

def _reduce_205(val, _values, result)
                      self.backref_assign_error val[0]
                    
    result
end

def _reduce_206(val, _values, result)
                      v1, v2 = val[0], val[2]
                      if v1.node_type == :lit and v2.node_type == :lit and Integer === v1.last and Integer === v2.last then
                        result = s(:lit, (v1.last)..(v2.last))
                      else
                        result = s(:dot2, v1, v2)
                      end
                    
    result
end

def _reduce_207(val, _values, result)
                      v1, v2 = val[0], val[2]
                      if v1.node_type == :lit and v2.node_type == :lit and Integer === v1.last and Integer === v2.last then
                        result = s(:lit, (v1.last)...(v2.last))
                      else
                        result = s(:dot3, v1, v2)
                      end
                    
    result
end

def _reduce_208(val, _values, result)
                      result = new_call val[0], :+, argl(val[2])
                    
    result
end

def _reduce_209(val, _values, result)
                      result = new_call val[0], :-, argl(val[2])
                    
    result
end

def _reduce_210(val, _values, result)
                      result = new_call val[0], :*, argl(val[2])
                    
    result
end

def _reduce_211(val, _values, result)
                      result = new_call val[0], :"/", argl(val[2])
                    
    result
end

def _reduce_212(val, _values, result)
                      result = new_call val[0], :"%", argl(val[2])
                    
    result
end

def _reduce_213(val, _values, result)
                      result = new_call val[0], :**, argl(val[2])
                    
    result
end

def _reduce_214(val, _values, result)
                      result = new_call(new_call(s(:lit, val[1]), :"**", argl(val[3])), :"-@")
                    
    result
end

def _reduce_215(val, _values, result)
                      result = new_call val[1], :"+@"
                    
    result
end

def _reduce_216(val, _values, result)
                      result = new_call val[1], :"-@"
                    
    result
end

def _reduce_217(val, _values, result)
                      result = new_call val[0], :"|", argl(val[2])
                    
    result
end

def _reduce_218(val, _values, result)
                      result = new_call val[0], :"^", argl(val[2])
                    
    result
end

def _reduce_219(val, _values, result)
                      result = new_call val[0], :"&", argl(val[2])
                    
    result
end

def _reduce_220(val, _values, result)
                      result = new_call val[0], :"<=>", argl(val[2])
                    
    result
end

def _reduce_221(val, _values, result)
                      result = new_call val[0], :">", argl(val[2])
                    
    result
end

def _reduce_222(val, _values, result)
                      result = new_call val[0], :">=", argl(val[2])
                    
    result
end

def _reduce_223(val, _values, result)
                      result = new_call val[0], :"<", argl(val[2])
                    
    result
end

def _reduce_224(val, _values, result)
                      result = new_call val[0], :"<=", argl(val[2])
                    
    result
end

def _reduce_225(val, _values, result)
                      result = new_call val[0], :"==", argl(val[2])
                    
    result
end

def _reduce_226(val, _values, result)
                      result = new_call val[0], :"===", argl(val[2])
                    
    result
end

def _reduce_227(val, _values, result)
                      result = new_call val[0], :"!=", argl(val[2])
                    
    result
end

def _reduce_228(val, _values, result)
                      result = new_match val[0], val[2]
                    
    result
end

def _reduce_229(val, _values, result)
                      result = s(:not, new_match(val[0], val[2]))
                    
    result
end

def _reduce_230(val, _values, result)
                      result = new_call val[1], :"!"
                    
    result
end

def _reduce_231(val, _values, result)
                      result = new_call value_expr(val[1]), :"~"
                    
    result
end

def _reduce_232(val, _values, result)
                      val[0] = value_expr val[0]
                      val[2] = value_expr val[2]
                      result = new_call val[0], :"\<\<", argl(val[2])
                    
    result
end

def _reduce_233(val, _values, result)
                      val[0] = value_expr val[0]
                      val[2] = value_expr val[2]
                      result = new_call val[0], :">>", argl(val[2])
                    
    result
end

def _reduce_234(val, _values, result)
                      result = logical_op :and, val[0], val[2]
                    
    result
end

def _reduce_235(val, _values, result)
                      result = logical_op :or, val[0], val[2]
                    
    result
end

def _reduce_236(val, _values, result)
                      result = s(:defined, val[2])
                    
    result
end

def _reduce_237(val, _values, result)
                      result = s(:if, val[0], val[2], val[5])
                    
    result
end

# reduce 238 omitted

def _reduce_239(val, _values, result)
                      result = value_expr(val[0])
                    
    result
end

# reduce 240 omitted

def _reduce_241(val, _values, result)
                      result = args [val[0]]
                    
    result
end

def _reduce_242(val, _values, result)
                      result = args [val[0], array_to_hash(val[2])]
                    
    result
end

def _reduce_243(val, _values, result)
                      result = args [array_to_hash(val[0])]
                    
    result
end

def _reduce_244(val, _values, result)
                      result = val[1]
                    
    result
end

# reduce 245 omitted

# reduce 246 omitted

def _reduce_247(val, _values, result)
                      result = val[0]
                    
    result
end

def _reduce_248(val, _values, result)
                      result = val[0]
                    
    result
end

def _reduce_249(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_250(val, _values, result)
                      result = args [val[0], array_to_hash(val[2])]
                    
    result
end

def _reduce_251(val, _values, result)
                      result = args [array_to_hash(val[0])]
                    
    result
end

def _reduce_252(val, _values, result)
                      warning "parenthesize argument(s) for future version"
                      result = call_args val
                    
    result
end

def _reduce_253(val, _values, result)
                      result = call_args val
                      result = self.arg_blk_pass val[0], val[1]
                    
    result
end

def _reduce_254(val, _values, result)
                      result = call_args [array_to_hash(val[0])]
                      result = self.arg_blk_pass result, val[1]
                    
    result
end

def _reduce_255(val, _values, result)
                      result = call_args [val[0], array_to_hash(val[2])]
                      result = self.arg_blk_pass result, val[3]
                    
    result
end

def _reduce_256(val, _values, result)
                      result = call_args val
                    
    result
end

def _reduce_257(val, _values, result)
                      result = lexer.cmdarg.stack.dup # TODO: smell?
                      lexer.cmdarg.push true
                    
    result
end

def _reduce_258(val, _values, result)
                      lexer.cmdarg.stack.replace val[0]
                      result = val[1]
                    
    result
end

def _reduce_259(val, _values, result)
                      result = s(:block_pass, val[1])
                    
    result
end

def _reduce_260(val, _values, result)
                      result = val[1]
                    
    result
end

# reduce 261 omitted

def _reduce_262(val, _values, result)
                      result = s(:array, val[0])
                    
    result
end

def _reduce_263(val, _values, result)
                      result = s(:array, s(:splat, val[1]))
                    
    result
end

def _reduce_264(val, _values, result)
                      result = self.list_append val[0], val[2]
                    
    result
end

def _reduce_265(val, _values, result)
                      result = self.list_append val[0], s(:splat, val[3])
                    
    result
end

def _reduce_266(val, _values, result)
                      result = new_masgn_arg val[0]
                    
    result
end

def _reduce_267(val, _values, result)
                      result = new_masgn_arg val[0], :wrap
                    
    result
end

def _reduce_268(val, _values, result)
                      result = val[0] << val[2]
                    
    result
end

def _reduce_269(val, _values, result)
                      result = self.arg_concat val[0], val[3]
                    
    result
end

def _reduce_270(val, _values, result)
                      result = s(:splat, val[1])
                    
    result
end

# reduce 271 omitted

# reduce 272 omitted

# reduce 273 omitted

# reduce 274 omitted

# reduce 275 omitted

# reduce 276 omitted

# reduce 277 omitted

# reduce 278 omitted

# reduce 279 omitted

# reduce 280 omitted

def _reduce_281(val, _values, result)
                      result = new_call nil, val[0].to_sym
                    
    result
end

def _reduce_282(val, _values, result)
                      result = self.lexer.lineno
                    
    result
end

def _reduce_283(val, _values, result)
                      unless val[2] then
                        result = s(:nil)
                      else
                        result = s(:begin, val[2])
                      end

                      result.line = val[1]
                    
    result
end

def _reduce_284(val, _values, result)
                      debug20 13, val, result
                    
    result
end

def _reduce_285(val, _values, result)
                      result = self.lexer.cmdarg.stack.dup
                      lexer.cmdarg.stack.replace [false] # TODO add api for these
                    
    result
end

def _reduce_286(val, _values, result)
                      lexer.lex_state = :expr_endarg
                    
    result
end

def _reduce_287(val, _values, result)
                      warning "(...) interpreted as grouped expression"
                      lexer.cmdarg.stack.replace val[1]
                      result = val[2]
                    
    result
end

def _reduce_288(val, _values, result)
                      result = val[1] || s(:nil)
                      result.paren = true
                    
    result
end

def _reduce_289(val, _values, result)
                      result = s(:colon2, val[0], val[2].to_sym)
                    
    result
end

def _reduce_290(val, _values, result)
                      result = s(:colon3, val[1].to_sym)
                    
    result
end

def _reduce_291(val, _values, result)
                      result = val[1] || s(:array)
                      result.sexp_type = :array # aref_args is :args
                    
    result
end

def _reduce_292(val, _values, result)
                      result = self.lexer.lineno
                    
    result
end

def _reduce_293(val, _values, result)
                      result = new_hash val
                    
    result
end

def _reduce_294(val, _values, result)
                      result = s(:return)
                    
    result
end

def _reduce_295(val, _values, result)
                      result = new_yield val[2]
                    
    result
end

def _reduce_296(val, _values, result)
                      result = new_yield
                    
    result
end

def _reduce_297(val, _values, result)
                      result = new_yield
                    
    result
end

def _reduce_298(val, _values, result)
                      result = s(:defined, val[3])
                    
    result
end

def _reduce_299(val, _values, result)
                      result = s(:call, val[2], :"!")
                    
    result
end

def _reduce_300(val, _values, result)
                      debug20 14, val, result
                    
    result
end

def _reduce_301(val, _values, result)
                      oper, iter = val[0], val[1]
                      call = oper # FIX
                      iter.insert 1, call
                      result = iter
                      call.line = iter.line
                    
    result
end

# reduce 302 omitted

def _reduce_303(val, _values, result)
                      call, iter = val[0], val[1]
                      block_dup_check call, iter
                      iter.insert 1, call # FIX
                      result = iter
                    
    result
end

def _reduce_304(val, _values, result)
                      result = val[1] # TODO: fix lineno
                    
    result
end

def _reduce_305(val, _values, result)
                      result = new_if val[1], val[3], val[4]
                    
    result
end

def _reduce_306(val, _values, result)
                      result = new_if val[1], val[4], val[3]
                    
    result
end

def _reduce_307(val, _values, result)
                      lexer.cond.push true
                    
    result
end

def _reduce_308(val, _values, result)
                      lexer.cond.pop
                    
    result
end

def _reduce_309(val, _values, result)
                      result = new_while val[5], val[2], true
                    
    result
end

def _reduce_310(val, _values, result)
                      lexer.cond.push true
                    
    result
end

def _reduce_311(val, _values, result)
                      lexer.cond.pop
                    
    result
end

def _reduce_312(val, _values, result)
                      result = new_until val[5], val[2], true
                    
    result
end

def _reduce_313(val, _values, result)
                      (_, line), expr, _, body, _ = val
                      result = new_case expr, body, line
                    
    result
end

def _reduce_314(val, _values, result)
                      (_, line), _, body, _ = val
                      result = new_case nil, body, line
                    
    result
end

def _reduce_315(val, _values, result)
                      lexer.cond.push true
                    
    result
end

def _reduce_316(val, _values, result)
                      lexer.cond.pop
                    
    result
end

def _reduce_317(val, _values, result)
                      result = new_for val[4], val[1], val[7]
                    
    result
end

def _reduce_318(val, _values, result)
                      result = self.lexer.lineno
                    
    result
end

def _reduce_319(val, _values, result)
                      self.comments.push self.lexer.comments
                      if (self.in_def || self.in_single > 0) then
                        yyerror "class definition in method body"
                      end
                      self.env.extend
                    
    result
end

def _reduce_320(val, _values, result)
                      result = new_class val
                      self.env.unextend
                      self.lexer.comments # we don't care about comments in the body
                    
    result
end

def _reduce_321(val, _values, result)
                      result = self.lexer.lineno
                    
    result
end

def _reduce_322(val, _values, result)
                      result = self.in_def
                      self.in_def = false
                    
    result
end

def _reduce_323(val, _values, result)
                      result = self.in_single
                      self.in_single = 0
                      self.env.extend
                    
    result
end

def _reduce_324(val, _values, result)
                      result = new_sclass val
                      self.env.unextend
                      self.lexer.comments # we don't care about comments in the body
                    
    result
end

def _reduce_325(val, _values, result)
                      result = self.lexer.lineno
                    
    result
end

def _reduce_326(val, _values, result)
                      self.comments.push self.lexer.comments
                      yyerror "module definition in method body" if
                        self.in_def or self.in_single > 0

                      self.env.extend
                    
    result
end

def _reduce_327(val, _values, result)
                      result = new_module val
                      self.env.unextend
                      self.lexer.comments # we don't care about comments in the body
                    
    result
end

def _reduce_328(val, _values, result)
                      result = [self.in_def, self.lexer.cmdarg.stack.dup]

                      self.comments.push self.lexer.comments
                      self.in_def = true
                      self.env.extend
                      # TODO: local->cmdargs = cmdarg_stack;
                      # TODO: port local_push_gen and local_pop_gen
                      lexer.cmdarg.stack.replace [false]
                    
    result
end

def _reduce_329(val, _values, result)
                      in_def, cmdarg = val[2]

                      result = new_defn val

                      lexer.cmdarg.stack.replace cmdarg
                      self.env.unextend
                      self.in_def = in_def
                      self.lexer.comments # we don't care about comments in the body
                    
    result
end

def _reduce_330(val, _values, result)
                      self.comments.push self.lexer.comments
                      lexer.lex_state = :expr_fname
                    
    result
end

def _reduce_331(val, _values, result)
                      self.in_single += 1
                      self.env.extend
                      lexer.lex_state = :expr_endfn # force for args
                      result = [lexer.lineno, self.lexer.cmdarg.stack.dup]
                      lexer.cmdarg.stack.replace [false]
                    
    result
end

def _reduce_332(val, _values, result)
                      line, cmdarg = val[5]
                      result = new_defs val
                      result[3].line line

                      lexer.cmdarg.stack.replace cmdarg

                      self.env.unextend
                      self.in_single -= 1
                      self.lexer.comments # we don't care about comments in the body
                    
    result
end

def _reduce_333(val, _values, result)
                      result = s(:break)
                    
    result
end

def _reduce_334(val, _values, result)
                      result = s(:next)
                    
    result
end

def _reduce_335(val, _values, result)
                      result = s(:redo)
                    
    result
end

def _reduce_336(val, _values, result)
                      result = s(:retry)
                    
    result
end

def _reduce_337(val, _values, result)
                      result = value_expr(val[0])
                    
    result
end

# reduce 338 omitted

# reduce 339 omitted

# reduce 340 omitted

# reduce 341 omitted

# reduce 342 omitted

# reduce 343 omitted

# reduce 344 omitted

# reduce 345 omitted

# reduce 346 omitted

# reduce 347 omitted

# reduce 348 omitted

# reduce 349 omitted

# reduce 350 omitted

# reduce 351 omitted

# reduce 352 omitted

# reduce 353 omitted

# reduce 354 omitted

def _reduce_355(val, _values, result)
                      result = s(:if, val[1], val[3], val[4])
                    
    result
end

# reduce 356 omitted

def _reduce_357(val, _values, result)
                      result = val[1]
                    
    result
end

# reduce 358 omitted

def _reduce_359(val, _values, result)
                      val[0].delete_at 1 if val[0][1].nil? # HACK
                    
    result
end

# reduce 360 omitted

def _reduce_361(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_362(val, _values, result)
                      result = s(:array, val[0])
                    
    result
end

def _reduce_363(val, _values, result)
                      result = list_append val[0], val[2]
                    
    result
end

def _reduce_364(val, _values, result)
                      args, = val

                      result = block_var args
                    
    result
end

def _reduce_365(val, _values, result)
                      args, _, _, splat = val

                      result = block_var args, "*#{splat}".to_sym
                    
    result
end

def _reduce_366(val, _values, result)
                      args, _, _, splat, _, args2 = val

                      result = block_var args, "*#{splat}".to_sym, args2
                    
    result
end

def _reduce_367(val, _values, result)
                      args, _, _ = val

                      result = block_var args, :*
                    
    result
end

def _reduce_368(val, _values, result)
                      args, _, _, _, args2 = val

                      result = block_var args, :*, args2
                    
    result
end

def _reduce_369(val, _values, result)
                      _, splat = val

                      result = block_var :"*#{splat}"
                    
    result
end

def _reduce_370(val, _values, result)
                      _, splat, _, args = val

                      result = block_var :"*#{splat}", args
                    
    result
end

def _reduce_371(val, _values, result)
                      result = block_var :*
                    
    result
end

def _reduce_372(val, _values, result)
                      _, _, args = val

                      result = block_var :*, args
                    
    result
end

def _reduce_373(val, _values, result)
                      result = call_args val
                    
    result
end

def _reduce_374(val, _values, result)
                      result = call_args val
                    
    result
end

def _reduce_375(val, _values, result)
                      result = call_args val
                    
    result
end

def _reduce_376(val, _values, result)
                      result = call_args val
                    
    result
end

def _reduce_377(val, _values, result)
                      result = args val
                    
    result
end

# reduce 378 omitted

def _reduce_379(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_380(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_381(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_382(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_383(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_384(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_385(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_386(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_387(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_388(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_389(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_390(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_391(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_392(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_393(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_394(val, _values, result)
 result = 0 
    result
end

# reduce 395 omitted

def _reduce_396(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_397(val, _values, result)
                      self.lexer.command_start = true
                      result = s(:args)
                    
    result
end

def _reduce_398(val, _values, result)
                      result = args val
                    
    result
end

# reduce 399 omitted

def _reduce_400(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_401(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_402(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_403(val, _values, result)
                      result = s(:shadow, val[0].to_sym)
                    
    result
end

# reduce 404 omitted

def _reduce_405(val, _values, result)
                      self.env.extend :dynamic
                      result = self.lexer.lineno

                      result = lexer.lpar_beg
                      lexer.paren_nest += 1
                      lexer.lpar_beg = lexer.paren_nest
                    
    result
end

def _reduce_406(val, _values, result)
                      lpar, args, body = val
                      lexer.lpar_beg = lpar

                      call = new_call nil, :lambda
                      result = new_iter call, args, body
                      self.env.unextend
                    
    result
end

def _reduce_407(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_408(val, _values, result)
                      result = val[0]
                      result = 0 if result == s(:args)
                    
    result
end

def _reduce_409(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_410(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_411(val, _values, result)
                      self.env.extend :dynamic
                      result = self.lexer.lineno
                    
    result
end

def _reduce_412(val, _values, result)
                      result = nil # self.env.dynamic.keys
                    
    result
end

def _reduce_413(val, _values, result)
                      args   = val[2]
                      body   = val[4]
                      result = new_iter nil, args, body
                      result.line = val[1]

                      self.env.unextend
                    
    result
end

def _reduce_414(val, _values, result)
                      # TODO:
                      ## if (nd_type($1) == NODE_YIELD) {
                      ##     compile_error(PARSER_ARG "block given to yield");

                      syntax_error "Both block arg and actual block given." if
                        val[0].block_pass?

                      val = invert_block_call val if inverted? val

                      result = val[1]
                      result.insert 1, val[0]
                    
    result
end

def _reduce_415(val, _values, result)
                      result = new_call val[0], val[2].to_sym, val[3]
                    
    result
end

def _reduce_416(val, _values, result)
                      iter1, _, name, args, iter2 = val

                      call = new_call iter1, name.to_sym, args
                      iter2.insert 1, call

                      result = iter2
                    
    result
end

def _reduce_417(val, _values, result)
                      iter1, _, name, args, iter2 = val

                      call = new_call iter1, name.to_sym, args
                      iter2.insert 1, call

                      result = iter2
                    
    result
end

def _reduce_418(val, _values, result)
                      result = self.lexer.lineno
                    
    result
end

def _reduce_419(val, _values, result)
                      args = self.call_args val[2..-1]
                      result = val[0].concat args.sexp_body
                    
    result
end

def _reduce_420(val, _values, result)
                      result = new_call val[0], val[2].to_sym, val[3], val[1]
                    
    result
end

def _reduce_421(val, _values, result)
                      result = new_call val[0], val[2].to_sym, val[3]
                    
    result
end

def _reduce_422(val, _values, result)
                      result = new_call val[0], val[2].to_sym
                    
    result
end

def _reduce_423(val, _values, result)
                      result = new_call val[0], :call, val[2], val[1]
                    
    result
end

def _reduce_424(val, _values, result)
                      result = new_call val[0], :call, val[2]
                    
    result
end

def _reduce_425(val, _values, result)
                      result = new_super val[1]
                    
    result
end

def _reduce_426(val, _values, result)
                      result = s(:zsuper)
                    
    result
end

def _reduce_427(val, _values, result)
                      result = new_aref val
                    
    result
end

def _reduce_428(val, _values, result)
                      self.env.extend :dynamic
                      result = self.lexer.lineno
                    
    result
end

def _reduce_429(val, _values, result)
                      result = nil # self.env.dynamic.keys
                    
    result
end

def _reduce_430(val, _values, result)
                      _, line, args, _, body, _ = val

                      result = new_iter nil, args, body
                      result.line = line

                      self.env.unextend
                    
    result
end

def _reduce_431(val, _values, result)
                      self.env.extend :dynamic
                      result = self.lexer.lineno
                    
    result
end

def _reduce_432(val, _values, result)
                      result = nil # self.env.dynamic.keys
                    
    result
end

def _reduce_433(val, _values, result)
                      _, line, args, _, body, _ = val

                      result = new_iter nil, args, body
                      result.line = line

                      self.env.unextend
                    
    result
end

def _reduce_434(val, _values, result)
                      result = self.lexer.lineno
                    
    result
end

def _reduce_435(val, _values, result)
                      result = new_when(val[2], val[4])
                      result.line = val[1]
                      result << val[5] if val[5]
                    
    result
end

# reduce 436 omitted

# reduce 437 omitted

def _reduce_438(val, _values, result)
                      (_, line), klasses, var, _, body, rest = val

                      klasses ||= s(:array)
                      klasses << new_assign(var, s(:gvar, :"$!")) if var
                      klasses.line line

                      result = new_resbody(klasses, body)
                      result << rest if rest # UGH, rewritten above
                    
    result
end

def _reduce_439(val, _values, result)
                      result = nil
                    
    result
end

def _reduce_440(val, _values, result)
                      result = s(:array, val[0])
                    
    result
end

# reduce 441 omitted

# reduce 442 omitted

def _reduce_443(val, _values, result)
                      result = val[1]
                    
    result
end

# reduce 444 omitted

def _reduce_445(val, _values, result)
                      _, body = val

                      result = body || s(:nil)
                    
    result
end

# reduce 446 omitted

def _reduce_447(val, _values, result)
                      result = s(:lit, val[0])
                    
    result
end

def _reduce_448(val, _values, result)
                      result = s(:lit, val[0])
                    
    result
end

# reduce 449 omitted

def _reduce_450(val, _values, result)
                      val[0] = s(:dstr, val[0].value) if val[0].sexp_type == :evstr
                      result = val[0]
                    
    result
end

def _reduce_451(val, _values, result)
                      debug20 23, val, result
                    
    result
end

# reduce 452 omitted

def _reduce_453(val, _values, result)
                      result = self.literal_concat val[0], val[1]
                    
    result
end

def _reduce_454(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_455(val, _values, result)
                      result = new_string val
                    
    result
end

def _reduce_456(val, _values, result)
                      result = new_xstring val[1]
                    
    result
end

def _reduce_457(val, _values, result)
                      result = new_regexp val
                    
    result
end

def _reduce_458(val, _values, result)
                      result = s(:array)
                    
    result
end

def _reduce_459(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_460(val, _values, result)
                      result = new_word_list
                    
    result
end

def _reduce_461(val, _values, result)
                      result = val[0].dup << new_word_list_entry(val)
                    
    result
end

# reduce 462 omitted

def _reduce_463(val, _values, result)
                      result = self.literal_concat val[0], val[1]
                    
    result
end

def _reduce_464(val, _values, result)
                      result = s(:array)
                    
    result
end

def _reduce_465(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_466(val, _values, result)
                      result = new_symbol_list
                    
    result
end

def _reduce_467(val, _values, result)
                      result = val[0].dup << new_symbol_list_entry(val)
                    
    result
end

def _reduce_468(val, _values, result)
                      result = s(:array)
                    
    result
end

def _reduce_469(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_470(val, _values, result)
                      result = s(:array)
                    
    result
end

def _reduce_471(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_472(val, _values, result)
                      result = new_qword_list
                    
    result
end

def _reduce_473(val, _values, result)
                      result = val[0].dup << new_qword_list_entry(val)
                    
    result
end

def _reduce_474(val, _values, result)
                      result = new_qsym_list
                    
    result
end

def _reduce_475(val, _values, result)
                      result = val[0].dup << new_qsym_list_entry(val)
                    
    result
end

def _reduce_476(val, _values, result)
                      result = s(:str, "")
                    
    result
end

def _reduce_477(val, _values, result)
                      result = literal_concat(val[0], val[1])
                    
    result
end

def _reduce_478(val, _values, result)
                      result = nil
                    
    result
end

def _reduce_479(val, _values, result)
                      result = literal_concat(val[0], val[1])
                    
    result
end

def _reduce_480(val, _values, result)
                      result = nil
                    
    result
end

def _reduce_481(val, _values, result)
                      result = literal_concat(val[0], val[1])
                    
    result
end

def _reduce_482(val, _values, result)
                      result = new_string val
                    
    result
end

def _reduce_483(val, _values, result)
                      result = lexer.lex_strterm

                      lexer.lex_strterm = nil
                      lexer.lex_state = :expr_beg # TODO: expr_value ?
                    
    result
end

def _reduce_484(val, _values, result)
                      lexer.lex_strterm = val[1]
                      result = s(:evstr, val[2])
                    
    result
end

def _reduce_485(val, _values, result)
                      result = [lexer.lex_strterm,
                                lexer.brace_nest,
                                lexer.string_nest, # TODO: remove
                                lexer.cond.store,
                                lexer.cmdarg.store,
                                lexer.lex_state,
                               ]

                      lexer.lex_strterm = nil
                      lexer.brace_nest  = 0
                      lexer.string_nest = 0

                      lexer.lex_state   = :expr_value
                    
    result
end

def _reduce_486(val, _values, result)
                      # TODO: tRCURLY -> tSTRING_END
                      _, memo, stmt, _ = val

                      lex_strterm, brace_nest, string_nest, oldcond, oldcmdarg, oldlex_state = memo

                      lexer.lex_strterm = lex_strterm
                      lexer.brace_nest  = brace_nest
                      lexer.string_nest = string_nest

                      lexer.cond.restore oldcond
                      lexer.cmdarg.restore oldcmdarg

                      lexer.lex_state = oldlex_state

                      case stmt
                      when Sexp then
                        case stmt.sexp_type
                        when :str, :dstr, :evstr then
                          result = stmt
                        else
                          result = s(:evstr, stmt)
                        end
                      when nil then
                        result = s(:evstr)
                      else
                        debug20 25
                        raise "unknown string body: #{stmt.inspect}"
                      end
                    
    result
end

def _reduce_487(val, _values, result)
 result = s(:gvar, val[0].to_sym) 
    result
end

def _reduce_488(val, _values, result)
 result = s(:ivar, val[0].to_sym) 
    result
end

def _reduce_489(val, _values, result)
 result = s(:cvar, val[0].to_sym) 
    result
end

# reduce 490 omitted

def _reduce_491(val, _values, result)
                      lexer.lex_state = :expr_end
                      result = val[1].to_sym
                    
    result
end

def _reduce_492(val, _values, result)
                      result = val[0].to_sym
                    
    result
end

# reduce 493 omitted

# reduce 494 omitted

# reduce 495 omitted

# reduce 496 omitted

def _reduce_497(val, _values, result)
                      lexer.lex_state = :expr_end
                      result = val[1]

                      result ||= s(:str, "")

                      case result.sexp_type
                      when :dstr then
                        result.sexp_type = :dsym
                      when :str then
                        result = s(:lit, result.last.to_sym)
                      when :evstr then
                        result = s(:dsym, "", result)
                      else
                        debug20 26, val, result
                      end
                    
    result
end

# reduce 498 omitted

def _reduce_499(val, _values, result)
                      result = -val[1] # TODO: pt_testcase
                    
    result
end

# reduce 500 omitted

# reduce 501 omitted

# reduce 502 omitted

# reduce 503 omitted

# reduce 504 omitted

# reduce 505 omitted

# reduce 506 omitted

# reduce 507 omitted

# reduce 508 omitted

def _reduce_509(val, _values, result)
 result = s(:nil)   
    result
end

def _reduce_510(val, _values, result)
 result = s(:self)  
    result
end

def _reduce_511(val, _values, result)
 result = s(:true)  
    result
end

def _reduce_512(val, _values, result)
 result = s(:false) 
    result
end

def _reduce_513(val, _values, result)
 result = s(:str, self.file) 
    result
end

def _reduce_514(val, _values, result)
 result = s(:lit, lexer.lineno) 
    result
end

def _reduce_515(val, _values, result)
                      result =
                        if defined? Encoding then
                          s(:colon2, s(:const, :Encoding), :UTF_8)
                        else
                          s(:str, "Unsupported!")
                        end
                    
    result
end

def _reduce_516(val, _values, result)
                      var = val[0]
                      result = Sexp === var ? var : self.gettable(var)
                    
    result
end

def _reduce_517(val, _values, result)
                      var = val[0]
                      result = Sexp === var ? var : self.gettable(var)
                    
    result
end

def _reduce_518(val, _values, result)
                      result = self.assignable val[0]
                    
    result
end

def _reduce_519(val, _values, result)
                      result = self.assignable val[0]
                      debug20 29, val, result
                    
    result
end

def _reduce_520(val, _values, result)
 result = s(:nth_ref,  val[0]) 
    result
end

def _reduce_521(val, _values, result)
 result = s(:back_ref, val[0]) 
    result
end

def _reduce_522(val, _values, result)
                      result = nil
                    
    result
end

def _reduce_523(val, _values, result)
                      lexer.lex_state = :expr_beg
                    
    result
end

def _reduce_524(val, _values, result)
                      result = val[2]
                    
    result
end

def _reduce_525(val, _values, result)
                      yyerrok
                      result = nil
                      debug20 30, val, result
                    
    result
end

def _reduce_526(val, _values, result)
                      result = val[1]
                      self.lexer.lex_state = :expr_beg
                      self.lexer.command_start = true
                      # TODO:
                      # $<num>$ = parser->parser_in_kwarg;
                      # parser->parser_in_kwarg = 1;
                    
    result
end

def _reduce_527(val, _values, result)
                      # TODO: parser->parser_in_kwarg = $<num>1;
                      result = val[0]
                      self.lexer.lex_state = :expr_beg
                      self.lexer.command_start = true
                    
    result
end

def _reduce_528(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_529(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_530(val, _values, result)
                      result = args val
                    
    result
end

# reduce 531 omitted

def _reduce_532(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_533(val, _values, result)
                      result = nil
                    
    result
end

def _reduce_534(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_535(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_536(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_537(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_538(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_539(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_540(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_541(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_542(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_543(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_544(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_545(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_546(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_547(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_548(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_549(val, _values, result)
                      yyerror "formal argument cannot be a constant"
                    
    result
end

def _reduce_550(val, _values, result)
                      yyerror "formal argument cannot be an instance variable"
                    
    result
end

def _reduce_551(val, _values, result)
                      yyerror "formal argument cannot be a global variable"
                    
    result
end

def _reduce_552(val, _values, result)
                      yyerror "formal argument cannot be a class variable"
                    
    result
end

# reduce 553 omitted

def _reduce_554(val, _values, result)
                      identifier = val[0].to_sym
                      self.env[identifier] = :lvar

                      result = identifier
                    
    result
end

# reduce 555 omitted

def _reduce_556(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_557(val, _values, result)
                      case val[0]
                      when Symbol then
                        result = s(:args)
                        result << val[0]
                      when Sexp then
                        result = val[0]
                      else
                        debug20 32
                        raise "Unknown f_arg type: #{val.inspect}"
                      end
                    
    result
end

def _reduce_558(val, _values, result)
                      list, _, item = val

                      if list.sexp_type == :args then
                        result = list
                      else
                        result = s(:args, list)
                      end

                      result << item
                    
    result
end

# reduce 559 omitted

def _reduce_560(val, _values, result)
                      # TODO: call_args
                      label, _ = val[0] # TODO: fix lineno?
                      identifier = label.to_sym
                      self.env[identifier] = :lvar

                      result = s(:array, s(:kwarg, identifier, val[1]))
                    
    result
end

def _reduce_561(val, _values, result)
                      label, _ = val[0] # TODO: fix lineno?
                      identifier = label.to_sym
                      self.env[identifier] = :lvar

                      result = s(:array, s(:kwarg, identifier))
                    
    result
end

def _reduce_562(val, _values, result)
                      # TODO: call_args
                      label, _ = val[0] # TODO: fix lineno?
                      identifier = label.to_sym
                      self.env[identifier] = :lvar

                      result = s(:array, s(:kwarg, identifier, val[1]))
                    
    result
end

def _reduce_563(val, _values, result)
                      label, _ = val[0] # TODO: fix lineno?
                      identifier = label.to_sym
                      self.env[identifier] = :lvar

                      result = s(:array, s(:kwarg, identifier))
                    
    result
end

# reduce 564 omitted

def _reduce_565(val, _values, result)
                      list, _, item = val
                      result = list << item.last
                    
    result
end

# reduce 566 omitted

def _reduce_567(val, _values, result)
                      result = args val
                    
    result
end

# reduce 568 omitted

# reduce 569 omitted

def _reduce_570(val, _values, result)
                      result = :"**#{val[1]}"
                    
    result
end

def _reduce_571(val, _values, result)
                      result = :"**"
                    
    result
end

def _reduce_572(val, _values, result)
                      result = self.assignable val[0], val[2]
                      # TODO: detect duplicate names
                    
    result
end

def _reduce_573(val, _values, result)
                      result = self.assignable val[0], val[2]
                    
    result
end

def _reduce_574(val, _values, result)
                      result = s(:block, val[0])
                    
    result
end

def _reduce_575(val, _values, result)
                      result = val[0]
                      result << val[2]
                    
    result
end

def _reduce_576(val, _values, result)
                      result = s(:block, val[0])
                    
    result
end

def _reduce_577(val, _values, result)
                      result = self.block_append val[0], val[2]
                    
    result
end

# reduce 578 omitted

# reduce 579 omitted

def _reduce_580(val, _values, result)
                      # TODO: differs from parse.y - needs tests
                      name = val[1].to_sym
                      self.assignable name
                      result = :"*#{name}"
                    
    result
end

def _reduce_581(val, _values, result)
                      name = :"*"
                      self.env[name] = :lvar
                      result = name
                    
    result
end

# reduce 582 omitted

# reduce 583 omitted

def _reduce_584(val, _values, result)
                      identifier = val[1].to_sym

                      self.env[identifier] = :lvar
                      result = "&#{identifier}".to_sym
                    
    result
end

def _reduce_585(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_586(val, _values, result)
                      result = nil
                    
    result
end

# reduce 587 omitted

def _reduce_588(val, _values, result)
                      lexer.lex_state = :expr_beg
                    
    result
end

def _reduce_589(val, _values, result)
                      result = val[2]
                      yyerror "Can't define single method for literals." if
                        result.sexp_type == :lit
                    
    result
end

def _reduce_590(val, _values, result)
                      result = s(:array)
                    
    result
end

def _reduce_591(val, _values, result)
                      result = val[0]
                    
    result
end

# reduce 592 omitted

def _reduce_593(val, _values, result)
                      list = val[0].dup
                      more = val[2].sexp_body
                      list.push(*more) unless more.empty?
                      result = list
                      result.sexp_type = :hash
                    
    result
end

def _reduce_594(val, _values, result)
                      result = s(:array, val[0], val[2])
                    
    result
end

def _reduce_595(val, _values, result)
                      result = s(:array, s(:lit, val[0][0].to_sym), val.last)
                    
    result
end

def _reduce_596(val, _values, result)
                      result = s(:array, s(:kwsplat, val[1]))
                    
    result
end

# reduce 597 omitted

# reduce 598 omitted

# reduce 599 omitted

# reduce 600 omitted

# reduce 601 omitted

# reduce 602 omitted

# reduce 603 omitted

# reduce 604 omitted

# reduce 605 omitted

# reduce 606 omitted

# reduce 607 omitted

# reduce 608 omitted

# reduce 609 omitted

# reduce 610 omitted

# reduce 611 omitted

# reduce 612 omitted

# reduce 613 omitted

# reduce 614 omitted

# reduce 615 omitted

# reduce 616 omitted

# reduce 617 omitted

# reduce 618 omitted

def _reduce_619(val, _values, result)
 yyerrok 
    result
end

# reduce 620 omitted

# reduce 621 omitted

def _reduce_622(val, _values, result)
 yyerrok 
    result
end

def _reduce_623(val, _values, result)
 result = nil; 
    result
end

def _reduce_none(val, _values, result)
  val[0]
end

end   # class Ruby21Parser
