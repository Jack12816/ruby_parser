#
# DO NOT MODIFY!!!!
# This file is automatically generated by Racc 1.4.14
# from Racc grammer file "".
#

require 'racc/parser.rb'
class Ruby24Parser < RubyParser::Parser


require "ruby_lexer"
require "ruby_parser_extras"

# :stopdoc:

# Local Variables: **
# racc-token-length-max:14 **
# End: **
##### State transition tables begin ###

clist = [
'-504,8,72,73,74,12,60,-504,-504,-504,66,67,-504,-504,-504,70,-504,68',
'69,71,33,34,75,76,-504,-98,-504,-504,-504,32,31,30,104,103,105,106,-504',
'-504,22,-504,-504,-504,-504,-504,11,48,10,13,108,107,109,98,59,100,99',
'101,-92,102,110,111,3,94,95,757,45,46,44,-504,-504,-504,-504,-504,-504',
'-504,-504,-504,-504,-504,-504,-504,-504,-94,-91,-504,-504,-504,43,-504',
'-504,36,-99,-504,61,62,-504,-504,63,-504,38,-504,112,-504,47,-504,-504',
'-504,-504,-504,-504,-504,23,-504,272,-504,209,91,83,85,86,87,89,-616',
'-106,-92,84,92,-504,-504,-504,-504,-89,-504,65,-504,585,81,88,90,-507',
'210,96,97,585,-504,-504,-507,-507,-507,-94,-91,-507,-507,-507,-93,-507',
'709,223,737,-92,211,666,-92,-507,272,-507,-507,-507,272,748,756,-105',
'585,749,585,-507,-507,-92,-507,-507,-507,-507,-507,585,-94,-91,-98,-94',
'-91,116,-99,-101,265,-103,115,665,-90,627,218,266,271,-106,-94,-91,-105',
'-101,-507,-507,-507,-507,-507,-507,-507,-507,-507,-507,-507,-507,-507',
'-507,-603,-93,-507,-507,-507,737,-507,-507,-97,-102,-507,-100,737,-507',
'-507,217,-507,-518,-507,826,-507,591,-507,-507,-507,-507,-507,-507,-507',
'116,-507,271,-507,630,115,271,-93,116,116,-93,626,708,115,115,262,-507',
'-507,-507,-507,-103,-507,-289,-507,-100,-93,-102,-96,-97,-289,-289,-289',
'222,-507,-507,-289,-289,116,-289,116,940,321,115,-106,115,-98,-603,-92',
'116,-94,272,-98,-104,115,-104,-99,-98,-519,-289,-289,-99,-289,-289,-289',
'-289,-289,-106,629,223,-105,-101,-106,219,220,-105,-101,116,219,220',
'219,220,115,322,116,457,-93,223,-91,115,-289,-289,-289,-289,-289,-289',
'-289,-289,-289,-289,-289,-289,-289,-289,358,-603,-289,-289,-289,666',
'649,666,-600,-504,-289,-99,-418,-289,-518,-604,-504,530,-289,791,-289',
'792,-289,-289,-289,-289,-289,-289,-289,-604,-289,-103,-289,888,271,-100',
'-103,-102,-106,665,-100,665,-102,611,-607,-289,-289,611,-95,382,-289',
'-607,-607,-607,-95,385,-89,-607,-607,223,-607,-504,-289,-104,223,-104',
'223,388,-504,-607,-104,-98,-601,-600,-105,215,-101,-504,-103,-84,-607',
'-607,214,-607,-607,-607,-607,-607,94,95,-100,212,391,116,-70,-600,666',
'-519,115,83,94,95,611,407,613,612,609,84,613,612,614,-607,-607,-607',
'-607,-607,-607,-607,-607,-607,-607,-607,-607,-607,-607,-507,-504,-607',
'-607,-607,665,650,-507,-607,412,-607,456,-601,-607,-90,216,-507,458',
'-607,459,-607,222,-607,-607,-607,-607,-607,-607,-607,-99,-607,-607,-607',
'490,-601,274,611,500,613,612,609,503,96,97,-607,-607,-607,505,-93,223',
'-607,-607,-607,-607,96,97,-607,-607,-607,681,-607,-607,-607,-102,570',
'-507,-69,-507,-607,-607,-607,-607,-607,-603,-507,573,542,-607,223,541',
'-607,-607,516,-607,-607,-607,-607,-607,565,570,562,561,560,542,563,-607',
'544,613,612,611,573,565,611,562,561,560,767,563,581,580,517,-607,-607',
'-607,-607,-607,-607,-607,-607,-607,-607,-607,-607,-607,-607,524,-607',
'-607,-607,-607,-514,793,-607,581,580,-607,530,-514,-607,-607,277,-607',
'574,-607,611,-607,223,-607,-607,-607,-607,-607,-607,-607,611,-607,-607',
'-607,274,542,613,612,544,613,612,619,852,574,527,769,-607,-607,-607',
'-607,-513,-607,-337,-607,-96,986,409,-513,-289,-337,531,411,410,-607',
'-102,-289,-289,-289,-337,-105,-289,-289,-289,565,-289,562,561,560,570',
'563,-515,613,612,624,-289,-289,-289,-515,243,573,539,613,612,631,-289',
'-289,545,-289,-289,-289,-289,-289,-512,215,219,220,591,-509,-516,-512',
'454,568,551,611,-509,-516,616,-337,401,455,578,577,581,580,-516,-289',
'-289,-289,-289,-289,-289,-289,-289,-289,-289,-289,-289,-289,-289,595',
'-510,-289,-289,-289,-511,794,-289,-510,596,-289,643,-511,-289,-289,618',
'-289,574,-289,622,-289,625,-289,-289,-289,-289,-289,-289,-289,216,-289',
'628,-289,635,-516,613,612,-262,565,637,562,561,560,570,563,-289,-289',
'-289,-289,265,-289,-517,-289,-92,573,116,266,-426,-517,223,115,641,-289',
'-104,-426,-426,-426,-517,-101,-426,-426,-426,116,-426,215,116,568,115',
'219,220,115,523,-426,-426,-426,578,577,581,580,542,521,642,544,-426',
'-426,274,-426,-426,-426,-426,-426,223,-280,116,1010,116,215,215,115',
'-280,115,219,220,533,594,116,-517,644,-280,653,115,574,455,592,-426',
'-426,-426,-426,-426,-426,-426,-426,-426,-426,-426,-426,-426,-426,243',
'216,-426,-426,-426,581,580,-426,243,274,-426,243,777,-426,-426,243,-426',
'223,-426,223,-426,-94,-426,-426,-426,-426,-426,-426,-426,-280,-426,-426',
'-426,216,216,223,-103,565,-84,562,561,560,685,563,-297,-426,-426,223',
'-426,535,-426,-297,-297,-297,-91,696,-297,-297,-297,701,-297,-290,-426',
'856,826,702,215,705,-290,-100,-297,-297,-290,751,505,723,711,-290,714',
'-290,-297,-297,753,-297,-297,-297,-297,-297,-290,-289,715,-289,717,215',
'219,220,-289,719,-289,721,967,-604,729,-604,730,-289,731,-289,733,753',
'591,-297,-297,-297,-297,-297,-297,-297,-297,-297,-297,-297,-297,-297',
'-297,740,-290,-297,-297,-297,770,216,-297,771,277,-297,772,-290,-297',
'-297,-263,-297,778,-297,490,-297,490,-297,-297,-297,-297,-297,-297,-297',
'-289,-297,-289,-297,216,856,826,565,223,562,561,560,796,563,262,-281',
'-297,-297,503,-297,505,-297,-281,-281,-281,696,223,-281,-281,-281,274',
'-281,215,-297,274,696,243,215,826,967,223,-281,-281,-281,1017,723,223',
'850,753,223,826,-281,-281,1015,-281,-281,-281,-281,-281,879,880,860',
'223,881,110,111,565,-264,562,561,560,887,563,565,890,562,561,560,714',
'563,893,896,-281,-281,-281,-281,-281,-281,-281,-281,-281,-281,-281,-281',
'-281,-281,898,216,-281,-281,-281,900,216,-281,723,223,-281,902,903,-281',
'-281,723,-281,726,-281,696,-281,911,-281,-281,-281,-281,-281,-281,-281',
'-262,-281,915,-281,565,917,562,561,560,570,563,119,120,121,122,123,-281',
'-281,-281,-281,573,-281,-627,-281,119,120,121,122,123,-627,-627,-627',
'918,-281,-627,-627,-627,223,-627,714,921,923,568,761,243,925,927,-627',
'-627,-627,927,578,577,581,580,223,933,935,-627,-627,937,-627,-627,-627',
'-627,-627,565,223,562,561,560,565,563,562,561,560,240,563,947,948,242',
'241,238,239,223,951,-265,574,961,-627,-627,-627,-627,-627,-627,-627',
'-627,-627,-627,-627,-627,-627,-627,968,723,-627,-627,-627,969,723,-627',
'971,274,-627,972,988,-627,-627,726,-627,990,-627,991,-627,995,-627,-627',
'-627,-627,-627,-627,-627,243,-627,-627,-627,714,1000,565,1002,562,561',
'560,1004,563,243,1006,-608,-627,-627,1006,-627,1013,-627,-608,-608,-608',
'1018,1019,-608,-608,-608,243,-608,240,-627,927,927,242,241,238,239,-608',
'-608,-608,-608,723,240,257,258,927,242,241,-608,-608,932,-608,-608,-608',
'-608,-608,1024,988,-604,240,-603,246,243,242,241,238,239,701,988,244',
'565,245,562,561,560,1047,563,1048,1049,-608,-608,-608,-608,-608,-608',
'-608,-608,-608,-608,-608,-608,-608,-608,1050,240,-608,-608,-608,242',
'241,-608,1006,1006,-608,1006,223,-608,-608,723,-608,927,-608,988,-608',
'1006,-608,-608,-608,-608,-608,-608,-608,,-608,-608,-608,565,,562,561',
'560,570,563,119,120,121,122,123,-608,-608,-608,-608,573,-608,-609,-608',
'119,120,121,122,123,-609,-609,-609,,-608,-609,-609,-609,,-609,243,,',
'568,,,,,-609,-609,-609,-609,578,577,581,580,257,258,,-609,-609,,-609',
'-609,-609,-609,-609,964,,562,561,560,240,563,246,,242,241,238,239,223',
',244,964,245,562,561,560,574,563,-609,-609,-609,-609,-609,-609,-609',
'-609,-609,-609,-609,-609,-609,-609,,,-609,-609,-609,,,-609,,,-609,,',
'-609,-609,,-609,,-609,,-609,,-609,-609,-609,-609,-609,-609,-609,,-609',
'-609,-609,,,,,,,,,,,,,-609,-609,-609,-609,,-609,,-609,,297,72,73,74',
'12,60,,,-609,66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31,30,104,103',
'105,106,,,22,,,,,654,11,48,,13,108,107,109,98,59,100,99,101,,102,110',
'111,,94,95,,45,46,44,243,247,252,253,254,249,251,259,260,255,256,,236',
'237,,,257,258,,43,,,299,,,61,62,,,63,,38,240,,246,47,242,241,238,239',
'250,248,244,23,245,,,,91,83,85,86,87,89,,,,84,92,,261,,-239,,,65,,,81',
'88,90,,,96,97,297,72,73,74,12,60,,,,66,67,,,,70,,68,69,71,33,34,75,76',
',,,,,32,31,30,104,103,105,106,,,22,,,,,638,11,48,,13,108,107,109,98',
'59,100,99,101,,102,110,111,,94,95,,45,46,44,243,247,252,253,254,249',
'251,259,260,255,256,,236,237,,,257,258,,43,,,36,,,61,62,,,63,,38,240',
',246,47,242,241,238,239,250,248,244,23,245,,,,91,83,85,86,87,89,,,,84',
'92,,261,,,,,65,,,81,88,90,,,96,97,297,72,73,74,12,60,,,,66,67,,,,70',
',68,69,71,33,34,75,76,,,,,,32,31,30,104,103,105,106,,,22,,,,,654,11',
'48,,13,108,107,109,98,59,100,99,101,,102,110,111,,94,95,,45,46,44,243',
'247,252,253,254,249,251,259,260,255,256,,236,237,,,257,258,,43,,,36',
',,61,62,,,63,,38,240,,246,47,242,241,238,239,250,248,244,23,245,,,,91',
'83,85,86,87,89,,,,84,92,,261,,,,,65,,,81,88,90,,,96,97,297,72,73,74',
'12,60,,,,66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31,30,104,103,105',
'106,,,22,,,,,,11,48,,13,108,107,109,98,59,100,99,101,,102,110,111,,94',
'95,,45,46,44,243,247,252,253,254,249,251,259,260,255,256,,236,237,,',
'257,258,,43,,,299,,,61,62,,,63,,38,240,,246,47,242,241,238,239,250,248',
'244,23,245,,,,91,83,85,86,87,89,,,,84,92,,261,,,,,65,,,81,88,90,,,96',
'97,297,72,73,74,12,60,,,,66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31',
'30,104,103,105,106,,,22,,,,,,11,48,,13,108,107,109,98,59,100,99,101',
',102,110,111,,94,95,,45,46,44,243,247,252,253,254,249,251,259,260,255',
'256,,236,237,,,257,258,,43,,,299,,,61,62,,,63,,38,240,,246,47,242,241',
'238,239,250,248,244,23,245,,,,91,83,85,86,87,89,,,,84,92,,261,,,,,65',
',,81,88,90,,,96,97,297,72,73,74,12,60,,,,66,67,,,,70,,68,69,71,33,34',
'75,76,,,,,,32,31,30,104,103,105,106,,,22,,,,,,11,48,,13,108,107,109',
'98,59,100,99,101,,102,110,111,,94,95,,45,46,44,243,247,252,253,254,249',
'251,259,260,255,256,,236,237,,,257,258,,43,,,36,,,61,62,,,63,,38,240',
',246,47,242,241,238,239,250,248,244,23,245,,,,91,83,85,86,87,89,,,,84',
'92,,261,,,,,65,,,81,88,90,,,96,97,8,72,73,74,12,60,,,,66,67,,,,70,,68',
'69,71,33,34,75,76,,,,,,32,31,30,104,103,105,106,,,22,,,,,,11,48,10,13',
'108,107,109,98,59,100,99,101,,102,110,111,,94,95,,45,46,44,243,247,252',
'253,254,249,251,259,260,255,256,,236,237,,,257,258,,43,,,36,,,61,62',
',,63,,38,240,,246,47,242,241,238,239,250,248,244,23,245,,,,91,83,85',
'86,87,89,,,,84,92,223,261,,,,,65,,,81,88,90,,,96,97,297,72,73,74,12',
'60,,,,66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31,30,104,103,105,106',
',,22,,,,,,11,48,,13,108,107,109,98,59,100,99,101,,102,110,111,,94,95',
',45,46,44,243,247,252,253,254,249,251,259,260,255,256,,236,237,,,257',
'258,,43,,,36,,,61,62,,,63,,38,240,,246,47,242,241,238,239,250,248,244',
'23,245,,,,91,83,85,86,87,89,,,,84,92,,261,,,,,65,,,81,88,90,,,96,97',
'297,72,73,74,12,60,,,,66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31,30',
'104,103,105,106,,,22,,,,,,11,48,,13,108,107,109,98,59,100,99,101,,102',
'110,111,,94,95,,45,46,44,243,247,252,253,254,249,251,259,260,255,256',
',236,237,,,257,258,,43,,,36,,,61,62,,,63,,38,240,,246,47,242,241,238',
'239,250,248,244,23,245,,,,91,83,85,86,87,89,,,,84,92,,261,,,,,65,,,81',
'88,90,,,96,97,297,72,73,74,12,60,,,,66,67,,,,70,,68,69,71,33,34,75,76',
',,,,,32,31,30,104,103,105,106,,,22,,,,,,11,48,,13,108,107,109,98,59',
'100,99,101,,102,110,111,,94,95,,45,46,44,243,247,252,253,254,249,251',
'259,260,255,256,,236,237,,,257,258,,43,,,36,,,61,62,,,63,,38,240,,246',
'47,242,241,238,239,250,248,244,23,245,,,,91,83,85,86,87,89,,,,84,92',
',261,,,,,65,,,81,88,90,,,96,97,297,72,73,74,12,60,,,,66,67,,,,70,,68',
'69,71,33,34,75,76,,,,,,32,31,30,104,103,105,106,,,22,,,,,,11,48,,13',
'108,107,109,98,59,100,99,101,,102,110,111,,94,95,,45,46,44,243,247,252',
'253,254,249,251,259,260,255,256,,236,237,,,257,258,,43,,,36,,,61,62',
',,63,,38,240,,246,47,242,241,238,239,250,248,244,23,245,,,,91,83,85',
'86,87,89,,,,84,92,,261,,,,,65,,,81,88,90,,,96,97,297,72,73,74,12,60',
',,,66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31,30,104,103,105,106,',
',22,,,,,,11,48,,13,108,107,109,98,59,100,99,101,,102,110,111,,94,95',
',45,46,44,243,247,252,253,254,249,251,259,260,255,256,,236,237,,,257',
'258,,43,,,36,,,61,62,,,63,,38,240,,246,47,242,241,238,239,250,248,244',
'23,245,,,,91,83,85,86,87,89,,,,84,92,,261,,,,,65,,,81,88,90,,,96,97',
'297,72,73,74,12,60,,,,66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31,30',
'104,103,105,106,,,22,,,,,,11,48,,13,108,107,109,98,59,100,99,101,,102',
'110,111,,94,95,,45,46,44,243,247,252,253,254,249,251,259,260,255,256',
',236,237,,,257,258,,43,,,36,,,61,62,,,63,,38,240,,246,47,242,241,238',
'239,250,248,244,23,245,,,,91,83,85,86,87,89,,,,84,92,,261,,,,,65,,,81',
'88,90,,,96,97,297,72,73,74,12,60,,,,66,67,,,,70,,68,69,71,33,34,75,76',
',,,,,32,31,30,104,103,105,106,,,22,,,,,,11,48,,13,108,107,109,98,59',
'100,99,101,,102,110,111,,94,95,,45,46,44,243,247,252,253,254,249,251',
'259,260,255,256,,236,237,,,257,258,,43,,,36,,,61,62,,,63,,38,240,,246',
'47,242,241,238,239,250,248,244,23,245,,,,91,83,85,86,87,89,,,,84,92',
',261,,,,,65,,,81,88,90,,,96,97,297,72,73,74,12,60,,,,66,67,,,,70,,68',
'69,71,33,34,75,76,,,,,,32,31,30,104,103,105,106,,,22,,,,,,11,48,,13',
'108,107,109,98,59,100,99,101,,102,110,111,,94,95,,45,46,44,243,247,252',
'253,254,249,251,259,260,255,256,,236,237,,,257,258,,43,,,36,,,61,62',
',,63,,38,240,,246,47,242,241,238,239,250,248,244,23,245,,,,91,83,85',
'86,87,89,,,,84,92,,261,,,,,65,,,81,88,90,,,96,97,297,72,73,74,12,60',
',,,66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31,30,104,103,105,106,',
',22,,,,,,11,48,,13,108,107,109,98,59,100,99,101,,102,110,111,,94,95',
',45,46,44,243,247,252,253,254,249,251,259,260,255,256,,236,237,,,257',
'258,,43,,,36,,,61,62,,,63,,38,240,,246,47,242,241,238,239,250,248,244',
'23,245,,,,91,83,85,86,87,89,,,,84,92,,261,,,,,65,,,81,88,90,,,96,97',
'297,72,73,74,12,60,,,,66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31,30',
'104,103,105,106,,,22,,,,,,11,48,,13,108,107,109,98,59,100,99,101,,102',
'110,111,,94,95,,45,46,44,243,247,252,253,254,249,251,259,260,255,256',
',236,237,,,257,258,,43,,,36,,,61,62,,,63,,38,240,,246,47,242,241,238',
'239,250,248,244,23,245,,,,91,83,85,86,87,89,,,,84,92,,261,,,,,65,,,81',
'88,90,,,96,97,297,72,73,74,12,60,,,,66,67,,,,70,,68,69,71,33,34,75,76',
',,,,,32,31,30,104,103,105,106,,,22,,,,,,11,48,,13,108,107,109,98,59',
'100,99,101,,102,110,111,,94,95,,45,46,44,243,247,252,253,254,249,251',
'259,260,255,256,,-628,-628,,,257,258,,43,,,36,,,61,62,,,63,,38,240,',
'246,47,242,241,238,239,250,248,244,23,245,,,,91,83,85,86,87,89,,,,84',
'92,,,,,,,65,,,81,88,90,,,96,97,297,72,73,74,12,60,,,,66,67,,,,70,,68',
'69,71,33,34,75,76,,,,,,32,31,30,104,103,105,106,,,22,,,,,,11,48,,13',
'108,107,109,98,59,100,99,101,,102,110,111,,94,95,,45,46,44,243,247,252',
'253,254,249,251,259,260,255,256,,-628,-628,,,257,258,,43,,,36,,,61,62',
',,63,,38,240,,246,47,242,241,238,239,250,248,244,23,245,,,,91,83,85',
'86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,297,72,73,74,12,60,,,',
'66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31,30,104,103,105,106,,,22',
',,,,,11,48,,13,108,107,109,98,59,100,99,101,,102,110,111,,94,95,,45',
'46,44,243,-628,-628,-628,-628,249,251,,,-628,-628,,,,,,257,258,,43,',
',36,,,61,62,,,63,,38,240,,246,47,242,241,238,239,250,248,244,23,245',
',,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,297,72,73',
'74,12,60,,,,66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31,30,104,103',
'105,106,,,22,,,,,,11,48,,13,108,107,109,98,59,100,99,101,,102,110,111',
',94,95,,45,46,44,243,,,,,,,,,,,,,,,,257,258,,43,,,36,,243,61,62,,,63',
',38,240,,246,47,242,241,238,239,257,258,244,23,245,,,,91,83,85,86,87',
'89,,,240,84,92,,242,241,238,239,,65,,,81,88,90,,,96,97,297,72,73,74',
'12,60,,,,66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31,30,104,103,105',
'106,,,22,,,,,,11,48,,13,108,107,109,98,59,100,99,101,,102,110,111,,94',
'95,,45,46,44,243,,,,,,,,,,,,,,,,257,258,,43,,,36,,,61,62,,,63,,38,240',
',246,47,242,241,238,239,,,244,23,245,,,,91,83,85,86,87,89,,,,84,92,',
',,,,,65,,,81,88,90,,,96,97,297,72,73,74,12,60,,,,66,67,,,,70,,68,69',
'71,33,34,75,76,,,,,,32,31,30,104,103,105,106,,,22,,,,,,11,48,,13,108',
'107,109,98,59,100,99,101,,102,110,111,,94,95,,45,46,44,243,-628,-628',
'-628,-628,249,251,,,-628,-628,,,,,,257,258,,43,,,36,,,61,62,,,63,,38',
'240,,246,47,242,241,238,239,250,248,244,23,245,,,,91,83,85,86,87,89',
',,,84,92,,,,,,,65,,,81,88,90,,,96,97,297,72,73,74,12,60,,,,66,67,,,',
'70,,68,69,71,33,34,75,76,,,,,,32,31,30,104,103,105,106,,,22,,,,,,11',
'48,,13,108,107,109,98,59,100,99,101,,102,110,111,,94,95,,45,46,44,243',
'-628,-628,-628,-628,249,251,,,-628,-628,,,,,,257,258,,43,,,36,,,61,62',
',,63,,38,240,,246,47,242,241,238,239,250,248,244,23,245,,,,91,83,85',
'86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,297,72,73,74,12,60,,,',
'66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31,30,104,103,105,106,,,22',
',,,,,11,48,,13,108,107,109,98,59,100,99,101,,102,110,111,,94,95,,45',
'46,44,243,-628,-628,-628,-628,249,251,,,-628,-628,,,,,,257,258,,43,',
',36,,,61,62,,,63,,38,240,,246,47,242,241,238,239,250,248,244,23,245',
',,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,297,72,73',
'74,12,60,,,,66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31,30,104,103',
'105,106,,,22,,,,,,11,48,,13,108,107,109,98,59,100,99,101,,102,110,111',
',94,95,,45,46,44,243,-628,-628,-628,-628,249,251,,,-628,-628,,,,,,257',
'258,,43,,,36,,,61,62,,,63,,38,240,,246,47,242,241,238,239,250,248,244',
'23,245,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,297',
'72,73,74,12,60,,,,66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31,30,104',
'103,105,106,,,22,,,,,,11,48,,13,108,107,109,98,59,100,99,101,,102,110',
'111,,94,95,,45,46,44,243,-628,-628,-628,-628,249,251,,,-628,-628,,,',
',,257,258,,43,,,36,,,61,62,,,63,,38,240,,246,47,242,241,238,239,250',
'248,244,23,245,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96',
'97,297,72,73,74,12,60,,,,66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31',
'30,104,103,105,106,,,22,,,,,,11,48,,13,108,107,109,98,59,100,99,101',
',102,110,111,,94,95,,45,46,44,243,247,252,253,254,249,251,,,255,256',
',,,,,257,258,,43,,,36,,,61,62,,,63,,38,240,,246,47,242,241,238,239,250',
'248,244,23,245,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96',
'97,297,72,73,74,12,60,,,,66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31',
'30,104,103,105,106,,,22,,,,,,11,48,,13,108,107,109,98,59,100,99,101',
',102,110,111,,94,95,,45,46,44,243,247,252,253,254,249,251,259,,255,256',
',,,,,257,258,,43,,,36,,,61,62,,,63,,38,240,,246,47,242,241,238,239,250',
'248,244,23,245,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96',
'97,72,73,74,12,60,,,,66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31,30',
'104,103,105,106,,,22,,,,,,11,48,10,13,108,107,109,98,59,100,99,101,',
'102,110,111,,94,95,,45,46,44,243,,,,,,,,,,,,,,,,257,258,,43,,,36,,,61',
'62,,,63,,38,240,,246,47,242,241,238,239,,,,23,,,,,91,83,85,86,87,89',
',,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68',
'69,71,33,34,75,76,,,,,,32,31,30,104,103,105,106,,,235,,,,,,,48,,,108',
'107,109,98,59,100,99,101,,102,110,111,,94,95,,45,46,44,243,,,,,,,,,',
',,,,,,257,258,,228,,,234,,,61,62,,,63,,,240,,246,47,242,241,238,239',
',,,233,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,72',
'73,74,,60,,,,66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31,30,104,103',
'105,106,,,235,,,,,,,48,,,108,107,109,98,59,100,99,101,290,102,110,111',
',94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,228,,,234,,,61,62,,,63,,286,,284',
',47,,,,,,,,233,,,,,91,287,85,86,87,89,,,,84,288,,,,,,,65,,291,81,88',
'90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32',
'31,30,104,103,105,106,,,235,,,,,,,48,,,108,107,109,98,59,100,99,101',
'290,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,228,,,234,,,61,62',
',,63,,286,,284,,47,,,,,,,,233,,,,,91,287,85,86,87,89,,,,84,288,,,,,',
',65,,291,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,33,34',
'75,76,,,,,,32,31,30,104,103,105,106,,,235,,,,,,,48,,,108,107,109,98',
'59,100,99,101,290,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,228',
',,234,,,61,62,,,63,,286,,284,,47,,,,,,,,233,,,,,91,287,85,86,87,89,',
',,84,288,,,,,,,65,,291,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70',
',68,69,71,314,315,75,76,,,,,,310,311,317,104,103,105,106,,,235,,,,,',
',312,,,108,107,109,98,59,100,99,101,,102,110,111,,94,95,,,,318,,,,,',
',,,,,,,,,,,,,,308,,,304,,,61,62,,,63,,303,,,,,,,,,,,,,,,,,91,83,85,86',
'87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,',
'70,,68,69,71,314,315,75,76,,,,,,310,311,317,104,103,105,106,,,235,,',
',,,,312,,,108,107,109,98,59,100,99,101,,102,110,111,,94,95,,,,318,,',
',,,,,,,,,,,,,,,,,308,,,234,,,61,62,,,63,,,,,,,,,,,,,,,,,,,91,83,85,86',
'87,89,,,,84,92,,,,320,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,,66,67',
',,,70,,68,69,71,314,315,75,76,,,,,,310,311,317,104,103,105,106,,,235',
',,,,,,48,,,108,107,109,98,59,100,99,101,,102,110,111,,94,95,,45,46,44',
',,,,,,,,,,,,,,,,,,,228,,,234,,,61,62,,,63,,,,,,47,,,,,,,,233,,,,,91',
'83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,',
'66,67,,,,70,,68,69,71,314,315,75,76,,,,,,310,311,317,104,103,105,106',
',,235,,,,,,,48,,,108,107,109,98,59,100,99,101,,102,110,111,,94,95,,45',
'46,44,,,,,,,,,,,,,,,,,,,,228,,,234,,,61,62,,,63,,,,,,47,,,,,,,,233,',
',,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,',
'60,,,,66,67,,,,70,,68,69,71,314,315,75,76,,,,,,310,311,317,104,103,105',
'106,,,235,,,,,,,48,,,108,107,109,98,59,100,99,101,,102,110,111,,94,95',
',45,46,44,,,,,,,,,,,,,,,,,,,,228,,,234,,,61,62,,,63,,,,,,47,,,,,,,,233',
',,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74',
',60,,,,66,67,,,,70,,68,69,71,314,315,75,76,,,,,,310,311,317,104,103',
'105,106,,,235,,,,,,,48,,,108,107,109,98,59,100,99,101,290,102,110,111',
',94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,228,,,234,,,61,62,,,63,,286,,,,47',
',,,,,,,233,,,,,91,287,85,86,87,89,,,,84,288,,,,,,,65,,291,81,88,90,',
',96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31',
'30,104,103,105,106,,,22,,,,,,,48,,,108,107,109,98,59,100,99,101,,102',
'110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,228,,,234,,,61,62,,,63,',
',,,,47,,,,,,,,23,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90',
',,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31',
'30,104,103,105,106,,,22,,,,,,,48,,,108,107,109,98,59,100,99,101,,102',
'110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,228,,,234,,,61,62,,,63,',
',,,,47,,,,,,,,23,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90',
',,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31',
'30,104,103,105,106,,,22,,,,,,,48,,,108,107,109,98,59,100,99,101,,102',
'110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,228,,,234,,,61,62,,,63,',
',,,,47,,,,,,,,23,,,,,91,83,85,86,87,89,,,,84,92,116,,,,,115,65,,,81',
'88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,314,315,75,76,,',
',,,310,311,317,104,103,105,106,,,235,,,,,,,312,,,108,107,109,98,59,100',
'99,101,,102,110,111,,94,95,,,,318,,,,,,,,,,,,,,,,,,,,352,,,36,,,61,62',
',,63,,38,,,,,,,,,,,,,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88',
'90,,,96,97,72,73,74,12,60,,,,66,67,,,,70,,68,69,71,33,34,75,76,,,,,',
'32,31,30,104,103,105,106,,,22,,,,,,11,48,10,13,108,107,109,98,59,100',
'99,101,,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,43,,,36,,,61',
'62,,,63,,38,,,,47,,,,,,,,23,,,,,91,83,85,86,87,89,,,,84,92,,,,,,401',
'65,,,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,33,34,75',
'76,,,,,,32,31,30,104,103,105,106,,,22,,,,,,,48,,,108,107,109,98,59,100',
'99,101,,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,228,,,234,,',
'61,62,,,63,,,,,,47,,,,,,,,23,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65',
',,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,33,34,75,76',
',,,,,32,31,30,104,103,105,106,,,22,,,,,,,48,,,108,107,109,98,59,100',
'99,101,,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,228,,,234,,',
'61,62,,,63,,,,,,47,,,,,,,,23,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65',
',,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,33,34,75,76',
',,,,,32,31,30,104,103,105,106,,,22,,,,,,,48,,,108,107,109,98,59,100',
'99,101,,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,228,,,234,,',
'61,62,,,63,,,,,,47,,,,,,,,23,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65',
',,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,33,34,75,76',
',,,,,32,31,30,104,103,105,106,,,22,,,,,,,48,,,108,107,109,98,59,100',
'99,101,,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,228,,,234,,',
'61,62,,,63,,,,,,47,,,,,,,,23,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65',
',,81,88,90,,,96,97,72,73,74,12,60,,,,66,67,,,,70,,68,69,71,33,34,75',
'76,,,,,,32,31,30,104,103,105,106,,,22,,,,,,11,48,,13,108,107,109,98',
'59,100,99,101,,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,43,,',
'36,,,61,62,,,63,,38,,,,47,,,,,,,,23,,,,,91,83,85,86,87,89,,,,84,92,',
',,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,33',
'34,75,76,,,,,,32,31,30,104,103,105,106,,,235,,,,,,,48,,,108,107,109',
'98,59,100,99,101,,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,228',
',,234,,,61,62,,,63,,417,,,,47,,,,,,,,233,,,,,91,83,85,86,87,89,,,,84',
'92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71',
'33,34,75,76,,,,,,32,31,30,104,103,105,106,,,235,,,,,,,48,,,108,107,109',
'98,59,100,99,101,,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,228',
',,234,,,61,62,,,63,,,,,,47,,,,,,,,233,,,,,91,83,85,86,87,89,,,,84,92',
',,,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,33',
'34,75,76,,,,,,32,31,30,104,103,105,106,,,235,,,,,,,48,,,108,107,109',
'98,59,100,99,101,290,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,',
',228,,,234,,,61,62,,,63,,286,,284,,47,,,,,,,,233,,,,,91,287,85,86,87',
'89,,,,84,288,,,,,,,65,,291,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,',
',70,,68,69,71,33,34,75,76,,,,,,32,31,30,104,103,105,106,,,235,,,,,,',
'48,,,108,107,109,98,59,100,99,101,,102,110,111,,94,95,,45,46,44,,,,',
',,,,,,,,,,,,,,,228,,,234,,,61,62,,,63,,,,,,47,,,,,,,,233,,,,,91,83,85',
'86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,,66,67',
',,,70,,68,69,71,33,34,75,76,,,,,,32,31,30,104,103,105,106,,,235,,,,',
',,48,,,108,107,109,98,59,100,99,101,,102,110,111,,94,95,,45,46,44,,',
',,,,,,,,,,,,,,,,,228,,,234,,,61,62,,,63,,417,,,,47,,,,,,,,233,,,,,91',
'83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,',
'66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31,30,104,103,105,106,,,22',
',,,,,,48,,,108,107,109,98,59,100,99,101,,102,110,111,,94,95,,45,46,44',
',,,,,,,,,,,,,,,,,,,228,,,234,,,61,62,,,63,,,,,,47,,,,,,,,23,,,,,91,83',
'85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,,66',
'67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31,30,104,103,105,106,,,22,,',
',,,,48,,,108,107,109,98,59,100,99,101,,102,110,111,,94,95,,45,46,44',
',,,,,,,,,,,,,,,,,,,228,,,234,,,61,62,,,63,,,,,,47,,,,,,,,23,,,,,91,83',
'85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,,66',
'67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31,30,104,103,105,106,,,22,,',
',,,,48,,,108,107,109,98,59,100,99,101,,102,110,111,,94,95,,45,46,44',
',,,,,,,,,,,,,,,,,,,228,,,234,,,61,62,,,63,,,,,,47,,,,,,,,23,,,,,91,83',
'85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,,66',
'67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31,30,104,103,105,106,,,22,,',
',,,,48,,,108,107,109,98,59,100,99,101,,102,110,111,,94,95,,45,46,44',
',,,,,,,,,,,,,,,,,,,228,,,234,,,61,62,,,63,,,,,,47,,,,,,,,23,,,,,91,83',
'85,86,87,89,,,,84,92,223,,,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,',
'66,67,,,,70,,68,69,71,314,315,75,76,,,,,,310,311,317,104,103,105,106',
',,235,,,,,,,48,,,108,107,109,98,59,100,99,101,,102,110,111,,94,95,,45',
'46,44,,,,,,,,,,,,,,,,,,,,228,,,234,,,61,62,,,63,,,,,,47,,,,,,,,233,',
',,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,',
'60,,,,66,67,,,,70,,68,69,71,314,315,75,76,,,,,,310,311,317,104,103,105',
'106,,,235,,,,,,,48,,,108,107,109,98,59,100,99,101,,102,110,111,,94,95',
',45,46,44,,,,,,,,,,,,,,,,,,,,228,,,234,,,61,62,,,63,,,,,,47,,,,,,,,233',
',,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74',
',60,,,,66,67,,,,70,,68,69,71,314,315,75,76,,,,,,310,311,317,104,103',
'105,106,,,235,,,,,,,48,,,108,107,109,98,59,100,99,101,,102,110,111,',
'94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,228,,,234,,,61,62,,,63,,,,,,47,,',
',,,,,233,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97',
'72,73,74,,60,,,,66,67,,,,70,,68,69,71,314,315,75,76,,,,,,310,311,317',
'104,103,105,106,,,235,,,,,,,48,,,108,107,109,98,59,100,99,101,,102,110',
'111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,228,,,234,,,61,62,,,63,,,,,',
'47,,,,,,,,233,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96',
'97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,314,315,75,76,,,,,,310,311',
'317,104,103,105,106,,,235,,,,,,,48,,,108,107,109,98,59,100,99,101,,102',
'110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,228,,,234,,,61,62,,,63,',
',,,,47,,,,,,,,233,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90',
',,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,314,315,75,76,,,,,,310',
'311,317,104,103,105,106,,,235,,,,,,,48,,,108,107,109,98,59,100,99,101',
',102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,228,,,234,,,61,62,',
',63,,,,,,47,,,,,,,,233,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81',
'88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,314,315,75,76,,',
',,,310,311,317,104,103,105,106,,,235,,,,,,,48,,,108,107,109,98,59,100',
'99,101,,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,228,,,234,,',
'61,62,,,63,,,,,,47,,,,,,,,233,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65',
',,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,314,315,75',
'76,,,,,,310,311,317,104,103,105,106,,,235,,,,,,,48,,,108,107,109,98',
'59,100,99,101,,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,228,',
',234,,,61,62,,,63,,,,,,47,,,,,,,,233,,,,,91,83,85,86,87,89,,,,84,92',
',,,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,314',
'315,75,76,,,,,,310,311,317,104,103,105,106,,,235,,,,,,,48,,,108,107',
'109,98,59,100,99,101,,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,',
',,228,,,234,,,61,62,,,63,,,,,,47,,,,,,,,233,,,,,91,83,85,86,87,89,,',
',84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69',
'71,314,315,75,76,,,,,,310,311,317,104,103,105,106,,,235,,,,,,,48,,,108',
'107,109,98,59,100,99,101,,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,',
',,,,,,228,,,234,,,61,62,,,63,,,,,,47,,,,,,,,233,,,,,91,83,85,86,87,89',
',,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68',
'69,71,314,315,75,76,,,,,,310,311,317,104,103,105,106,,,235,,,,,,,48',
',,108,107,109,98,59,100,99,101,,102,110,111,,94,95,,45,46,44,,,,,,,',
',,,,,,,,,,,,228,,,234,,,61,62,,,63,,,,,,47,,,,,,,,233,,,,,91,83,85,86',
'87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,',
'70,,68,69,71,314,315,75,76,,,,,,310,311,317,104,103,105,106,,,235,,',
',,,,48,,,108,107,109,98,59,100,99,101,,102,110,111,,94,95,,45,46,44',
',,,,,,,,,,,,,,,,,,,228,,,234,,,61,62,,,63,,,,,,47,,,,,,,,233,,,,,91',
'83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,',
'66,67,,,,70,,68,69,71,314,315,75,76,,,,,,310,311,317,104,103,105,106',
',,235,,,,,,,48,,,108,107,109,98,59,100,99,101,,102,110,111,,94,95,,45',
'46,44,,,,,,,,,,,,,,,,,,,,228,,,234,,,61,62,,,63,,,,,,47,,,,,,,,233,',
',,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,',
'60,,,,66,67,,,,70,,68,69,71,314,315,75,76,,,,,,310,311,317,104,103,105',
'106,,,235,,,,,,,48,,,108,107,109,98,59,100,99,101,,102,110,111,,94,95',
',45,46,44,,,,,,,,,,,,,,,,,,,,228,,,234,,,61,62,,,63,,,,,,47,,,,,,,,233',
',,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74',
',60,,,,66,67,,,,70,,68,69,71,314,315,75,76,,,,,,310,311,317,104,103',
'105,106,,,235,,,,,,,48,,,108,107,109,98,59,100,99,101,,102,110,111,',
'94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,228,,,234,,,61,62,,,63,,,,,,47,,',
',,,,,233,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97',
'72,73,74,,60,,,,66,67,,,,70,,68,69,71,314,315,75,76,,,,,,310,311,317',
'104,103,105,106,,,235,,,,,,,48,,,108,107,109,98,59,100,99,101,,102,110',
'111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,228,,,234,,,61,62,,,63,,,,,',
'47,,,,,,,,233,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96',
'97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,314,315,75,76,,,,,,310,311',
'317,104,103,105,106,,,235,,,,,,,48,,,108,107,109,98,59,100,99,101,,102',
'110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,228,,,234,,,61,62,,,63,',
',,,,47,,,,,,,,233,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90',
',,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,314,315,75,76,,,,,,310',
'311,317,104,103,105,106,,,235,,,,,,,48,,,108,107,109,98,59,100,99,101',
',102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,228,,,234,,,61,62,',
',63,,,,,,47,,,,,,,,233,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81',
'88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,314,315,75,76,,',
',,,310,311,317,104,103,105,106,,,235,,,,,,,48,,,108,107,109,98,59,100',
'99,101,,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,228,,,234,,',
'61,62,,,63,,,,,,47,,,,,,,,233,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65',
',,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,314,315,75',
'76,,,,,,310,311,317,104,103,105,106,,,235,,,,,,,48,,,108,107,109,98',
'59,100,99,101,,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,228,',
',234,,,61,62,,,63,,,,,,47,,,,,,,,233,,,,,91,83,85,86,87,89,,,,84,92',
',,,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,314',
'315,75,76,,,,,,310,311,317,104,103,105,106,,,235,,,,,,,48,,,108,107',
'109,98,59,100,99,101,,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,',
',,228,,,234,,,61,62,,,63,,,,,,47,,,,,,,,233,,,,,91,83,85,86,87,89,,',
',84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69',
'71,314,315,75,76,,,,,,310,311,317,104,103,105,106,,,235,,,,,,,48,,,108',
'107,109,98,59,100,99,101,,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,',
',,,,,,228,,,234,,,61,62,,,63,,,,,,47,,,,,,,,233,,,,,91,83,85,86,87,89',
',,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68',
'69,71,314,315,75,76,,,,,,310,311,317,104,103,105,106,,,235,,,,,,,48',
',,108,107,109,98,59,100,99,101,,102,110,111,,94,95,,45,46,44,,,,,,,',
',,,,,,,,,,,,228,,,234,,,61,62,,,63,,,,,,47,,,,,,,,233,,,,,91,83,85,86',
'87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,',
'70,,68,69,71,314,315,75,76,,,,,,310,311,317,104,103,105,106,,,235,,',
',,,,48,,,108,107,109,98,59,100,99,101,,102,110,111,,94,95,,45,46,44',
',,,,,,,,,,,,,,,,,,,228,,,234,,,61,62,,,63,,,,,,47,,,,,,,,233,,,,,91',
'83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,',
'66,67,,,,70,,68,69,71,314,315,75,76,,,,,,310,311,317,104,103,105,106',
',,235,,,,,,,48,,,108,107,109,98,59,100,99,101,,102,110,111,,94,95,,45',
'46,44,,,,,,,,,,,,,,,,,,,,228,,,234,,,61,62,,,63,,,,,,47,,,,,,,,233,',
',,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,',
'60,,,,66,67,,,,70,,68,69,71,314,315,75,76,,,,,,310,311,317,104,103,105',
'106,,,235,,,,,,,48,,,108,107,109,98,59,100,99,101,,102,110,111,,94,95',
',45,46,44,,,,,,,,,,,,,,,,,,,,228,,,234,,,61,62,,,63,,,,,,47,,,,,,,,233',
',,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74',
',60,,,,66,67,,,,70,,68,69,71,314,315,75,76,,,,,,310,311,317,104,103',
'105,106,,,235,,,,,,,48,,,108,107,109,98,59,100,99,101,,102,110,111,',
'94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,228,,,234,,,61,62,,,63,,,,,,47,,',
',,,,,233,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97',
'72,73,74,,60,,,,66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31,30,104',
'103,105,106,,,235,,,,,,,48,,,108,107,109,98,59,100,99,101,290,102,110',
'111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,228,,,234,,,61,62,,,63,,286',
',284,,47,,,,,,,,233,,,,,91,287,85,86,87,89,,,,84,288,,,,,,,65,,291,81',
'88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,33,34,75,76,,,,',
',32,31,30,104,103,105,106,,,235,,,,,,,48,,,108,107,109,98,59,100,99',
'101,290,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,228,,,234,,',
'61,62,,,63,,286,,284,,47,,,,,,,,233,,,,,91,287,85,86,87,89,,,,84,288',
',,,,,,65,,291,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71',
'33,34,75,76,,,,,,32,31,30,104,103,105,106,,,235,,,,,,,48,,,108,107,109',
'98,59,100,99,101,290,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,',
',228,,,234,,,61,62,,,63,,286,,284,,47,,,,,,,,233,,,,,91,287,85,86,87',
'89,,,,84,288,223,,,,,,65,,291,81,88,90,,,96,97,72,73,74,,60,,,,66,67',
',,,70,,68,69,71,314,315,75,76,,,,,,310,311,317,104,103,105,106,,,235',
',,,,,,48,,,108,107,109,98,59,100,99,101,,102,110,111,,94,95,,45,46,44',
',,,,,,,,,,,,,,,,,,,228,,,234,,,61,62,,,63,,,,,,47,,,,,,,,233,,,,,91',
'83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,',
'66,67,,,,70,,68,69,71,314,315,75,76,,,,,,310,311,317,104,103,105,106',
',,235,,,,,,,48,,,108,107,109,98,59,100,99,101,,102,110,111,,94,95,,45',
'46,44,,,,,,,,,,,,,,,,,,,,228,,,234,,,61,62,,,63,,,,,,47,,,,,,,,233,',
',,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,',
'60,,,,66,67,,,,70,,68,69,71,314,315,75,76,,,,,,310,311,317,104,103,105',
'106,,,235,,,,,,,48,,,108,107,109,98,59,100,99,101,,102,110,111,,94,95',
',45,46,44,,,,,,,,,,,,,,,,,,,,228,,,234,,,61,62,,,63,,,,,,47,,,,,,,,233',
',,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74',
',60,,,,66,67,,,,70,,68,69,71,314,315,75,76,,,,,,310,311,317,104,103',
'105,106,,,235,,,,,,,48,,,108,107,109,98,59,100,99,101,,102,110,111,',
'94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,228,,,234,,,61,62,,,63,,,,,,47,,',
',,,,,233,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97',
'72,73,74,12,60,,,,66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31,30,104',
'103,105,106,,,22,,,,,,11,48,,13,108,107,109,98,59,100,99,101,,102,110',
'111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,43,,,36,,,61,62,,,63,,38,,,',
'47,,,,,,,,23,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96',
'97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,314,315,75,76,,,,,,310,311',
'317,104,103,105,106,,,235,,,,,,,312,,,108,107,109,98,59,100,99,101,',
'102,110,111,,94,95,,,,318,,,,,,,,,,,,,,,,,,,,308,,,234,,,61,62,,,63',
',,,,,,,,,,,,,,,,,,91,83,85,86,87,89,,,,84,92,,,,519,,,65,,,81,88,90',
',,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,314,315,75,76,,,,,,310',
'311,317,104,103,105,106,,,235,,,,,,,312,,,108,107,109,98,59,100,99,101',
',102,110,111,,94,95,,,,318,,,,,,,,,,,,,,,,,,,,308,,,304,,,61,62,,,63',
',,,,,,,,,,,,,,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96',
'97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,314,315,75,76,,,,,,310,311',
'317,104,103,105,106,,,235,,,,,,,48,,,108,107,109,98,59,100,99,101,,102',
'110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,228,,,234,535,,61,62,,,63',
',,,,,47,,,,,,,,233,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90',
',,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31',
'30,104,103,105,106,,,22,,,,,,,48,,,108,107,109,98,59,100,99,101,,102',
'110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,228,,,234,,,61,62,,,63,',
',,,,47,,,,,,,,23,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90',
',,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,314,315,75,76,,,,,,310',
'311,317,104,103,105,106,,,235,,,,,,,48,,,108,107,109,98,59,100,99,101',
'290,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,228,,,234,,,61,62',
',,63,,,,,,47,,,,,,,,233,,,,,91,287,85,86,87,89,,,,84,288,,,,,,,65,,291',
'81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,33,34,75,76,',
',,,,32,31,30,104,103,105,106,,,22,,,,,,,48,,,108,107,109,98,59,100,99',
'101,,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,228,,,234,,,61',
'62,,,63,,,,,,47,,,,,,,,23,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,',
'81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,33,34,75,76,',
',,,,32,31,30,104,103,105,106,,,22,,,,,,,48,,,108,107,109,98,59,100,99',
'101,,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,228,,,234,,,61',
'62,,,63,,,,,,47,,,,,,,,23,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,',
'81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,314,315,75,76',
',,,,,310,311,317,104,103,105,106,,,235,,,,,,,312,,,108,107,109,597,59',
'100,99,598,,102,110,111,,94,95,,,,318,,,,,,,,,,,,,,,,,,,,599,,,234,',
',61,62,,,63,,,,,,,,,,,,,,,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,',
'81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,314,315,75,76',
',,,,,310,311,317,104,103,105,106,,,235,,,,,,,312,,,108,107,109,597,59',
'100,99,598,,102,110,111,,94,95,,,,318,,,,,,,,,,,,,,,,,,,,599,,,234,',
',61,62,,,63,,,,,,,,,,,,,,,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,',
'81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,314,315,75,76',
',,,,,310,311,317,104,103,105,106,,,235,,,,,,,48,,,108,107,109,98,59',
'100,99,101,,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,228,,,234',
',,61,62,,,63,,,,,,47,,,,,,,,233,,,,,91,83,85,86,87,89,,,,84,92,,,,,',
',65,,,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,33,34,75',
'76,,,,,,32,31,30,104,103,105,106,,,235,,,,,,,48,,,108,107,109,98,59',
'100,99,101,290,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,228,',
',234,,,61,62,,,63,,286,,284,,47,,,,,,,,233,,,,,91,287,85,86,87,89,,',
',84,288,,,,,,,65,,291,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,',
'68,69,71,314,315,75,76,,,,,,310,311,317,104,103,105,106,,,235,,,,,,',
'48,,,108,107,109,98,59,100,99,101,,102,110,111,,94,95,,45,46,44,,,,',
',,,,,,,,,,,,,,,228,,,234,,,61,62,,,63,,,,,,47,,,,,,,,233,,,,,91,83,85',
'86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,,66,67',
',,,70,,68,69,71,314,315,75,76,,,,,,310,311,317,104,103,105,106,,,235',
',,,,,,48,,,108,107,109,98,59,100,99,101,,102,110,111,,94,95,,45,46,44',
',,,,,,,,,,,,,,,,,,,228,,,234,,,61,62,,,63,,,,,,47,,,,,,,,233,,,,,91',
'83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,',
'66,67,,,,70,,68,69,71,314,315,75,76,,,,,,310,311,317,104,103,105,106',
',,235,,,,,,,48,,,108,107,109,98,59,100,99,101,,102,110,111,,94,95,,45',
'46,44,,,,,,,,,,,,,,,,,,,,228,,,234,,,61,62,,,63,,,,,,47,,,,,,,,233,',
',,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,',
'60,,,,66,67,,,,70,,68,69,71,314,315,75,76,,,,,,310,311,317,104,103,105',
'106,,,235,,,,,,,48,,,108,107,109,98,59,100,99,101,290,102,110,111,,94',
'95,,45,46,44,,,,,,,,,,,,,,,,,,,,228,,,234,,,61,62,,,63,,678,,284,,47',
',,,,,,,233,,,,,91,287,85,86,87,89,,,,84,288,,,,,,,65,,291,81,88,90,',
',96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,314,315,75,76,,,,,,310',
'311,317,104,103,105,106,,,235,,,,,,,48,,,108,107,109,98,59,100,99,101',
'290,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,228,,,234,,,61,62',
',,63,,,,284,,47,,,,,,,,233,,,,,91,287,85,86,87,89,,,,84,288,,,,,,,65',
',291,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,314,315',
'75,76,,,,,,310,311,317,104,103,105,106,,,235,,,,,,,48,,,108,107,109',
'98,59,100,99,101,,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,228',
',,234,,,61,62,,,63,,,,,,47,,,,,,,,233,,,,,91,83,85,86,87,89,,,,84,92',
',,,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,314',
'315,75,76,,,,,,310,311,317,104,103,105,106,,,235,,,,,,,48,,,108,107',
'109,98,59,100,99,101,,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,',
',,228,,,234,,,61,62,,,63,,,,,,47,,,,,,,,233,,,,,91,83,85,86,87,89,,',
',84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,12,60,,,,66,67,,,,70,,68',
'69,71,33,34,75,76,,,,,,32,31,30,104,103,105,106,,,22,,,,,,11,48,,13',
'108,107,109,98,59,100,99,101,,102,110,111,,94,95,,45,46,44,,,,,,,,,',
',,,,,,,,,,43,,,36,,,61,62,,,63,,38,,,,47,,,,,,,,23,,,,,91,83,85,86,87',
'89,,,,84,92,,,,,,401,65,,,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,',
'70,,68,69,71,314,315,75,76,,,,,,310,311,317,104,103,105,106,,,235,,',
',,,,312,,,108,107,109,98,59,100,99,101,,102,110,111,,94,95,,,,318,,',
',,,,,,,,,,,,,,,,,308,,,304,,,61,62,,,63,,,,,,,,,,,,,,,,,,,91,83,85,86',
'87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,',
'70,,68,69,71,33,34,75,76,,,,,,32,31,30,104,103,105,106,,,235,,,,,,,48',
',,108,107,109,98,59,100,99,101,290,102,110,111,,94,95,,45,46,44,,,,',
',,,,,,,,,,,,,,,228,,,234,,,61,62,,,63,,286,,284,,47,,,,,,,,233,,,,,91',
'287,85,86,87,89,,,,84,288,,,,,,,65,,291,81,88,90,,,96,97,72,73,74,,60',
',,,66,67,,,,70,,68,69,71,314,315,75,76,,,,,,310,311,317,104,103,105',
'106,,,235,,,,,,,312,,,108,107,109,98,59,100,99,101,,102,110,111,,94',
'95,,,,318,,,,,,,,,,,,,,,,,,,,308,,,304,,,61,62,,,63,,,,,,,,,,,,,,,,',
',,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,,60',
',,,66,67,,,,70,,68,69,71,314,315,75,76,,,,,,310,311,317,104,103,105',
'106,,,235,,,,,,,48,,,108,107,109,98,59,100,99,101,,102,110,111,,94,95',
',45,46,44,,,,,,,,,,,,,,,,,,,,228,,,234,,,61,62,,,63,,,,,,47,,,,,,,,233',
',,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74',
',60,,,,66,67,,,,70,,68,69,71,314,315,75,76,,,,,,310,311,317,104,103',
'105,106,,,235,,,,,,,48,,,108,107,109,98,59,100,99,101,,102,110,111,',
'94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,228,,,234,,,61,62,,,63,,,,,,47,,',
',,,,,233,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97',
'72,73,74,,60,,,,66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31,30,104',
'103,105,106,,,22,,,,,,,48,,,108,107,109,98,59,100,99,101,,102,110,111',
',94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,228,,,234,,,61,62,,,63,,,,,,47,',
',,,,,,23,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97',
'72,73,74,,60,,,,66,67,,,,70,,68,69,71,314,315,75,76,,,,,,310,311,317',
'104,103,105,106,,,235,,,,,,,48,,,108,107,109,98,59,100,99,101,290,102',
'110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,228,,,234,,,61,62,,,63,',
'678,,,,47,,,,,,,,233,,,,,91,287,85,86,87,89,,,,84,288,,,,,,,65,,291',
'81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,314,315,75,76',
',,,,,310,311,317,104,103,105,106,,,235,,,,,,,48,,,108,107,109,98,59',
'100,99,101,290,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,228,',
',234,,,61,62,,,63,,,,,,47,,,,,,,,233,,,,,91,287,85,86,87,89,,,,84,288',
',,,,,,65,,291,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71',
'314,315,75,76,,,,,,310,311,317,104,103,105,106,,,235,,,,,,,48,,,108',
'107,109,98,59,100,99,101,,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,',
',,,,,,228,,,234,,,61,62,,,63,,,,,,47,,,,,,,,233,,,,,91,83,85,86,87,89',
',,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68',
'69,71,33,34,75,76,,,,,,32,31,30,104,103,105,106,,,235,,,,,,,48,,,108',
'107,109,98,59,100,99,101,290,102,110,111,,94,95,,45,46,44,,,,,,,,,,',
',,,,,,,,,228,,,234,,,61,62,,,63,,286,,284,,47,,,,,,,,233,,,,,91,287',
'85,86,87,89,,,,84,288,,,,,,,65,,291,81,88,90,,,96,97,72,73,74,,60,,',
',66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31,30,104,103,105,106,,,22',
',,,,,,48,,,108,107,109,98,59,100,99,101,,102,110,111,,94,95,,45,46,44',
',,,,,,,,,,,,,,,,,,,228,,,234,,,61,62,,,63,,,,,,47,,,,,,,,23,,,,,91,83',
'85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,,66',
'67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31,30,104,103,105,106,,,22,,',
',,,,48,,,108,107,109,98,59,100,99,101,,102,110,111,,94,95,,45,46,44',
',,,,,,,,,,,,,,,,,,,228,,,234,,,61,62,,,63,,,,,,47,,,,,,,,23,,,,,91,83',
'85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,,66',
'67,,,,70,,68,69,71,314,315,75,76,,,,,,310,311,317,104,103,105,106,,',
'235,,,,,,,48,,,108,107,109,98,59,100,99,101,,102,110,111,,94,95,,45',
'46,44,,,,,,,,,,,,,,,,,,,,228,,,234,,,61,62,,,63,,775,,,,47,,,,,,,,233',
',,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74',
',60,,,,66,67,,,,70,,68,69,71,314,315,75,76,,,,,,310,311,317,104,103',
'105,106,,,235,,,,,,,48,,,108,107,109,98,59,100,99,101,,102,110,111,',
'94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,228,,,234,,,61,62,,,63,,,,,,47,,',
',,,,,233,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97',
'72,73,74,,60,,,,66,67,,,,70,,68,69,71,314,315,75,76,,,,,,310,311,317',
'104,103,105,106,,,235,,,,,,,48,,,108,107,109,98,59,100,99,101,290,102',
'110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,228,,,234,,,61,62,,,63,',
'678,,284,,47,,,,,,,,233,,,,,91,287,85,86,87,89,,,,84,288,,,,,,,65,,291',
'81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,314,315,75,76',
',,,,,310,311,317,104,103,105,106,,,235,,,,,,,48,,,108,107,109,98,59',
'100,99,101,290,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,228,',
',234,,,61,62,,,63,,,,284,,47,,,,,,,,233,,,,,91,287,85,86,87,89,,,,84',
'288,,,,,,,65,,291,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69',
'71,33,34,75,76,,,,,,32,31,30,104,103,105,106,,,235,,,,,,,48,,,108,107',
'109,98,59,100,99,101,,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,',
',,228,,,234,,,61,62,,,63,,,,,,47,,,,,,,,233,,,,,91,83,85,86,87,89,,',
',84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69',
'71,33,34,75,76,,,,,,32,31,30,104,103,105,106,,,235,,,,,,,48,,,108,107',
'109,98,59,100,99,101,,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,',
',,228,,,234,,,61,62,,,63,,,,,,47,,,,,,,,233,,,,,91,83,85,86,87,89,,',
',84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69',
'71,33,34,75,76,,,,,,32,31,30,104,103,105,106,,,235,,,,,,,48,,,108,107',
'109,98,59,100,99,101,,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,',
',,228,,,234,,,61,62,,,63,,,,,,47,,,,,,,,233,,,,,91,83,85,86,87,89,,',
',84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69',
'71,33,34,75,76,,,,,,32,31,30,104,103,105,106,,,235,,,,,,,48,,,108,107',
'109,98,59,100,99,101,,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,',
',,228,,,234,,,61,62,,,63,,,,,,47,,,,,,,,233,,,,,91,83,85,86,87,89,,',
',84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69',
'71,33,34,75,76,,,,,,32,31,30,104,103,105,106,,,235,,,,,,,48,,,108,107',
'109,98,59,100,99,101,,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,',
',,228,,,234,,,61,62,,,63,,,,,,47,,,,,,,,233,,,,,91,83,85,86,87,89,,',
',84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69',
'71,314,315,75,76,,,,,,310,311,317,104,103,105,106,,,235,,,,,,,48,,,108',
'107,109,98,59,100,99,101,,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,',
',,,,,,228,,,234,,,61,62,,,63,,,,,,47,,,,,,,,233,,,,,91,83,85,86,87,89',
',,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68',
'69,71,314,315,75,76,,,,,,310,311,317,104,103,105,106,,,235,,,,,,,48',
',,108,107,109,98,59,100,99,101,,102,110,111,,94,95,,45,46,44,,,,,,,',
',,,,,,,,,,,,228,,,234,,,61,62,,,63,,,,,,47,,,,,,,,233,,,,,91,83,85,86',
'87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,',
'70,,68,69,71,314,315,75,76,,,,,,310,311,317,104,103,105,106,,,235,,',
',,,,48,,,108,107,109,98,59,100,99,101,,102,110,111,,94,95,,45,46,44',
',,,,,,,,,,,,,,,,,,,228,,,234,,,61,62,,,63,,,,,,47,,,,,,,,233,,,,,91',
'83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,',
'66,67,,,,70,,68,69,71,314,315,75,76,,,,,,310,311,317,104,103,105,106',
',,235,,,,,,,312,,,108,107,109,98,59,100,99,101,,102,110,111,,94,95,',
',,318,,,,,,,,,,,,,,,,,,,,308,,,304,,,61,62,,,63,,,,,,,,,,,,,,,,,,,91',
'83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,',
'66,67,,,,70,,68,69,71,314,315,75,76,,,,,,310,311,317,104,103,105,106',
',,235,,,,,,,312,,,108,107,109,98,59,100,99,101,,102,110,111,,94,95,',
',,318,,,,,,,,,,,,,,,,,,,,308,,,304,,,61,62,,,63,,,,,,,,,,,,,,,,,,,91',
'83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,',
'66,67,,,,70,,68,69,71,314,315,75,76,,,,,,310,311,317,104,103,105,106',
',,235,,,,,,,48,,,108,107,109,98,59,100,99,101,,102,110,111,,94,95,,45',
'46,44,,,,,,,,,,,,,,,,,,,,228,,,234,,,61,62,,,63,,417,,,,47,,,,,,,,233',
',,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74',
',60,,,,66,67,,,,70,,68,69,71,314,315,75,76,,,,,,310,311,317,104,103',
'105,106,,,235,,,,,,,48,,,108,107,109,98,59,100,99,101,,102,110,111,',
'94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,228,,,234,,,61,62,,,63,,,,,,47,,',
',,,,,233,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97',
'72,73,74,,60,,,,66,67,,,,70,,68,69,71,314,315,75,76,,,,,,310,311,317',
'104,103,105,106,,,235,,,,,,,48,,,108,107,109,98,59,100,99,101,,102,110',
'111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,228,,,234,,,61,62,,,63,,286',
',,,47,,,,,,,,233,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90',
',,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31',
'30,104,103,105,106,,,22,,,,,,,48,,,108,107,109,98,59,100,99,101,,102',
'110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,228,,,234,,,61,62,,,63,',
',,,,47,,,,,,,,23,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90',
',,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31',
'30,104,103,105,106,,,235,,,,,,,48,,,108,107,109,98,59,100,99,101,290',
'102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,228,,,234,,,61,62,,',
'63,,286,,284,,47,,,,,,,,233,,,,,91,287,85,86,87,89,,,,84,288,,,,,,,65',
',291,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,314,315',
'75,76,,,,,,310,311,317,104,103,105,106,,,235,,,,,,,48,,,108,107,109',
'98,59,100,99,101,,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,228',
',,234,,,61,62,,,63,,,,,,47,,,,,,,,233,,,,,91,83,85,86,87,89,,,,84,92',
',,,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,33',
'34,75,76,,,,,,32,31,30,104,103,105,106,,,235,,,,,,,48,,,108,107,109',
'98,59,100,99,101,,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,228',
',,234,,,61,62,,,63,,,,,,47,,,,,,,,233,,,,,91,83,85,86,87,89,,,,84,92',
',,,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,314',
'315,75,76,,,,,,310,311,317,104,103,105,106,,,235,,,,,,,48,,,108,107',
'109,98,59,100,99,101,,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,',
',,228,,,234,,,61,62,,,63,,,,,,47,,,,,,,,233,,,,,91,83,85,86,87,89,,',
',84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69',
'71,314,315,75,76,,,,,,310,311,317,104,103,105,106,,,235,,,,,,,48,,,108',
'107,109,98,59,100,99,101,,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,',
',,,,,,228,,,234,,,61,62,,,63,,,,,,47,,,,,,,,233,,,,,91,83,85,86,87,89',
',,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68',
'69,71,314,315,75,76,,,,,,310,311,317,104,103,105,106,,,235,,,,,,,48',
',,108,107,109,98,59,100,99,101,,102,110,111,,94,95,,45,46,44,,,,,,,',
',,,,,,,,,,,,228,,,234,,,61,62,,,63,,,,,,47,,,,,,,,233,,,,,91,83,85,86',
'87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,',
'70,,68,69,71,314,315,75,76,,,,,,310,311,317,104,103,105,106,,,235,,',
',,,,48,,,108,107,109,98,59,100,99,101,,102,110,111,,94,95,,45,46,44',
',,,,,,,,,,,,,,,,,,,228,,,234,,,61,62,,,63,,,,,,47,,,,,,,,233,,,,,91',
'83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,',
'66,67,,,,70,,68,69,71,314,315,75,76,,,,,,310,311,317,104,103,105,106',
',,235,,,,,,,48,,,108,107,109,98,59,100,99,101,,102,110,111,,94,95,,45',
'46,44,,,,,,,,,,,,,,,,,,,,228,,,234,,,61,62,,,63,,,,,,47,,,,,,,,233,',
',,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,',
'60,,,,66,67,,,,70,,68,69,71,314,315,75,76,,,,,,310,311,317,104,103,105',
'106,,,235,,,,,,,312,,,108,107,109,98,59,100,99,101,,102,110,111,,94',
'95,,,,318,,,,,,,,,,,,,,,,,,,,905,,,234,,,61,62,,,63,,,,,,,,,,,,,,,,',
',,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,,60',
',,,66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31,30,104,103,105,106,',
',22,,,,,,,48,,,108,107,109,98,59,100,99,101,,102,110,111,,94,95,,45',
'46,44,,,,,,,,,,,,,,,,,,,,228,,,234,,,61,62,,,63,,,,,,47,,,,,,,,23,,',
',,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,,60',
',,,66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31,30,104,103,105,106,',
',22,,,,,,,48,,,108,107,109,98,59,100,99,101,,102,110,111,,94,95,,45',
'46,44,,,,,,,,,,,,,,,,,,,,228,,,234,,,61,62,,,63,,,,,,47,,,,,,,,23,,',
',,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,,60',
',,,66,67,,,,70,,68,69,71,314,315,75,76,,,,,,310,311,317,104,103,105',
'106,,,235,,,,,,,48,,,108,107,109,98,59,100,99,101,290,102,110,111,,94',
'95,,45,46,44,,,,,,,,,,,,,,,,,,,,228,,,234,,,61,62,,,63,,,,284,,47,,',
',,,,,233,,,,,91,287,85,86,87,89,,,,84,288,,,,,,,65,,291,81,88,90,,,96',
'97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,314,315,75,76,,,,,,310,311',
'317,104,103,105,106,,,235,,,,,,,48,,,108,107,109,98,59,100,99,101,,102',
'110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,228,,,234,,,61,62,,,63,',
',,,,47,,,,,,,,233,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90',
',,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,314,315,75,76,,,,,,310',
'311,317,104,103,105,106,,,235,,,,,,,312,,,108,107,109,98,59,100,99,101',
',102,110,111,,94,95,,,,318,,,,,,,,,,,,,,,,,,,,905,,,234,,,61,62,,,63',
',,,,,,,,,,,,,,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96',
'97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,314,315,75,76,,,,,,310,311',
'317,104,103,105,106,,,235,,,,,,,312,,,108,107,109,98,59,100,99,101,',
'102,110,111,,94,95,,,,318,,,,,,,,,,,,,,,,,,,,978,,,234,,,61,62,,,63',
',,,,,,,,,,,,,,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96',
'97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,314,315,75,76,,,,,,310,311',
'317,104,103,105,106,,,235,,,,,,,48,,,108,107,109,98,59,100,99,101,,102',
'110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,228,,,234,,,61,62,,,63,',
'678,,,,47,,,,,,,,233,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88',
'90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32',
'31,30,104,103,105,106,,,235,,,,,,,48,,,108,107,109,98,59,100,99,101',
'290,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,228,,,234,,,61,62',
',,63,,286,,284,,47,,,,,,,,233,,,,,91,287,85,86,87,89,,,,84,288,,,,,',
',65,,291,81,88,90,,,96,97,176,187,177,200,173,193,183,182,203,204,198',
'181,180,175,201,205,206,185,174,188,192,194,186,179,,,,195,202,197,196',
'189,199,184,172,191,190,,,,,,171,178,169,170,166,167,168,127,129,126',
',128,,,,,,,,,161,162,,157,139,140,141,148,145,147,,,142,143,,,,163,164',
'149,150,,,,,,,,,,,,,,154,153,,138,160,156,155,151,152,146,144,136,159',
'137,,,165,91,,,,,,,,,,92,,,,,,,,,158,176,187,177,200,173,193,183,182',
'203,204,198,181,180,175,201,205,206,185,174,188,192,194,186,179,,,,195',
'202,197,196,189,199,184,172,191,190,,,,,,171,178,169,170,166,167,168',
'127,129,,,128,,,,,,,,,161,162,,157,139,140,141,148,145,147,,,142,143',
',,,163,164,149,150,,,,,,,,,,,,,,154,153,,138,160,156,155,151,152,146',
'144,136,159,137,,,165,91,,,,,,,,,,92,,,,,,,,,158,176,187,177,200,173',
'193,183,182,203,204,198,181,180,175,201,205,206,185,174,188,192,194',
'186,179,,,,195,202,197,367,366,368,365,172,191,190,,,,,,171,178,169',
'170,362,363,364,360,129,100,99,361,,102,,,,,,,161,162,,157,139,140,141',
'148,145,147,,,142,143,,,,163,164,149,150,,,,,,374,,,,,,,,154,153,,138',
'160,156,155,151,152,146,144,136,159,137,,,165,,,,,,,,,,,,,,,,,,,,158',
'176,187,177,200,173,193,183,182,203,204,198,181,180,175,201,205,206',
'185,174,188,192,194,186,179,,,,195,202,197,196,189,199,184,172,191,190',
',,,,,171,178,169,170,166,167,168,127,129,398,397,128,,399,,,,,,,161',
'162,,157,139,140,141,148,145,147,,,142,143,,,,163,164,149,150,,,,,,',
',,,,,,,154,153,,138,160,156,155,151,152,146,144,136,159,137,,,165,,',
',,,,,,,,,,,,,,,,,158,176,187,177,200,173,193,183,182,203,204,198,181',
'180,175,201,205,206,185,174,188,192,194,186,179,,,,195,202,197,196,189',
'199,184,172,191,190,,,,,,171,178,169,170,166,167,168,127,129,,,128,',
',,,,,,,161,162,,157,139,140,141,148,145,147,,,142,143,,,,163,164,149',
'150,,,,,,,,,,,,,,154,153,,138,160,156,155,151,152,146,144,136,159,137',
',,165,91,,,,,,,,,,92,,,,,,,,,158,176,187,177,200,173,193,183,182,203',
'204,198,181,180,175,201,205,206,185,174,188,192,194,186,179,,,,195,202',
'197,196,189,199,184,172,191,190,,,,,,171,178,169,170,166,167,168,127',
'129,,,128,,,,,,,,,161,162,,157,139,140,141,148,145,147,,,142,143,,,',
'163,164,149,150,,,,,,,,,,,,,,154,153,,138,160,156,155,151,152,146,144',
'136,159,137,,,165,91,,,,,,,,,,92,,,,,,,,,158,176,187,177,200,173,193',
'183,182,203,204,198,181,180,175,201,205,206,185,174,188,192,194,186',
'179,,,,195,202,197,196,189,199,184,172,191,190,,,,,,171,178,169,170',
'166,167,168,127,129,,,128,,,,,,,,,161,162,,157,139,140,141,148,145,147',
',,142,143,,,,163,164,149,150,,,,,,,,,,,,,,154,153,,138,160,156,155,151',
'152,146,144,136,159,137,-627,,165,,,,,-627,-627,-627,,,-627,-627,-627',
'565,-627,562,561,560,570,563,158,,,-627,-627,,,,,573,,,,,-627,-627,',
'-627,-627,-627,-627,-627,,,,,,,,,,568,,565,,562,561,560,570,563,578',
'577,581,580,,,,,,573,,,,,,,-627,,,,,,,-627,,,,,274,-627,,568,,,,,574',
',,,427,431,581,580,428,,,,,,-627,-627,,161,162,,157,139,140,141,148',
'145,147,,-627,142,143,,,-627,163,164,149,150,,,574,,,274,,,,,,,,154',
'153,,138,160,156,155,151,152,146,144,136,159,137,,,165,,,,,434,438,',
',433,,,,,,,,,161,162,158,157,139,140,141,148,145,147,,,142,143,,,,163',
'164,149,150,,,,,,274,,,,,,,,154,153,,138,160,156,155,151,152,146,144',
'136,159,137,,,165,,,,,488,431,,,489,,,,,,,,,161,162,158,157,139,140',
'141,148,145,147,,,142,143,,,,163,164,149,150,,,,,,,,,,,,,,154,153,,138',
'160,156,155,151,152,146,144,136,159,137,,,165,,,,,656,431,,,657,,,,',
',,,,161,162,158,157,139,140,141,148,145,147,,,142,143,,,,163,164,149',
'150,,,,,,274,,,,,,,,154,153,,138,160,156,155,151,152,146,144,136,159',
'137,,,165,,,,,658,438,,,659,,,,,,,,,161,162,158,157,139,140,141,148',
'145,147,,,142,143,,,,163,164,149,150,,,,,,274,,,,,,,,154,153,,138,160',
'156,155,151,152,146,144,136,159,137,,,165,,,,,689,431,,,690,,,,,,,,',
'161,162,158,157,139,140,141,148,145,147,,,142,143,,,,163,164,149,150',
',,,,,274,,,,,,,,154,153,,138,160,156,155,151,152,146,144,136,159,137',
',,165,,,,,692,438,,,693,,,,,,,,,161,162,158,157,139,140,141,148,145',
'147,,,142,143,,,,163,164,149,150,,,,,,274,,,,,,,,154,153,,138,160,156',
'155,151,152,146,144,136,159,137,,,165,,,,,656,431,,,657,,,,,,,,,161',
'162,158,157,139,140,141,148,145,147,,,142,143,,,,163,164,149,150,,,',
',,274,,,,,,,,154,153,,138,160,156,155,151,152,146,144,136,159,137,,',
'165,,,,,658,438,,,659,,,,,,,,,161,162,158,157,139,140,141,148,145,147',
',,142,143,,,,163,164,149,150,,,,,,274,,,,,,,,154,153,,138,160,156,155',
'151,152,146,144,136,159,137,,,165,,,,,743,431,,,744,,,,,,,,,161,162',
'158,157,139,140,141,148,145,147,,,142,143,,,,163,164,149,150,,,,,,274',
',,,,,,,154,153,,138,160,156,155,151,152,146,144,136,159,137,,,165,,',
',,745,438,,,746,,,,,,,,,161,162,158,157,139,140,141,148,145,147,,,142',
'143,,,,163,164,149,150,,,,,,274,,,,,,,,154,153,,138,160,156,155,151',
'152,146,144,136,159,137,,565,165,562,561,560,570,563,,,,,,,,,,573,,',
',,158,,,,,,,,,565,,562,561,560,570,563,,568,864,438,,,865,,,573,578',
'577,581,580,,161,162,,157,139,140,141,148,145,147,,,142,143,,,568,163',
'164,149,150,,,,,,274,581,580,,,574,,,154,153,,138,160,156,155,151,152',
'146,144,136,159,137,,,165,,,,,488,431,,,489,,574,,,,,,,161,162,158,157',
'139,140,141,148,145,147,,,142,143,,,,163,164,149,150,,,,,,274,,,,,,',
',154,153,,138,160,156,155,151,152,146,144,136,159,137,,565,165,562,561',
'560,570,563,565,,562,561,560,570,563,,,573,,,,,158,,573,565,,562,561',
'560,570,563,,,,,,,,568,,573,,,,,568,,578,577,581,580,,,,578,577,581',
'580,,,,565,568,562,561,560,570,563,,,,578,577,581,580,,565,573,562,561',
'560,570,563,574,,,,,,,574,,573,,,,,,,568,565,,562,561,560,570,563,574',
'578,577,581,580,,,568,565,573,562,561,560,570,563,,,,581,580,,,,565',
'573,562,561,560,570,563,,568,,,,,,574,,573,,,581,580,,,568,,,,,,574',
',,,,581,580,,,568,761,,1012,438,,,1011,,578,577,581,580,,,574,161,162',
',157,139,140,141,148,145,147,,,142,143,574,,,163,164,149,150,,,,,,274',
',,574,,,,,154,153,,138,160,156,155,151,152,146,144,136,159,137,,565',
'165,562,561,560,570,563,565,,562,561,560,570,563,,,573,,,,,158,,573',
'565,,562,561,560,570,563,,,,,,,,568,,573,,,,,568,,578,577,581,580,,',
',,,581,580,,,,565,568,562,561,560,570,563,,,,,,581,580,,,573,,,,,,574',
',,,,,,574,,,,,,,,,568,1040,431,,,1041,,,574,,,581,580,,161,162,,157',
'139,140,141,148,145,147,,,142,143,,,,163,164,149,150,,,,,,274,,,,,574',
',,154,153,,138,160,156,155,151,152,146,144,136,159,137,,,165,,,,,1042',
'438,,,1043,,,,,,,,,161,162,158,157,139,140,141,148,145,147,,,142,143',
',,,163,164,149,150,,,,,,274,,,,,,,,154,153,,138,160,156,155,151,152',
'146,144,136,159,137,,565,165,562,561,560,570,563,565,,562,561,560,570',
'563,,,573,,,,,158,,573,,,,,,,,,,,,,,,568,,,,,,,568,,,,581,580,,,,,,581',
'580,,,,,,,,,,,,,,,,,,,,,,,,,,574,,,,,,,574' ]
        racc_action_table = arr = ::Array.new(26474, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

clist = [
'98,2,2,2,2,2,2,98,98,98,2,2,98,98,98,2,98,2,2,2,2,2,2,2,98,349,98,98',
'98,2,2,2,2,2,2,2,98,98,2,98,98,98,98,98,2,2,2,2,2,2,2,2,2,2,2,2,689',
'2,2,2,1,2,2,603,2,2,2,98,98,98,98,98,98,98,98,98,98,98,98,98,98,690',
'821,98,98,98,2,98,98,2,350,98,2,2,98,98,2,98,2,98,3,98,2,98,98,98,98',
'98,98,98,2,98,64,98,13,2,2,2,2,2,2,61,353,689,2,2,98,98,98,98,349,98',
'2,98,342,2,2,2,101,15,2,2,343,98,98,101,101,101,690,821,101,101,101',
'692,101,550,61,587,689,16,486,689,101,313,101,101,101,669,599,603,595',
'861,599,914,101,101,689,101,101,101,101,101,936,690,821,975,690,821',
'603,976,743,27,744,603,486,350,389,19,27,64,979,690,821,1018,1040,101',
'101,101,101,101,101,101,101,101,101,101,101,101,101,692,692,101,101',
'101,588,101,101,353,745,101,862,863,101,101,18,101,226,101,993,101,993',
'101,101,101,101,101,101,101,342,101,313,101,392,342,669,692,343,587',
'692,389,550,343,587,25,101,101,101,101,1041,101,433,101,1055,692,1042',
'595,18,433,433,433,22,101,101,433,433,861,433,914,861,40,861,18,914',
'226,745,743,936,744,29,975,746,936,1043,976,975,227,433,433,976,433',
'433,433,433,433,979,392,22,1018,1040,979,451,451,1018,1040,588,699,699',
'764,764,588,43,863,229,745,48,862,863,433,433,433,433,433,433,433,433',
'433,433,433,433,433,433,72,1042,433,433,433,494,433,495,597,360,433',
'227,29,433,41,746,360,456,433,656,433,657,433,433,433,433,433,433,433',
'1043,433,1041,433,795,29,1055,1041,1042,229,494,1055,495,1042,376,434',
'433,433,378,433,87,433,434,434,434,746,88,41,434,434,451,434,597,433',
'433,699,1043,764,89,597,434,1043,41,598,597,456,17,656,597,657,684,434',
'434,17,434,434,434,434,434,44,44,795,17,90,5,684,597,670,42,5,80,318',
'318,507,124,376,376,376,80,378,378,378,434,434,434,434,434,434,434,434',
'434,434,434,434,434,434,598,597,434,434,434,670,434,598,864,207,434',
'228,598,434,42,17,598,230,434,231,434,235,434,434,434,434,434,434,434',
'42,434,434,434,267,598,270,620,281,507,507,507,282,44,44,658,434,434',
'285,434,290,434,658,658,658,318,318,658,658,658,507,658,864,434,434',
'711,598,298,361,864,658,658,658,658,864,361,711,334,864,300,334,658',
'658,301,658,658,658,658,658,726,890,726,726,726,335,726,864,335,620',
'620,623,890,932,383,932,932,932,620,932,711,711,302,658,658,658,658',
'658,658,658,658,658,658,658,658,658,658,308,864,658,658,658,362,658',
'658,890,890,658,322,362,658,658,311,658,711,658,386,658,312,658,658',
'658,658,658,658,658,394,658,658,658,317,548,623,623,548,383,383,383',
'726,890,319,623,658,658,658,658,363,658,49,658,322,932,126,363,659,49',
'323,126,126,658,658,659,659,659,49,322,659,659,659,340,659,340,340,340',
'340,340,364,386,386,386,659,659,659,364,326,340,332,394,394,394,659',
'659,336,659,659,659,659,659,365,225,20,20,347,366,305,365,225,340,340',
'380,366,305,380,49,348,225,340,340,340,340,305,659,659,659,659,659,659',
'659,659,659,659,659,659,659,659,352,367,659,659,659,368,659,659,367',
'354,659,427,368,659,659,382,659,340,659,385,659,388,659,659,659,659',
'659,659,659,225,659,391,659,413,305,380,380,416,551,418,551,551,551',
'551,551,659,659,659,659,370,659,306,659,427,551,294,370,30,306,422,294',
'425,659,659,30,30,30,306,427,30,30,30,346,30,307,757,551,346,341,341',
'757,307,30,30,30,551,551,551,551,704,307,426,704,30,30,435,30,30,30',
'30,30,962,309,762,962,871,324,351,762,309,871,538,538,324,351,945,306',
'428,309,443,945,551,324,351,30,30,30,30,30,30,30,30,30,30,30,30,30,30',
'464,307,30,30,30,714,714,30,465,30,30,466,639,30,30,467,30,496,30,497',
'30,428,30,30,30,30,30,30,30,309,30,30,30,324,351,514,428,852,515,852',
'852,852,518,852,31,30,30,520,30,525,30,31,31,31,639,528,31,31,31,536',
'31,524,30,732,732,537,601,546,524,639,31,31,749,601,549,852,553,524',
'554,749,31,31,601,31,31,31,31,31,749,693,556,865,557,904,758,758,693',
'558,865,567,904,693,575,865,579,693,582,865,584,904,589,31,31,31,31',
'31,31,31,31,31,31,31,31,31,31,590,524,31,31,31,627,601,31,630,31,31',
'632,749,31,31,636,31,640,31,645,31,651,31,31,31,31,31,31,31,693,31,865',
'31,904,1026,1026,933,660,933,933,933,662,933,668,59,31,31,675,31,677',
'31,59,59,59,686,688,59,59,59,691,59,966,31,694,695,698,977,700,966,703',
'59,59,59,977,933,710,725,966,727,734,59,59,977,59,59,59,59,59,765,765',
'739,742,765,765,765,568,774,568,568,568,779,568,986,797,986,986,986',
'798,986,800,801,59,59,59,59,59,59,59,59,59,59,59,59,59,59,802,966,59',
'59,59,804,977,59,568,805,59,806,807,59,59,986,59,568,59,820,59,824,59',
'59,59,59,59,59,59,827,59,828,59,606,833,606,606,606,606,606,9,9,9,9',
'9,59,59,59,59,606,59,429,59,296,296,296,296,296,429,429,429,834,59,429',
'429,429,835,429,836,840,841,606,606,481,843,844,429,429,429,846,606',
'606,606,606,849,851,854,429,429,857,429,429,429,429,429,988,867,988',
'988,988,723,988,723,723,723,481,723,872,873,481,481,481,481,874,883',
'884,606,901,429,429,429,429,429,429,429,429,429,429,429,429,429,429',
'905,988,429,429,429,906,723,429,908,429,429,909,934,429,429,723,429',
'938,429,939,429,944,429,429,429,429,429,429,429,482,429,429,429,952',
'955,850,956,850,850,850,957,850,462,958,438,429,429,960,429,970,429',
'438,438,438,978,981,438,438,438,472,438,482,429,982,983,482,482,482',
'482,438,438,438,438,850,462,472,472,984,462,462,438,438,850,438,438',
'438,438,438,985,987,1011,472,1012,472,463,472,472,472,472,1014,1025',
'472,1024,472,1024,1024,1024,1030,1024,1031,1032,438,438,438,438,438',
'438,438,438,438,438,438,438,438,438,1033,463,438,438,438,463,463,438',
'1034,1035,438,1036,1039,438,438,1024,438,1044,438,1045,438,1057,438',
'438,438,438,438,438,438,,438,438,438,665,,665,665,665,665,665,513,513',
'513,513,513,438,438,438,438,665,438,439,438,683,683,683,683,683,439',
'439,439,,438,439,439,439,,439,473,,,665,,,,,439,439,439,439,665,665',
'665,665,473,473,,439,439,,439,439,439,439,439,902,,902,902,902,473,902',
'473,,473,473,473,473,665,,473,1010,473,1010,1010,1010,665,1010,439,439',
'439,439,439,439,439,439,439,439,439,439,439,439,,,439,439,439,,,439',
',,439,,,439,439,,439,,439,,439,,439,439,439,439,439,439,439,,439,439',
'439,,,,,,,,,,,,,439,439,439,439,,439,,439,,36,36,36,36,36,36,,,439,36',
'36,,,,36,,36,36,36,36,36,36,36,,,,,,36,36,36,36,36,36,36,,,36,,,,,446',
'36,36,,36,36,36,36,36,36,36,36,36,,36,36,36,,36,36,,36,36,36,446,446',
'446,446,446,446,446,446,446,446,446,,446,446,,,446,446,,36,,,36,,,36',
'36,,,36,,36,446,,446,36,446,446,446,446,446,446,446,36,446,,,,36,36',
'36,36,36,36,,,,36,36,,446,,446,,,36,,,36,36,36,,,36,36,209,209,209,209',
'209,209,,,,209,209,,,,209,,209,209,209,209,209,209,209,,,,,,209,209',
'209,209,209,209,209,,,209,,,,,421,209,209,,209,209,209,209,209,209,209',
'209,209,,209,209,209,,209,209,,209,209,209,421,421,421,421,421,421,421',
'421,421,421,421,,421,421,,,421,421,,209,,,209,,,209,209,,,209,,209,421',
',421,209,421,421,421,421,421,421,421,209,421,,,,209,209,209,209,209',
'209,,,,209,209,,421,,,,,209,,,209,209,209,,,209,209,234,234,234,234',
'234,234,,,,234,234,,,,234,,234,234,234,234,234,234,234,,,,,,234,234',
'234,234,234,234,234,,,234,,,,,661,234,234,,234,234,234,234,234,234,234',
'234,234,,234,234,234,,234,234,,234,234,234,661,661,661,661,661,661,661',
'661,661,661,661,,661,661,,,661,661,,234,,,234,,,234,234,,,234,,234,661',
',661,234,661,661,661,661,661,661,661,234,661,,,,234,234,234,234,234',
'234,,,,234,234,,661,,,,,234,,,234,234,234,,,234,234,299,299,299,299',
'299,299,,,,299,299,,,,299,,299,299,299,299,299,299,299,,,,,,299,299',
'299,299,299,299,299,,,299,,,,,,299,299,,299,299,299,299,299,299,299',
'299,299,,299,299,299,,299,299,,299,299,299,24,24,24,24,24,24,24,24,24',
'24,24,,24,24,,,24,24,,299,,,299,,,299,299,,,299,,299,24,,24,299,24,24',
'24,24,24,24,24,299,24,,,,299,299,299,299,299,299,,,,299,299,,24,,,,',
'299,,,299,299,299,,,299,299,304,304,304,304,304,304,,,,304,304,,,,304',
',304,304,304,304,304,304,304,,,,,,304,304,304,304,304,304,304,,,304',
',,,,,304,304,,304,304,304,304,304,304,304,304,304,,304,304,304,,304',
'304,,304,304,304,279,279,279,279,279,279,279,279,279,279,279,,279,279',
',,279,279,,304,,,304,,,304,304,,,304,,304,279,,279,304,279,279,279,279',
'279,279,279,304,279,,,,304,304,304,304,304,304,,,,304,304,,279,,,,,304',
',,304,304,304,,,304,304,329,329,329,329,329,329,,,,329,329,,,,329,,329',
'329,329,329,329,329,329,,,,,,329,329,329,329,329,329,329,,,329,,,,,',
'329,329,,329,329,329,329,329,329,329,329,329,,329,329,329,,329,329,',
'329,329,329,441,441,441,441,441,441,441,441,441,441,441,,441,441,,,441',
'441,,329,,,329,,,329,329,,,329,,329,441,,441,329,441,441,441,441,441',
'441,441,329,441,,,,329,329,329,329,329,329,,,,329,329,,441,,,,,329,',
',329,329,329,,,329,329,407,407,407,407,407,407,,,,407,407,,,,407,,407',
'407,407,407,407,407,407,,,,,,407,407,407,407,407,407,407,,,407,,,,,',
'407,407,407,407,407,407,407,407,407,407,407,407,,407,407,407,,407,407',
',407,407,407,485,485,485,485,485,485,485,485,485,485,485,,485,485,,',
'485,485,,407,,,407,,,407,407,,,407,,407,485,,485,407,485,485,485,485',
'485,485,485,407,485,,,,407,407,407,407,407,407,,,,407,407,485,485,,',
',,407,,,407,407,407,,,407,407,583,583,583,583,583,583,,,,583,583,,,',
'583,,583,583,583,583,583,583,583,,,,,,583,583,583,583,583,583,583,,',
'583,,,,,,583,583,,583,583,583,583,583,583,583,583,583,,583,583,583,',
'583,583,,583,583,583,534,534,534,534,534,534,534,534,534,534,534,,534',
'534,,,534,534,,583,,,583,,,583,583,,,583,,583,534,,534,583,534,534,534',
'534,534,534,534,583,534,,,,583,583,583,583,583,583,,,,583,583,,534,',
',,,583,,,583,583,583,,,583,583,586,586,586,586,586,586,,,,586,586,,',
',586,,586,586,586,586,586,586,586,,,,,,586,586,586,586,586,586,586,',
',586,,,,,,586,586,,586,586,586,586,586,586,586,586,586,,586,586,586',
',586,586,,586,586,586,697,697,697,697,697,697,697,697,697,697,697,,697',
'697,,,697,697,,586,,,586,,,586,586,,,586,,586,697,,697,586,697,697,697',
'697,697,697,697,586,697,,,,586,586,586,586,586,586,,,,586,586,,697,',
',,,586,,,586,586,586,,,586,586,708,708,708,708,708,708,,,,708,708,,',
',708,,708,708,708,708,708,708,708,,,,,,708,708,708,708,708,708,708,',
',708,,,,,,708,708,,708,708,708,708,708,708,708,708,708,,708,708,708',
',708,708,,708,708,708,776,776,776,776,776,776,776,776,776,776,776,,776',
'776,,,776,776,,708,,,708,,,708,708,,,708,,708,776,,776,708,776,776,776',
'776,776,776,776,708,776,,,,708,708,708,708,708,708,,,,708,708,,776,',
',,,708,,,708,708,708,,,708,708,709,709,709,709,709,709,,,,709,709,,',
',709,,709,709,709,709,709,709,709,,,,,,709,709,709,709,709,709,709,',
',709,,,,,,709,709,,709,709,709,709,709,709,709,709,709,,709,709,709',
',709,709,,709,709,709,781,781,781,781,781,781,781,781,781,781,781,,781',
'781,,,781,781,,709,,,709,,,709,709,,,709,,709,781,,781,709,781,781,781',
'781,781,781,781,709,781,,,,709,709,709,709,709,709,,,,709,709,,781,',
',,,709,,,709,709,709,,,709,709,759,759,759,759,759,759,,,,759,759,,',
',759,,759,759,759,759,759,759,759,,,,,,759,759,759,759,759,759,759,',
',759,,,,,,759,759,,759,759,759,759,759,759,759,759,759,,759,759,759',
',759,759,,759,759,759,783,783,783,783,783,783,783,783,783,783,783,,783',
'783,,,783,783,,759,,,759,,,759,759,,,759,,759,783,,783,759,783,783,783',
'783,783,783,783,759,783,,,,759,759,759,759,759,759,,,,759,759,,783,',
',,,759,,,759,759,759,,,759,759,760,760,760,760,760,760,,,,760,760,,',
',760,,760,760,760,760,760,760,760,,,,,,760,760,760,760,760,760,760,',
',760,,,,,,760,760,,760,760,760,760,760,760,760,760,760,,760,760,760',
',760,760,,760,760,760,786,786,786,786,786,786,786,786,786,786,786,,786',
'786,,,786,786,,760,,,760,,,760,760,,,760,,760,786,,786,760,786,786,786',
'786,786,786,786,760,786,,,,760,760,760,760,760,760,,,,760,760,,786,',
',,,760,,,760,760,760,,,760,760,766,766,766,766,766,766,,,,766,766,,',
',766,,766,766,766,766,766,766,766,,,,,,766,766,766,766,766,766,766,',
',766,,,,,,766,766,,766,766,766,766,766,766,766,766,766,,766,766,766',
',766,766,,766,766,766,788,788,788,788,788,788,788,788,788,788,788,,788',
'788,,,788,788,,766,,,766,,,766,766,,,766,,766,788,,788,766,788,788,788',
'788,788,788,788,766,788,,,,766,766,766,766,766,766,,,,766,766,,788,',
',,,766,,,766,766,766,,,766,766,811,811,811,811,811,811,,,,811,811,,',
',811,,811,811,811,811,811,811,811,,,,,,811,811,811,811,811,811,811,',
',811,,,,,,811,811,,811,811,811,811,811,811,811,811,811,,811,811,811',
',811,811,,811,811,811,790,790,790,790,790,790,790,790,790,790,790,,790',
'790,,,790,790,,811,,,811,,,811,811,,,811,,811,790,,790,811,790,790,790',
'790,790,790,790,811,790,,,,811,811,811,811,811,811,,,,811,811,,790,',
',,,811,,,811,811,811,,,811,811,815,815,815,815,815,815,,,,815,815,,',
',815,,815,815,815,815,815,815,815,,,,,,815,815,815,815,815,815,815,',
',815,,,,,,815,815,,815,815,815,815,815,815,815,815,815,,815,815,815',
',815,815,,815,815,815,886,886,886,886,886,886,886,886,886,886,886,,886',
'886,,,886,886,,815,,,815,,,815,815,,,815,,815,886,,886,815,886,886,886',
'886,886,886,886,815,886,,,,815,815,815,815,815,815,,,,815,815,,886,',
',,,815,,,815,815,815,,,815,815,816,816,816,816,816,816,,,,816,816,,',
',816,,816,816,816,816,816,816,816,,,,,,816,816,816,816,816,816,816,',
',816,,,,,,816,816,,816,816,816,816,816,816,816,816,816,,816,816,816',
',816,816,,816,816,816,889,889,889,889,889,889,889,889,889,889,889,,889',
'889,,,889,889,,816,,,816,,,816,816,,,816,,816,889,,889,816,889,889,889',
'889,889,889,889,816,889,,,,816,816,816,816,816,816,,,,816,816,,889,',
',,,816,,,816,816,816,,,816,816,826,826,826,826,826,826,,,,826,826,,',
',826,,826,826,826,826,826,826,826,,,,,,826,826,826,826,826,826,826,',
',826,,,,,,826,826,,826,826,826,826,826,826,826,826,826,,826,826,826',
',826,826,,826,826,826,460,460,460,460,460,460,460,460,460,460,460,,460',
'460,,,460,460,,826,,,826,,,826,826,,,826,,826,460,,460,826,460,460,460',
'460,460,460,460,826,460,,,,826,826,826,826,826,826,,,,826,826,,,,,,',
'826,,,826,826,826,,,826,826,858,858,858,858,858,858,,,,858,858,,,,858',
',858,858,858,858,858,858,858,,,,,,858,858,858,858,858,858,858,,,858',
',,,,,858,858,,858,858,858,858,858,858,858,858,858,,858,858,858,,858',
'858,,858,858,858,461,461,461,461,461,461,461,461,461,461,461,,461,461',
',,461,461,,858,,,858,,,858,858,,,858,,858,461,,461,858,461,461,461,461',
'461,461,461,858,461,,,,858,858,858,858,858,858,,,,858,858,,,,,,,858',
',,858,858,858,,,858,858,859,859,859,859,859,859,,,,859,859,,,,859,,859',
'859,859,859,859,859,859,,,,,,859,859,859,859,859,859,859,,,859,,,,,',
'859,859,,859,859,859,859,859,859,859,859,859,,859,859,859,,859,859,',
'859,859,859,471,471,471,471,471,471,471,,,471,471,,,,,,471,471,,859',
',,859,,,859,859,,,859,,859,471,,471,859,471,471,471,471,471,471,471',
'859,471,,,,859,859,859,859,859,859,,,,859,859,,,,,,,859,,,859,859,859',
',,859,859,868,868,868,868,868,868,,,,868,868,,,,868,,868,868,868,868',
'868,868,868,,,,,,868,868,868,868,868,868,868,,,868,,,,,,868,868,,868',
'868,868,868,868,868,868,868,868,,868,868,868,,868,868,,868,868,868,474',
',,,,,,,,,,,,,,,474,474,,868,,,868,,470,868,868,,,868,,868,474,,474,868',
'474,474,474,474,470,470,474,868,474,,,,868,868,868,868,868,868,,,470',
'868,868,,470,470,470,470,,868,,,868,868,868,,,868,868,907,907,907,907',
'907,907,,,,907,907,,,,907,,907,907,907,907,907,907,907,,,,,,907,907',
'907,907,907,907,907,,,907,,,,,,907,907,,907,907,907,907,907,907,907',
'907,907,,907,907,907,,907,907,,907,907,907,475,,,,,,,,,,,,,,,,475,475',
',907,,,907,,,907,907,,,907,,907,475,,475,907,475,475,475,475,,,475,907',
'475,,,,907,907,907,907,907,907,,,,907,907,,,,,,,907,,,907,907,907,,',
'907,907,911,911,911,911,911,911,,,,911,911,,,,911,,911,911,911,911,911',
'911,911,,,,,,911,911,911,911,911,911,911,,,911,,,,,,911,911,,911,911',
'911,911,911,911,911,911,911,,911,911,911,,911,911,,911,911,911,476,476',
'476,476,476,476,476,,,476,476,,,,,,476,476,,911,,,911,,,911,911,,,911',
',911,476,,476,911,476,476,476,476,476,476,476,911,476,,,,911,911,911',
'911,911,911,,,,911,911,,,,,,,911,,,911,911,911,,,911,911,941,941,941',
'941,941,941,,,,941,941,,,,941,,941,941,941,941,941,941,941,,,,,,941',
'941,941,941,941,941,941,,,941,,,,,,941,941,,941,941,941,941,941,941',
'941,941,941,,941,941,941,,941,941,,941,941,941,477,477,477,477,477,477',
'477,,,477,477,,,,,,477,477,,941,,,941,,,941,941,,,941,,941,477,,477',
'941,477,477,477,477,477,477,477,941,477,,,,941,941,941,941,941,941,',
',,941,941,,,,,,,941,,,941,941,941,,,941,941,974,974,974,974,974,974',
',,,974,974,,,,974,,974,974,974,974,974,974,974,,,,,,974,974,974,974',
'974,974,974,,,974,,,,,,974,974,,974,974,974,974,974,974,974,974,974',
',974,974,974,,974,974,,974,974,974,478,478,478,478,478,478,478,,,478',
'478,,,,,,478,478,,974,,,974,,,974,974,,,974,,974,478,,478,974,478,478',
'478,478,478,478,478,974,478,,,,974,974,974,974,974,974,,,,974,974,,',
',,,,974,,,974,974,974,,,974,974,989,989,989,989,989,989,,,,989,989,',
',,989,,989,989,989,989,989,989,989,,,,,,989,989,989,989,989,989,989',
',,989,,,,,,989,989,,989,989,989,989,989,989,989,989,989,,989,989,989',
',989,989,,989,989,989,479,479,479,479,479,479,479,,,479,479,,,,,,479',
'479,,989,,,989,,,989,989,,,989,,989,479,,479,989,479,479,479,479,479',
'479,479,989,479,,,,989,989,989,989,989,989,,,,989,989,,,,,,,989,,,989',
'989,989,,,989,989,994,994,994,994,994,994,,,,994,994,,,,994,,994,994',
'994,994,994,994,994,,,,,,994,994,994,994,994,994,994,,,994,,,,,,994',
'994,,994,994,994,994,994,994,994,994,994,,994,994,994,,994,994,,994',
'994,994,480,480,480,480,480,480,480,,,480,480,,,,,,480,480,,994,,,994',
',,994,994,,,994,,994,480,,480,994,480,480,480,480,480,480,480,994,480',
',,,994,994,994,994,994,994,,,,994,994,,,,,,,994,,,994,994,994,,,994',
'994,997,997,997,997,997,997,,,,997,997,,,,997,,997,997,997,997,997,997',
'997,,,,,,997,997,997,997,997,997,997,,,997,,,,,,997,997,,997,997,997',
'997,997,997,997,997,997,,997,997,997,,997,997,,997,997,997,483,483,483',
'483,483,483,483,,,483,483,,,,,,483,483,,997,,,997,,,997,997,,,997,,997',
'483,,483,997,483,483,483,483,483,483,483,997,483,,,,997,997,997,997',
'997,997,,,,997,997,,,,,,,997,,,997,997,997,,,997,997,998,998,998,998',
'998,998,,,,998,998,,,,998,,998,998,998,998,998,998,998,,,,,,998,998',
'998,998,998,998,998,,,998,,,,,,998,998,,998,998,998,998,998,998,998',
'998,998,,998,998,998,,998,998,,998,998,998,484,484,484,484,484,484,484',
'484,,484,484,,,,,,484,484,,998,,,998,,,998,998,,,998,,998,484,,484,998',
'484,484,484,484,484,484,484,998,484,,,,998,998,998,998,998,998,,,,998',
'998,,,,,,,998,,,998,998,998,,,998,998,8,8,8,8,8,,,,8,8,,,,8,,8,8,8,8',
'8,8,8,,,,,,8,8,8,8,8,8,8,,,8,,,,,,8,8,8,8,8,8,8,8,8,8,8,8,,8,8,8,,8',
'8,,8,8,8,468,,,,,,,,,,,,,,,,468,468,,8,,,8,,,8,8,,,8,,8,468,,468,8,468',
'468,468,468,,,,8,,,,,8,8,8,8,8,8,,,,8,8,,,,,,,8,,,8,8,8,,,8,8,23,23',
'23,,23,,,,23,23,,,,23,,23,23,23,23,23,23,23,,,,,,23,23,23,23,23,23,23',
',,23,,,,,,,23,,,23,23,23,23,23,23,23,23,,23,23,23,,23,23,,23,23,23,469',
',,,,,,,,,,,,,,,469,469,,23,,,23,,,23,23,,,23,,,469,,469,23,469,469,469',
'469,,,,23,,,,,23,23,23,23,23,23,,,,23,23,,,,,,,23,,,23,23,23,,,23,23',
'32,32,32,,32,,,,32,32,,,,32,,32,32,32,32,32,32,32,,,,,,32,32,32,32,32',
'32,32,,,32,,,,,,,32,,,32,32,32,32,32,32,32,32,32,32,32,32,,32,32,,32',
'32,32,,,,,,,,,,,,,,,,,,,,32,,,32,,,32,32,,,32,,32,,32,,32,,,,,,,,32',
',,,,32,32,32,32,32,32,,,,32,32,,,,,,,32,,32,32,32,32,,,32,32,33,33,33',
',33,,,,33,33,,,,33,,33,33,33,33,33,33,33,,,,,,33,33,33,33,33,33,33,',
',33,,,,,,,33,,,33,33,33,33,33,33,33,33,33,33,33,33,,33,33,,33,33,33',
',,,,,,,,,,,,,,,,,,,33,,,33,,,33,33,,,33,,33,,33,,33,,,,,,,,33,,,,,33',
'33,33,33,33,33,,,,33,33,,,,,,,33,,33,33,33,33,,,33,33,34,34,34,,34,',
',,34,34,,,,34,,34,34,34,34,34,34,34,,,,,,34,34,34,34,34,34,34,,,34,',
',,,,,34,,,34,34,34,34,34,34,34,34,34,34,34,34,,34,34,,34,34,34,,,,,',
',,,,,,,,,,,,,,34,,,34,,,34,34,,,34,,34,,34,,34,,,,,,,,34,,,,,34,34,34',
'34,34,34,,,,34,34,,,,,,,34,,34,34,34,34,,,34,34,37,37,37,,37,,,,37,37',
',,,37,,37,37,37,37,37,37,37,,,,,,37,37,37,37,37,37,37,,,37,,,,,,,37',
',,37,37,37,37,37,37,37,37,,37,37,37,,37,37,,,,37,,,,,,,,,,,,,,,,,,,',
'37,,,37,,,37,37,,,37,,37,,,,,,,,,,,,,,,,,37,37,37,37,37,37,,,,37,37',
',,,,,,37,,,37,37,37,,,37,37,38,38,38,,38,,,,38,38,,,,38,,38,38,38,38',
'38,38,38,,,,,,38,38,38,38,38,38,38,,,38,,,,,,,38,,,38,38,38,38,38,38',
'38,38,,38,38,38,,38,38,,,,38,,,,,,,,,,,,,,,,,,,,38,,,38,,,38,38,,,38',
',,,,,,,,,,,,,,,,,,38,38,38,38,38,38,,,,38,38,,,,38,,,38,,,38,38,38,',
',38,38,45,45,45,,45,,,,45,45,,,,45,,45,45,45,45,45,45,45,,,,,,45,45',
'45,45,45,45,45,,,45,,,,,,,45,,,45,45,45,45,45,45,45,45,,45,45,45,,45',
'45,,45,45,45,,,,,,,,,,,,,,,,,,,,45,,,45,,,45,45,,,45,,,,,,45,,,,,,,',
'45,,,,,45,45,45,45,45,45,,,,45,45,,,,,,,45,,,45,45,45,,,45,45,46,46',
'46,,46,,,,46,46,,,,46,,46,46,46,46,46,46,46,,,,,,46,46,46,46,46,46,46',
',,46,,,,,,,46,,,46,46,46,46,46,46,46,46,,46,46,46,,46,46,,46,46,46,',
',,,,,,,,,,,,,,,,,,46,,,46,,,46,46,,,46,,,,,,46,,,,,,,,46,,,,,46,46,46',
'46,46,46,,,,46,46,,,,,,,46,,,46,46,46,,,46,46,47,47,47,,47,,,,47,47',
',,,47,,47,47,47,47,47,47,47,,,,,,47,47,47,47,47,47,47,,,47,,,,,,,47',
',,47,47,47,47,47,47,47,47,,47,47,47,,47,47,,47,47,47,,,,,,,,,,,,,,,',
',,,,47,,,47,,,47,47,,,47,,,,,,47,,,,,,,,47,,,,,47,47,47,47,47,47,,,',
'47,47,,,,,,,47,,,47,47,47,,,47,47,62,62,62,,62,,,,62,62,,,,62,,62,62',
'62,62,62,62,62,,,,,,62,62,62,62,62,62,62,,,62,,,,,,,62,,,62,62,62,62',
'62,62,62,62,62,62,62,62,,62,62,,62,62,62,,,,,,,,,,,,,,,,,,,,62,,,62',
',,62,62,,,62,,62,,,,62,,,,,,,,62,,,,,62,62,62,62,62,62,,,,62,62,,,,',
',,62,,62,62,62,62,,,62,62,66,66,66,,66,,,,66,66,,,,66,,66,66,66,66,66',
'66,66,,,,,,66,66,66,66,66,66,66,,,66,,,,,,,66,,,66,66,66,66,66,66,66',
'66,,66,66,66,,66,66,,66,66,66,,,,,,,,,,,,,,,,,,,,66,,,66,,,66,66,,,66',
',,,,,66,,,,,,,,66,,,,,66,66,66,66,66,66,,,,66,66,,,,,,,66,,,66,66,66',
',,66,66,67,67,67,,67,,,,67,67,,,,67,,67,67,67,67,67,67,67,,,,,,67,67',
'67,67,67,67,67,,,67,,,,,,,67,,,67,67,67,67,67,67,67,67,,67,67,67,,67',
'67,,67,67,67,,,,,,,,,,,,,,,,,,,,67,,,67,,,67,67,,,67,,,,,,67,,,,,,,',
'67,,,,,67,67,67,67,67,67,,,,67,67,,,,,,,67,,,67,67,67,,,67,67,70,70',
'70,,70,,,,70,70,,,,70,,70,70,70,70,70,70,70,,,,,,70,70,70,70,70,70,70',
',,70,,,,,,,70,,,70,70,70,70,70,70,70,70,,70,70,70,,70,70,,70,70,70,',
',,,,,,,,,,,,,,,,,,70,,,70,,,70,70,,,70,,,,,,70,,,,,,,,70,,,,,70,70,70',
'70,70,70,,,,70,70,70,,,,,70,70,,,70,70,70,,,70,70,71,71,71,,71,,,,71',
'71,,,,71,,71,71,71,71,71,71,71,,,,,,71,71,71,71,71,71,71,,,71,,,,,,',
'71,,,71,71,71,71,71,71,71,71,,71,71,71,,71,71,,,,71,,,,,,,,,,,,,,,,',
',,,71,,,71,,,71,71,,,71,,71,,,,,,,,,,,,,,,,,71,71,71,71,71,71,,,,71',
'71,,,,,,,71,,,71,71,71,,,71,71,114,114,114,114,114,,,,114,114,,,,114',
',114,114,114,114,114,114,114,,,,,,114,114,114,114,114,114,114,,,114',
',,,,,114,114,114,114,114,114,114,114,114,114,114,114,,114,114,114,,114',
'114,,114,114,114,,,,,,,,,,,,,,,,,,,,114,,,114,,,114,114,,,114,,114,',
',,114,,,,,,,,114,,,,,114,114,114,114,114,114,,,,114,114,,,,,,114,114',
',,114,114,114,,,114,114,119,119,119,,119,,,,119,119,,,,119,,119,119',
'119,119,119,119,119,,,,,,119,119,119,119,119,119,119,,,119,,,,,,,119',
',,119,119,119,119,119,119,119,119,,119,119,119,,119,119,,119,119,119',
',,,,,,,,,,,,,,,,,,,119,,,119,,,119,119,,,119,,,,,,119,,,,,,,,119,,,',
',119,119,119,119,119,119,,,,119,119,,,,,,,119,,,119,119,119,,,119,119',
'120,120,120,,120,,,,120,120,,,,120,,120,120,120,120,120,120,120,,,,',
',120,120,120,120,120,120,120,,,120,,,,,,,120,,,120,120,120,120,120,120',
'120,120,,120,120,120,,120,120,,120,120,120,,,,,,,,,,,,,,,,,,,,120,,',
'120,,,120,120,,,120,,,,,,120,,,,,,,,120,,,,,120,120,120,120,120,120',
',,,120,120,,,,,,,120,,,120,120,120,,,120,120,121,121,121,,121,,,,121',
'121,,,,121,,121,121,121,121,121,121,121,,,,,,121,121,121,121,121,121',
'121,,,121,,,,,,,121,,,121,121,121,121,121,121,121,121,,121,121,121,',
'121,121,,121,121,121,,,,,,,,,,,,,,,,,,,,121,,,121,,,121,121,,,121,,',
',,,121,,,,,,,,121,,,,,121,121,121,121,121,121,,,,121,121,,,,,,,121,',
',121,121,121,,,121,121,122,122,122,,122,,,,122,122,,,,122,,122,122,122',
'122,122,122,122,,,,,,122,122,122,122,122,122,122,,,122,,,,,,,122,,,122',
'122,122,122,122,122,122,122,,122,122,122,,122,122,,122,122,122,,,,,',
',,,,,,,,,,,,,,122,,,122,,,122,122,,,122,,,,,,122,,,,,,,,122,,,,,122',
'122,122,122,122,122,,,,122,122,,,,,,,122,,,122,122,122,,,122,122,123',
'123,123,123,123,,,,123,123,,,,123,,123,123,123,123,123,123,123,,,,,',
'123,123,123,123,123,123,123,,,123,,,,,,123,123,,123,123,123,123,123',
'123,123,123,123,,123,123,123,,123,123,,123,123,123,,,,,,,,,,,,,,,,,',
',,123,,,123,,,123,123,,,123,,123,,,,123,,,,,,,,123,,,,,123,123,123,123',
'123,123,,,,123,123,,,,,,,123,,,123,123,123,,,123,123,210,210,210,,210',
',,,210,210,,,,210,,210,210,210,210,210,210,210,,,,,,210,210,210,210',
'210,210,210,,,210,,,,,,,210,,,210,210,210,210,210,210,210,210,,210,210',
'210,,210,210,,210,210,210,,,,,,,,,,,,,,,,,,,,210,,,210,,,210,210,,,210',
',210,,,,210,,,,,,,,210,,,,,210,210,210,210,210,210,,,,210,210,,,,,,',
'210,,,210,210,210,,,210,210,211,211,211,,211,,,,211,211,,,,211,,211',
'211,211,211,211,211,211,,,,,,211,211,211,211,211,211,211,,,211,,,,,',
',211,,,211,211,211,211,211,211,211,211,,211,211,211,,211,211,,211,211',
'211,,,,,,,,,,,,,,,,,,,,211,,,211,,,211,211,,,211,,,,,,211,,,,,,,,211',
',,,,211,211,211,211,211,211,,,,211,211,,,,,,,211,,,211,211,211,,,211',
'211,212,212,212,,212,,,,212,212,,,,212,,212,212,212,212,212,212,212',
',,,,,212,212,212,212,212,212,212,,,212,,,,,,,212,,,212,212,212,212,212',
'212,212,212,212,212,212,212,,212,212,,212,212,212,,,,,,,,,,,,,,,,,,',
',212,,,212,,,212,212,,,212,,212,,212,,212,,,,,,,,212,,,,,212,212,212',
'212,212,212,,,,212,212,,,,,,,212,,212,212,212,212,,,212,212,217,217',
'217,,217,,,,217,217,,,,217,,217,217,217,217,217,217,217,,,,,,217,217',
'217,217,217,217,217,,,217,,,,,,,217,,,217,217,217,217,217,217,217,217',
',217,217,217,,217,217,,217,217,217,,,,,,,,,,,,,,,,,,,,217,,,217,,,217',
'217,,,217,,,,,,217,,,,,,,,217,,,,,217,217,217,217,217,217,,,,217,217',
',,,,,,217,,,217,217,217,,,217,217,218,218,218,,218,,,,218,218,,,,218',
',218,218,218,218,218,218,218,,,,,,218,218,218,218,218,218,218,,,218',
',,,,,,218,,,218,218,218,218,218,218,218,218,,218,218,218,,218,218,,218',
'218,218,,,,,,,,,,,,,,,,,,,,218,,,218,,,218,218,,,218,,218,,,,218,,,',
',,,,218,,,,,218,218,218,218,218,218,,,,218,218,,,,,,,218,,,218,218,218',
',,218,218,219,219,219,,219,,,,219,219,,,,219,,219,219,219,219,219,219',
'219,,,,,,219,219,219,219,219,219,219,,,219,,,,,,,219,,,219,219,219,219',
'219,219,219,219,,219,219,219,,219,219,,219,219,219,,,,,,,,,,,,,,,,,',
',,219,,,219,,,219,219,,,219,,,,,,219,,,,,,,,219,,,,,219,219,219,219',
'219,219,,,,219,219,,,,,,,219,,,219,219,219,,,219,219,220,220,220,,220',
',,,220,220,,,,220,,220,220,220,220,220,220,220,,,,,,220,220,220,220',
'220,220,220,,,220,,,,,,,220,,,220,220,220,220,220,220,220,220,,220,220',
'220,,220,220,,220,220,220,,,,,,,,,,,,,,,,,,,,220,,,220,,,220,220,,,220',
',,,,,220,,,,,,,,220,,,,,220,220,220,220,220,220,,,,220,220,,,,,,,220',
',,220,220,220,,,220,220,221,221,221,,221,,,,221,221,,,,221,,221,221',
'221,221,221,221,221,,,,,,221,221,221,221,221,221,221,,,221,,,,,,,221',
',,221,221,221,221,221,221,221,221,,221,221,221,,221,221,,221,221,221',
',,,,,,,,,,,,,,,,,,,221,,,221,,,221,221,,,221,,,,,,221,,,,,,,,221,,,',
',221,221,221,221,221,221,,,,221,221,,,,,,,221,,,221,221,221,,,221,221',
'222,222,222,,222,,,,222,222,,,,222,,222,222,222,222,222,222,222,,,,',
',222,222,222,222,222,222,222,,,222,,,,,,,222,,,222,222,222,222,222,222',
'222,222,,222,222,222,,222,222,,222,222,222,,,,,,,,,,,,,,,,,,,,222,,',
'222,,,222,222,,,222,,,,,,222,,,,,,,,222,,,,,222,222,222,222,222,222',
',,,222,222,222,,,,,,222,,,222,222,222,,,222,222,233,233,233,,233,,,',
'233,233,,,,233,,233,233,233,233,233,233,233,,,,,,233,233,233,233,233',
'233,233,,,233,,,,,,,233,,,233,233,233,233,233,233,233,233,,233,233,233',
',233,233,,233,233,233,,,,,,,,,,,,,,,,,,,,233,,,233,,,233,233,,,233,',
',,,,233,,,,,,,,233,,,,,233,233,233,233,233,233,,,,233,233,,,,,,,233',
',,233,233,233,,,233,233,236,236,236,,236,,,,236,236,,,,236,,236,236',
'236,236,236,236,236,,,,,,236,236,236,236,236,236,236,,,236,,,,,,,236',
',,236,236,236,236,236,236,236,236,,236,236,236,,236,236,,236,236,236',
',,,,,,,,,,,,,,,,,,,236,,,236,,,236,236,,,236,,,,,,236,,,,,,,,236,,,',
',236,236,236,236,236,236,,,,236,236,,,,,,,236,,,236,236,236,,,236,236',
'237,237,237,,237,,,,237,237,,,,237,,237,237,237,237,237,237,237,,,,',
',237,237,237,237,237,237,237,,,237,,,,,,,237,,,237,237,237,237,237,237',
'237,237,,237,237,237,,237,237,,237,237,237,,,,,,,,,,,,,,,,,,,,237,,',
'237,,,237,237,,,237,,,,,,237,,,,,,,,237,,,,,237,237,237,237,237,237',
',,,237,237,,,,,,,237,,,237,237,237,,,237,237,238,238,238,,238,,,,238',
'238,,,,238,,238,238,238,238,238,238,238,,,,,,238,238,238,238,238,238',
'238,,,238,,,,,,,238,,,238,238,238,238,238,238,238,238,,238,238,238,',
'238,238,,238,238,238,,,,,,,,,,,,,,,,,,,,238,,,238,,,238,238,,,238,,',
',,,238,,,,,,,,238,,,,,238,238,238,238,238,238,,,,238,238,,,,,,,238,',
',238,238,238,,,238,238,239,239,239,,239,,,,239,239,,,,239,,239,239,239',
'239,239,239,239,,,,,,239,239,239,239,239,239,239,,,239,,,,,,,239,,,239',
'239,239,239,239,239,239,239,,239,239,239,,239,239,,239,239,239,,,,,',
',,,,,,,,,,,,,,239,,,239,,,239,239,,,239,,,,,,239,,,,,,,,239,,,,,239',
'239,239,239,239,239,,,,239,239,,,,,,,239,,,239,239,239,,,239,239,240',
'240,240,,240,,,,240,240,,,,240,,240,240,240,240,240,240,240,,,,,,240',
'240,240,240,240,240,240,,,240,,,,,,,240,,,240,240,240,240,240,240,240',
'240,,240,240,240,,240,240,,240,240,240,,,,,,,,,,,,,,,,,,,,240,,,240',
',,240,240,,,240,,,,,,240,,,,,,,,240,,,,,240,240,240,240,240,240,,,,240',
'240,,,,,,,240,,,240,240,240,,,240,240,241,241,241,,241,,,,241,241,,',
',241,,241,241,241,241,241,241,241,,,,,,241,241,241,241,241,241,241,',
',241,,,,,,,241,,,241,241,241,241,241,241,241,241,,241,241,241,,241,241',
',241,241,241,,,,,,,,,,,,,,,,,,,,241,,,241,,,241,241,,,241,,,,,,241,',
',,,,,,241,,,,,241,241,241,241,241,241,,,,241,241,,,,,,,241,,,241,241',
'241,,,241,241,242,242,242,,242,,,,242,242,,,,242,,242,242,242,242,242',
'242,242,,,,,,242,242,242,242,242,242,242,,,242,,,,,,,242,,,242,242,242',
'242,242,242,242,242,,242,242,242,,242,242,,242,242,242,,,,,,,,,,,,,',
',,,,,,242,,,242,,,242,242,,,242,,,,,,242,,,,,,,,242,,,,,242,242,242',
'242,242,242,,,,242,242,,,,,,,242,,,242,242,242,,,242,242,243,243,243',
',243,,,,243,243,,,,243,,243,243,243,243,243,243,243,,,,,,243,243,243',
'243,243,243,243,,,243,,,,,,,243,,,243,243,243,243,243,243,243,243,,243',
'243,243,,243,243,,243,243,243,,,,,,,,,,,,,,,,,,,,243,,,243,,,243,243',
',,243,,,,,,243,,,,,,,,243,,,,,243,243,243,243,243,243,,,,243,243,,,',
',,,243,,,243,243,243,,,243,243,244,244,244,,244,,,,244,244,,,,244,,244',
'244,244,244,244,244,244,,,,,,244,244,244,244,244,244,244,,,244,,,,,',
',244,,,244,244,244,244,244,244,244,244,,244,244,244,,244,244,,244,244',
'244,,,,,,,,,,,,,,,,,,,,244,,,244,,,244,244,,,244,,,,,,244,,,,,,,,244',
',,,,244,244,244,244,244,244,,,,244,244,,,,,,,244,,,244,244,244,,,244',
'244,245,245,245,,245,,,,245,245,,,,245,,245,245,245,245,245,245,245',
',,,,,245,245,245,245,245,245,245,,,245,,,,,,,245,,,245,245,245,245,245',
'245,245,245,,245,245,245,,245,245,,245,245,245,,,,,,,,,,,,,,,,,,,,245',
',,245,,,245,245,,,245,,,,,,245,,,,,,,,245,,,,,245,245,245,245,245,245',
',,,245,245,,,,,,,245,,,245,245,245,,,245,245,246,246,246,,246,,,,246',
'246,,,,246,,246,246,246,246,246,246,246,,,,,,246,246,246,246,246,246',
'246,,,246,,,,,,,246,,,246,246,246,246,246,246,246,246,,246,246,246,',
'246,246,,246,246,246,,,,,,,,,,,,,,,,,,,,246,,,246,,,246,246,,,246,,',
',,,246,,,,,,,,246,,,,,246,246,246,246,246,246,,,,246,246,,,,,,,246,',
',246,246,246,,,246,246,247,247,247,,247,,,,247,247,,,,247,,247,247,247',
'247,247,247,247,,,,,,247,247,247,247,247,247,247,,,247,,,,,,,247,,,247',
'247,247,247,247,247,247,247,,247,247,247,,247,247,,247,247,247,,,,,',
',,,,,,,,,,,,,,247,,,247,,,247,247,,,247,,,,,,247,,,,,,,,247,,,,,247',
'247,247,247,247,247,,,,247,247,,,,,,,247,,,247,247,247,,,247,247,248',
'248,248,,248,,,,248,248,,,,248,,248,248,248,248,248,248,248,,,,,,248',
'248,248,248,248,248,248,,,248,,,,,,,248,,,248,248,248,248,248,248,248',
'248,,248,248,248,,248,248,,248,248,248,,,,,,,,,,,,,,,,,,,,248,,,248',
',,248,248,,,248,,,,,,248,,,,,,,,248,,,,,248,248,248,248,248,248,,,,248',
'248,,,,,,,248,,,248,248,248,,,248,248,249,249,249,,249,,,,249,249,,',
',249,,249,249,249,249,249,249,249,,,,,,249,249,249,249,249,249,249,',
',249,,,,,,,249,,,249,249,249,249,249,249,249,249,,249,249,249,,249,249',
',249,249,249,,,,,,,,,,,,,,,,,,,,249,,,249,,,249,249,,,249,,,,,,249,',
',,,,,,249,,,,,249,249,249,249,249,249,,,,249,249,,,,,,,249,,,249,249',
'249,,,249,249,250,250,250,,250,,,,250,250,,,,250,,250,250,250,250,250',
'250,250,,,,,,250,250,250,250,250,250,250,,,250,,,,,,,250,,,250,250,250',
'250,250,250,250,250,,250,250,250,,250,250,,250,250,250,,,,,,,,,,,,,',
',,,,,,250,,,250,,,250,250,,,250,,,,,,250,,,,,,,,250,,,,,250,250,250',
'250,250,250,,,,250,250,,,,,,,250,,,250,250,250,,,250,250,251,251,251',
',251,,,,251,251,,,,251,,251,251,251,251,251,251,251,,,,,,251,251,251',
'251,251,251,251,,,251,,,,,,,251,,,251,251,251,251,251,251,251,251,,251',
'251,251,,251,251,,251,251,251,,,,,,,,,,,,,,,,,,,,251,,,251,,,251,251',
',,251,,,,,,251,,,,,,,,251,,,,,251,251,251,251,251,251,,,,251,251,,,',
',,,251,,,251,251,251,,,251,251,252,252,252,,252,,,,252,252,,,,252,,252',
'252,252,252,252,252,252,,,,,,252,252,252,252,252,252,252,,,252,,,,,',
',252,,,252,252,252,252,252,252,252,252,,252,252,252,,252,252,,252,252',
'252,,,,,,,,,,,,,,,,,,,,252,,,252,,,252,252,,,252,,,,,,252,,,,,,,,252',
',,,,252,252,252,252,252,252,,,,252,252,,,,,,,252,,,252,252,252,,,252',
'252,253,253,253,,253,,,,253,253,,,,253,,253,253,253,253,253,253,253',
',,,,,253,253,253,253,253,253,253,,,253,,,,,,,253,,,253,253,253,253,253',
'253,253,253,,253,253,253,,253,253,,253,253,253,,,,,,,,,,,,,,,,,,,,253',
',,253,,,253,253,,,253,,,,,,253,,,,,,,,253,,,,,253,253,253,253,253,253',
',,,253,253,,,,,,,253,,,253,253,253,,,253,253,254,254,254,,254,,,,254',
'254,,,,254,,254,254,254,254,254,254,254,,,,,,254,254,254,254,254,254',
'254,,,254,,,,,,,254,,,254,254,254,254,254,254,254,254,,254,254,254,',
'254,254,,254,254,254,,,,,,,,,,,,,,,,,,,,254,,,254,,,254,254,,,254,,',
',,,254,,,,,,,,254,,,,,254,254,254,254,254,254,,,,254,254,,,,,,,254,',
',254,254,254,,,254,254,255,255,255,,255,,,,255,255,,,,255,,255,255,255',
'255,255,255,255,,,,,,255,255,255,255,255,255,255,,,255,,,,,,,255,,,255',
'255,255,255,255,255,255,255,,255,255,255,,255,255,,255,255,255,,,,,',
',,,,,,,,,,,,,,255,,,255,,,255,255,,,255,,,,,,255,,,,,,,,255,,,,,255',
'255,255,255,255,255,,,,255,255,,,,,,,255,,,255,255,255,,,255,255,256',
'256,256,,256,,,,256,256,,,,256,,256,256,256,256,256,256,256,,,,,,256',
'256,256,256,256,256,256,,,256,,,,,,,256,,,256,256,256,256,256,256,256',
'256,,256,256,256,,256,256,,256,256,256,,,,,,,,,,,,,,,,,,,,256,,,256',
',,256,256,,,256,,,,,,256,,,,,,,,256,,,,,256,256,256,256,256,256,,,,256',
'256,,,,,,,256,,,256,256,256,,,256,256,257,257,257,,257,,,,257,257,,',
',257,,257,257,257,257,257,257,257,,,,,,257,257,257,257,257,257,257,',
',257,,,,,,,257,,,257,257,257,257,257,257,257,257,,257,257,257,,257,257',
',257,257,257,,,,,,,,,,,,,,,,,,,,257,,,257,,,257,257,,,257,,,,,,257,',
',,,,,,257,,,,,257,257,257,257,257,257,,,,257,257,,,,,,,257,,,257,257',
'257,,,257,257,258,258,258,,258,,,,258,258,,,,258,,258,258,258,258,258',
'258,258,,,,,,258,258,258,258,258,258,258,,,258,,,,,,,258,,,258,258,258',
'258,258,258,258,258,,258,258,258,,258,258,,258,258,258,,,,,,,,,,,,,',
',,,,,,258,,,258,,,258,258,,,258,,,,,,258,,,,,,,,258,,,,,258,258,258',
'258,258,258,,,,258,258,,,,,,,258,,,258,258,258,,,258,258,259,259,259',
',259,,,,259,259,,,,259,,259,259,259,259,259,259,259,,,,,,259,259,259',
'259,259,259,259,,,259,,,,,,,259,,,259,259,259,259,259,259,259,259,,259',
'259,259,,259,259,,259,259,259,,,,,,,,,,,,,,,,,,,,259,,,259,,,259,259',
',,259,,,,,,259,,,,,,,,259,,,,,259,259,259,259,259,259,,,,259,259,,,',
',,,259,,,259,259,259,,,259,259,260,260,260,,260,,,,260,260,,,,260,,260',
'260,260,260,260,260,260,,,,,,260,260,260,260,260,260,260,,,260,,,,,',
',260,,,260,260,260,260,260,260,260,260,,260,260,260,,260,260,,260,260',
'260,,,,,,,,,,,,,,,,,,,,260,,,260,,,260,260,,,260,,,,,,260,,,,,,,,260',
',,,,260,260,260,260,260,260,,,,260,260,,,,,,,260,,,260,260,260,,,260',
'260,261,261,261,,261,,,,261,261,,,,261,,261,261,261,261,261,261,261',
',,,,,261,261,261,261,261,261,261,,,261,,,,,,,261,,,261,261,261,261,261',
'261,261,261,,261,261,261,,261,261,,261,261,261,,,,,,,,,,,,,,,,,,,,261',
',,261,,,261,261,,,261,,,,,,261,,,,,,,,261,,,,,261,261,261,261,261,261',
',,,261,261,,,,,,,261,,,261,261,261,,,261,261,268,268,268,,268,,,,268',
'268,,,,268,,268,268,268,268,268,268,268,,,,,,268,268,268,268,268,268',
'268,,,268,,,,,,,268,,,268,268,268,268,268,268,268,268,268,268,268,268',
',268,268,,268,268,268,,,,,,,,,,,,,,,,,,,,268,,,268,,,268,268,,,268,',
'268,,268,,268,,,,,,,,268,,,,,268,268,268,268,268,268,,,,268,268,,,,',
',,268,,268,268,268,268,,,268,268,274,274,274,,274,,,,274,274,,,,274',
',274,274,274,274,274,274,274,,,,,,274,274,274,274,274,274,274,,,274',
',,,,,,274,,,274,274,274,274,274,274,274,274,274,274,274,274,,274,274',
',274,274,274,,,,,,,,,,,,,,,,,,,,274,,,274,,,274,274,,,274,,274,,274',
',274,,,,,,,,274,,,,,274,274,274,274,274,274,,,,274,274,,,,,,,274,,274',
'274,274,274,,,274,274,277,277,277,,277,,,,277,277,,,,277,,277,277,277',
'277,277,277,277,,,,,,277,277,277,277,277,277,277,,,277,,,,,,,277,,,277',
'277,277,277,277,277,277,277,277,277,277,277,,277,277,,277,277,277,,',
',,,,,,,,,,,,,,,,,277,,,277,,,277,277,,,277,,277,,277,,277,,,,,,,,277',
',,,,277,277,277,277,277,277,,,,277,277,277,,,,,,277,,277,277,277,277',
',,277,277,284,284,284,,284,,,,284,284,,,,284,,284,284,284,284,284,284',
'284,,,,,,284,284,284,284,284,284,284,,,284,,,,,,,284,,,284,284,284,284',
'284,284,284,284,,284,284,284,,284,284,,284,284,284,,,,,,,,,,,,,,,,,',
',,284,,,284,,,284,284,,,284,,,,,,284,,,,,,,,284,,,,,284,284,284,284',
'284,284,,,,284,284,,,,,,,284,,,284,284,284,,,284,284,286,286,286,,286',
',,,286,286,,,,286,,286,286,286,286,286,286,286,,,,,,286,286,286,286',
'286,286,286,,,286,,,,,,,286,,,286,286,286,286,286,286,286,286,,286,286',
'286,,286,286,,286,286,286,,,,,,,,,,,,,,,,,,,,286,,,286,,,286,286,,,286',
',,,,,286,,,,,,,,286,,,,,286,286,286,286,286,286,,,,286,286,,,,,,,286',
',,286,286,286,,,286,286,288,288,288,,288,,,,288,288,,,,288,,288,288',
'288,288,288,288,288,,,,,,288,288,288,288,288,288,288,,,288,,,,,,,288',
',,288,288,288,288,288,288,288,288,,288,288,288,,288,288,,288,288,288',
',,,,,,,,,,,,,,,,,,,288,,,288,,,288,288,,,288,,,,,,288,,,,,,,,288,,,',
',288,288,288,288,288,288,,,,288,288,,,,,,,288,,,288,288,288,,,288,288',
'291,291,291,,291,,,,291,291,,,,291,,291,291,291,291,291,291,291,,,,',
',291,291,291,291,291,291,291,,,291,,,,,,,291,,,291,291,291,291,291,291',
'291,291,,291,291,291,,291,291,,291,291,291,,,,,,,,,,,,,,,,,,,,291,,',
'291,,,291,291,,,291,,,,,,291,,,,,,,,291,,,,,291,291,291,291,291,291',
',,,291,291,,,,,,,291,,,291,291,291,,,291,291,297,297,297,297,297,,,',
'297,297,,,,297,,297,297,297,297,297,297,297,,,,,,297,297,297,297,297',
'297,297,,,297,,,,,,297,297,,297,297,297,297,297,297,297,297,297,,297',
'297,297,,297,297,,297,297,297,,,,,,,,,,,,,,,,,,,,297,,,297,,,297,297',
',,297,,297,,,,297,,,,,,,,297,,,,,297,297,297,297,297,297,,,,297,297',
',,,,,,297,,,297,297,297,,,297,297,303,303,303,,303,,,,303,303,,,,303',
',303,303,303,303,303,303,303,,,,,,303,303,303,303,303,303,303,,,303',
',,,,,,303,,,303,303,303,303,303,303,303,303,,303,303,303,,303,303,,',
',303,,,,,,,,,,,,,,,,,,,,303,,,303,,,303,303,,,303,,,,,,,,,,,,,,,,,,',
'303,303,303,303,303,303,,,,303,303,,,,303,,,303,,,303,303,303,,,303',
'303,320,320,320,,320,,,,320,320,,,,320,,320,320,320,320,320,320,320',
',,,,,320,320,320,320,320,320,320,,,320,,,,,,,320,,,320,320,320,320,320',
'320,320,320,,320,320,320,,320,320,,,,320,,,,,,,,,,,,,,,,,,,,320,,,320',
',,320,320,,,320,,,,,,,,,,,,,,,,,,,320,320,320,320,320,320,,,,320,320',
',,,,,,320,,,320,320,320,,,320,320,328,328,328,,328,,,,328,328,,,,328',
',328,328,328,328,328,328,328,,,,,,328,328,328,328,328,328,328,,,328',
',,,,,,328,,,328,328,328,328,328,328,328,328,,328,328,328,,328,328,,328',
'328,328,,,,,,,,,,,,,,,,,,,,328,,,328,328,,328,328,,,328,,,,,,328,,,',
',,,,328,,,,,328,328,328,328,328,328,,,,328,328,,,,,,,328,,,328,328,328',
',,328,328,331,331,331,,331,,,,331,331,,,,331,,331,331,331,331,331,331',
'331,,,,,,331,331,331,331,331,331,331,,,331,,,,,,,331,,,331,331,331,331',
'331,331,331,331,,331,331,331,,331,331,,331,331,331,,,,,,,,,,,,,,,,,',
',,331,,,331,,,331,331,,,331,,,,,,331,,,,,,,,331,,,,,331,331,331,331',
'331,331,,,,331,331,,,,,,,331,,,331,331,331,,,331,331,337,337,337,,337',
',,,337,337,,,,337,,337,337,337,337,337,337,337,,,,,,337,337,337,337',
'337,337,337,,,337,,,,,,,337,,,337,337,337,337,337,337,337,337,337,337',
'337,337,,337,337,,337,337,337,,,,,,,,,,,,,,,,,,,,337,,,337,,,337,337',
',,337,,,,,,337,,,,,,,,337,,,,,337,337,337,337,337,337,,,,337,337,,,',
',,,337,,337,337,337,337,,,337,337,344,344,344,,344,,,,344,344,,,,344',
',344,344,344,344,344,344,344,,,,,,344,344,344,344,344,344,344,,,344',
',,,,,,344,,,344,344,344,344,344,344,344,344,,344,344,344,,344,344,,344',
'344,344,,,,,,,,,,,,,,,,,,,,344,,,344,,,344,344,,,344,,,,,,344,,,,,,',
',344,,,,,344,344,344,344,344,344,,,,344,344,,,,,,,344,,,344,344,344',
',,344,344,345,345,345,,345,,,,345,345,,,,345,,345,345,345,345,345,345',
'345,,,,,,345,345,345,345,345,345,345,,,345,,,,,,,345,,,345,345,345,345',
'345,345,345,345,,345,345,345,,345,345,,345,345,345,,,,,,,,,,,,,,,,,',
',,345,,,345,,,345,345,,,345,,,,,,345,,,,,,,,345,,,,,345,345,345,345',
'345,345,,,,345,345,,,,,,,345,,,345,345,345,,,345,345,357,357,357,,357',
',,,357,357,,,,357,,357,357,357,357,357,357,357,,,,,,357,357,357,357',
'357,357,357,,,357,,,,,,,357,,,357,357,357,357,357,357,357,357,,357,357',
'357,,357,357,,,,357,,,,,,,,,,,,,,,,,,,,357,,,357,,,357,357,,,357,,,',
',,,,,,,,,,,,,,,357,357,357,357,357,357,,,,357,357,,,,,,,357,,,357,357',
'357,,,357,357,359,359,359,,359,,,,359,359,,,,359,,359,359,359,359,359',
'359,359,,,,,,359,359,359,359,359,359,359,,,359,,,,,,,359,,,359,359,359',
'359,359,359,359,359,,359,359,359,,359,359,,,,359,,,,,,,,,,,,,,,,,,,',
'359,,,359,,,359,359,,,359,,,,,,,,,,,,,,,,,,,359,359,359,359,359,359',
',,,359,359,,,,,,,359,,,359,359,359,,,359,359,417,417,417,,417,,,,417',
'417,,,,417,,417,417,417,417,417,417,417,,,,,,417,417,417,417,417,417',
'417,,,417,,,,,,,417,,,417,417,417,417,417,417,417,417,,417,417,417,',
'417,417,,417,417,417,,,,,,,,,,,,,,,,,,,,417,,,417,,,417,417,,,417,,',
',,,417,,,,,,,,417,,,,,417,417,417,417,417,417,,,,417,417,,,,,,,417,',
',417,417,417,,,417,417,455,455,455,,455,,,,455,455,,,,455,,455,455,455',
'455,455,455,455,,,,,,455,455,455,455,455,455,455,,,455,,,,,,,455,,,455',
'455,455,455,455,455,455,455,455,455,455,455,,455,455,,455,455,455,,',
',,,,,,,,,,,,,,,,,455,,,455,,,455,455,,,455,,455,,455,,455,,,,,,,,455',
',,,,455,455,455,455,455,455,,,,455,455,,,,,,,455,,455,455,455,455,,',
'455,455,457,457,457,,457,,,,457,457,,,,457,,457,457,457,457,457,457',
'457,,,,,,457,457,457,457,457,457,457,,,457,,,,,,,457,,,457,457,457,457',
'457,457,457,457,,457,457,457,,457,457,,457,457,457,,,,,,,,,,,,,,,,,',
',,457,,,457,,,457,457,,,457,,,,,,457,,,,,,,,457,,,,,457,457,457,457',
'457,457,,,,457,457,,,,,,,457,,,457,457,457,,,457,457,458,458,458,,458',
',,,458,458,,,,458,,458,458,458,458,458,458,458,,,,,,458,458,458,458',
'458,458,458,,,458,,,,,,,458,,,458,458,458,458,458,458,458,458,,458,458',
'458,,458,458,,458,458,458,,,,,,,,,,,,,,,,,,,,458,,,458,,,458,458,,,458',
',,,,,458,,,,,,,,458,,,,,458,458,458,458,458,458,,,,458,458,,,,,,,458',
',,458,458,458,,,458,458,459,459,459,,459,,,,459,459,,,,459,,459,459',
'459,459,459,459,459,,,,,,459,459,459,459,459,459,459,,,459,,,,,,,459',
',,459,459,459,459,459,459,459,459,,459,459,459,,459,459,,459,459,459',
',,,,,,,,,,,,,,,,,,,459,,,459,,,459,459,,,459,,,,,,459,,,,,,,,459,,,',
',459,459,459,459,459,459,,,,459,459,,,,,,,459,,,459,459,459,,,459,459',
'500,500,500,,500,,,,500,500,,,,500,,500,500,500,500,500,500,500,,,,',
',500,500,500,500,500,500,500,,,500,,,,,,,500,,,500,500,500,500,500,500',
'500,500,500,500,500,500,,500,500,,500,500,500,,,,,,,,,,,,,,,,,,,,500',
',,500,,,500,500,,,500,,500,,500,,500,,,,,,,,500,,,,,500,500,500,500',
'500,500,,,,500,500,,,,,,,500,,500,500,500,500,,,500,500,503,503,503',
',503,,,,503,503,,,,503,,503,503,503,503,503,503,503,,,,,,503,503,503',
'503,503,503,503,,,503,,,,,,,503,,,503,503,503,503,503,503,503,503,503',
'503,503,503,,503,503,,503,503,503,,,,,,,,,,,,,,,,,,,,503,,,503,,,503',
'503,,,503,,,,503,,503,,,,,,,,503,,,,,503,503,503,503,503,503,,,,503',
'503,,,,,,,503,,503,503,503,503,,,503,503,505,505,505,,505,,,,505,505',
',,,505,,505,505,505,505,505,505,505,,,,,,505,505,505,505,505,505,505',
',,505,,,,,,,505,,,505,505,505,505,505,505,505,505,,505,505,505,,505',
'505,,505,505,505,,,,,,,,,,,,,,,,,,,,505,,,505,,,505,505,,,505,,,,,,505',
',,,,,,,505,,,,,505,505,505,505,505,505,,,,505,505,,,,,,,505,,,505,505',
'505,,,505,505,509,509,509,,509,,,,509,509,,,,509,,509,509,509,509,509',
'509,509,,,,,,509,509,509,509,509,509,509,,,509,,,,,,,509,,,509,509,509',
'509,509,509,509,509,,509,509,509,,509,509,,509,509,509,,,,,,,,,,,,,',
',,,,,,509,,,509,,,509,509,,,509,,,,,,509,,,,,,,,509,,,,,509,509,509',
'509,509,509,,,,509,509,,,,,,,509,,,509,509,509,,,509,509,512,512,512',
'512,512,,,,512,512,,,,512,,512,512,512,512,512,512,512,,,,,,512,512',
'512,512,512,512,512,,,512,,,,,,512,512,,512,512,512,512,512,512,512',
'512,512,,512,512,512,,512,512,,512,512,512,,,,,,,,,,,,,,,,,,,,512,,',
'512,,,512,512,,,512,,512,,,,512,,,,,,,,512,,,,,512,512,512,512,512,512',
',,,512,512,,,,,,512,512,,,512,512,512,,,512,512,519,519,519,,519,,,',
'519,519,,,,519,,519,519,519,519,519,519,519,,,,,,519,519,519,519,519',
'519,519,,,519,,,,,,,519,,,519,519,519,519,519,519,519,519,,519,519,519',
',519,519,,,,519,,,,,,,,,,,,,,,,,,,,519,,,519,,,519,519,,,519,,,,,,,',
',,,,,,,,,,,519,519,519,519,519,519,,,,519,519,,,,,,,519,,,519,519,519',
',,519,519,521,521,521,,521,,,,521,521,,,,521,,521,521,521,521,521,521',
'521,,,,,,521,521,521,521,521,521,521,,,521,,,,,,,521,,,521,521,521,521',
'521,521,521,521,521,521,521,521,,521,521,,521,521,521,,,,,,,,,,,,,,',
',,,,,521,,,521,,,521,521,,,521,,521,,521,,521,,,,,,,,521,,,,,521,521',
'521,521,521,521,,,,521,521,,,,,,,521,,521,521,521,521,,,521,521,527',
'527,527,,527,,,,527,527,,,,527,,527,527,527,527,527,527,527,,,,,,527',
'527,527,527,527,527,527,,,527,,,,,,,527,,,527,527,527,527,527,527,527',
'527,,527,527,527,,527,527,,,,527,,,,,,,,,,,,,,,,,,,,527,,,527,,,527',
'527,,,527,,,,,,,,,,,,,,,,,,,527,527,527,527,527,527,,,,527,527,,,,,',
',527,,,527,527,527,,,527,527,530,530,530,,530,,,,530,530,,,,530,,530',
'530,530,530,530,530,530,,,,,,530,530,530,530,530,530,530,,,530,,,,,',
',530,,,530,530,530,530,530,530,530,530,,530,530,530,,530,530,,530,530',
'530,,,,,,,,,,,,,,,,,,,,530,,,530,,,530,530,,,530,,,,,,530,,,,,,,,530',
',,,,530,530,530,530,530,530,,,,530,530,,,,,,,530,,,530,530,530,,,530',
'530,531,531,531,,531,,,,531,531,,,,531,,531,531,531,531,531,531,531',
',,,,,531,531,531,531,531,531,531,,,531,,,,,,,531,,,531,531,531,531,531',
'531,531,531,,531,531,531,,531,531,,531,531,531,,,,,,,,,,,,,,,,,,,,531',
',,531,,,531,531,,,531,,,,,,531,,,,,,,,531,,,,,531,531,531,531,531,531',
',,,531,531,,,,,,,531,,,531,531,531,,,531,531,535,535,535,,535,,,,535',
'535,,,,535,,535,535,535,535,535,535,535,,,,,,535,535,535,535,535,535',
'535,,,535,,,,,,,535,,,535,535,535,535,535,535,535,535,,535,535,535,',
'535,535,,535,535,535,,,,,,,,,,,,,,,,,,,,535,,,535,,,535,535,,,535,,',
',,,535,,,,,,,,535,,,,,535,535,535,535,535,535,,,,535,535,,,,,,,535,',
',535,535,535,,,535,535,541,541,541,,541,,,,541,541,,,,541,,541,541,541',
'541,541,541,541,,,,,,541,541,541,541,541,541,541,,,541,,,,,,,541,,,541',
'541,541,541,541,541,541,541,541,541,541,541,,541,541,,541,541,541,,',
',,,,,,,,,,,,,,,,,541,,,541,,,541,541,,,541,,541,,,,541,,,,,,,,541,,',
',,541,541,541,541,541,541,,,,541,541,,,,,,,541,,541,541,541,541,,,541',
'541,544,544,544,,544,,,,544,544,,,,544,,544,544,544,544,544,544,544',
',,,,,544,544,544,544,544,544,544,,,544,,,,,,,544,,,544,544,544,544,544',
'544,544,544,544,544,544,544,,544,544,,544,544,544,,,,,,,,,,,,,,,,,,',
',544,,,544,,,544,544,,,544,,,,,,544,,,,,,,,544,,,,,544,544,544,544,544',
'544,,,,544,544,,,,,,,544,,544,544,544,544,,,544,544,571,571,571,,571',
',,,571,571,,,,571,,571,571,571,571,571,571,571,,,,,,571,571,571,571',
'571,571,571,,,571,,,,,,,571,,,571,571,571,571,571,571,571,571,,571,571',
'571,,571,571,,571,571,571,,,,,,,,,,,,,,,,,,,,571,,,571,,,571,571,,,571',
',,,,,571,,,,,,,,571,,,,,571,571,571,571,571,571,,,,571,571,,,,,,,571',
',,571,571,571,,,571,571,592,592,592,,592,,,,592,592,,,,592,,592,592',
'592,592,592,592,592,,,,,,592,592,592,592,592,592,592,,,592,,,,,,,592',
',,592,592,592,592,592,592,592,592,592,592,592,592,,592,592,,592,592',
'592,,,,,,,,,,,,,,,,,,,,592,,,592,,,592,592,,,592,,592,,592,,592,,,,',
',,,592,,,,,592,592,592,592,592,592,,,,592,592,,,,,,,592,,592,592,592',
'592,,,592,592,604,604,604,,604,,,,604,604,,,,604,,604,604,604,604,604',
'604,604,,,,,,604,604,604,604,604,604,604,,,604,,,,,,,604,,,604,604,604',
'604,604,604,604,604,,604,604,604,,604,604,,604,604,604,,,,,,,,,,,,,',
',,,,,,604,,,604,,,604,604,,,604,,,,,,604,,,,,,,,604,,,,,604,604,604',
'604,604,604,,,,604,604,,,,,,,604,,,604,604,604,,,604,604,608,608,608',
',608,,,,608,608,,,,608,,608,608,608,608,608,608,608,,,,,,608,608,608',
'608,608,608,608,,,608,,,,,,,608,,,608,608,608,608,608,608,608,608,,608',
'608,608,,608,608,,608,608,608,,,,,,,,,,,,,,,,,,,,608,,,608,,,608,608',
',,608,,,,,,608,,,,,,,,608,,,,,608,608,608,608,608,608,,,,608,608,,,',
',,,608,,,608,608,608,,,608,608,637,637,637,,637,,,,637,637,,,,637,,637',
'637,637,637,637,637,637,,,,,,637,637,637,637,637,637,637,,,637,,,,,',
',637,,,637,637,637,637,637,637,637,637,,637,637,637,,637,637,,637,637',
'637,,,,,,,,,,,,,,,,,,,,637,,,637,,,637,637,,,637,,637,,,,637,,,,,,,',
'637,,,,,637,637,637,637,637,637,,,,637,637,,,,,,,637,,,637,637,637,',
',637,637,638,638,638,,638,,,,638,638,,,,638,,638,638,638,638,638,638',
'638,,,,,,638,638,638,638,638,638,638,,,638,,,,,,,638,,,638,638,638,638',
'638,638,638,638,,638,638,638,,638,638,,638,638,638,,,,,,,,,,,,,,,,,',
',,638,,,638,,,638,638,,,638,,,,,,638,,,,,,,,638,,,,,638,638,638,638',
'638,638,,,,638,638,,,,,,,638,,,638,638,638,,,638,638,641,641,641,,641',
',,,641,641,,,,641,,641,641,641,641,641,641,641,,,,,,641,641,641,641',
'641,641,641,,,641,,,,,,,641,,,641,641,641,641,641,641,641,641,641,641',
'641,641,,641,641,,641,641,641,,,,,,,,,,,,,,,,,,,,641,,,641,,,641,641',
',,641,,641,,641,,641,,,,,,,,641,,,,,641,641,641,641,641,641,,,,641,641',
',,,,,,641,,641,641,641,641,,,641,641,642,642,642,,642,,,,642,642,,,',
'642,,642,642,642,642,642,642,642,,,,,,642,642,642,642,642,642,642,,',
'642,,,,,,,642,,,642,642,642,642,642,642,642,642,642,642,642,642,,642',
'642,,642,642,642,,,,,,,,,,,,,,,,,,,,642,,,642,,,642,642,,,642,,,,642',
',642,,,,,,,,642,,,,,642,642,642,642,642,642,,,,642,642,,,,,,,642,,642',
'642,642,642,,,642,642,643,643,643,,643,,,,643,643,,,,643,,643,643,643',
'643,643,643,643,,,,,,643,643,643,643,643,643,643,,,643,,,,,,,643,,,643',
'643,643,643,643,643,643,643,,643,643,643,,643,643,,643,643,643,,,,,',
',,,,,,,,,,,,,,643,,,643,,,643,643,,,643,,,,,,643,,,,,,,,643,,,,,643',
'643,643,643,643,643,,,,643,643,,,,,,,643,,,643,643,643,,,643,643,644',
'644,644,,644,,,,644,644,,,,644,,644,644,644,644,644,644,644,,,,,,644',
'644,644,644,644,644,644,,,644,,,,,,,644,,,644,644,644,644,644,644,644',
'644,,644,644,644,,644,644,,644,644,644,,,,,,,,,,,,,,,,,,,,644,,,644',
',,644,644,,,644,,,,,,644,,,,,,,,644,,,,,644,644,644,644,644,644,,,,644',
'644,,,,,,,644,,,644,644,644,,,644,644,649,649,649,,649,,,,649,649,,',
',649,,649,649,649,649,649,649,649,,,,,,649,649,649,649,649,649,649,',
',649,,,,,,,649,,,649,649,649,649,649,649,649,649,,649,649,649,,649,649',
',649,649,649,,,,,,,,,,,,,,,,,,,,649,,,649,,,649,649,,,649,,,,,,649,',
',,,,,,649,,,,,649,649,649,649,649,649,,,,649,649,,,,,,,649,,,649,649',
'649,,,649,649,650,650,650,,650,,,,650,650,,,,650,,650,650,650,650,650',
'650,650,,,,,,650,650,650,650,650,650,650,,,650,,,,,,,650,,,650,650,650',
'650,650,650,650,650,,650,650,650,,650,650,,650,650,650,,,,,,,,,,,,,',
',,,,,,650,,,650,,,650,650,,,650,,,,,,650,,,,,,,,650,,,,,650,650,650',
'650,650,650,,,,650,650,,,,,,,650,,,650,650,650,,,650,650,653,653,653',
',653,,,,653,653,,,,653,,653,653,653,653,653,653,653,,,,,,653,653,653',
'653,653,653,653,,,653,,,,,,,653,,,653,653,653,653,653,653,653,653,,653',
'653,653,,653,653,,653,653,653,,,,,,,,,,,,,,,,,,,,653,,,653,,,653,653',
',,653,,,,,,653,,,,,,,,653,,,,,653,653,653,653,653,653,,,,653,653,,,',
',,,653,,,653,653,653,,,653,653,654,654,654,,654,,,,654,654,,,,654,,654',
'654,654,654,654,654,654,,,,,,654,654,654,654,654,654,654,,,654,,,,,',
',654,,,654,654,654,654,654,654,654,654,,654,654,654,,654,654,,654,654',
'654,,,,,,,,,,,,,,,,,,,,654,,,654,,,654,654,,,654,,,,,,654,,,,,,,,654',
',,,,654,654,654,654,654,654,,,,654,654,,,,,,,654,,,654,654,654,,,654',
'654,678,678,678,,678,,,,678,678,,,,678,,678,678,678,678,678,678,678',
',,,,,678,678,678,678,678,678,678,,,678,,,,,,,678,,,678,678,678,678,678',
'678,678,678,,678,678,678,,678,678,,678,678,678,,,,,,,,,,,,,,,,,,,,678',
',,678,,,678,678,,,678,,,,,,678,,,,,,,,678,,,,,678,678,678,678,678,678',
',,,678,678,,,,,,,678,,,678,678,678,,,678,678,681,681,681,,681,,,,681',
'681,,,,681,,681,681,681,681,681,681,681,,,,,,681,681,681,681,681,681',
'681,,,681,,,,,,,681,,,681,681,681,681,681,681,681,681,,681,681,681,',
'681,681,,681,681,681,,,,,,,,,,,,,,,,,,,,681,,,681,,,681,681,,,681,,',
',,,681,,,,,,,,681,,,,,681,681,681,681,681,681,,,,681,681,,,,,,,681,',
',681,681,681,,,681,681,685,685,685,,685,,,,685,685,,,,685,,685,685,685',
'685,685,685,685,,,,,,685,685,685,685,685,685,685,,,685,,,,,,,685,,,685',
'685,685,685,685,685,685,685,,685,685,685,,685,685,,,,685,,,,,,,,,,,',
',,,,,,,,685,,,685,,,685,685,,,685,,,,,,,,,,,,,,,,,,,685,685,685,685',
'685,685,,,,685,685,,,,,,,685,,,685,685,685,,,685,685,696,696,696,,696',
',,,696,696,,,,696,,696,696,696,696,696,696,696,,,,,,696,696,696,696',
'696,696,696,,,696,,,,,,,696,,,696,696,696,696,696,696,696,696,,696,696',
'696,,696,696,,,,696,,,,,,,,,,,,,,,,,,,,696,,,696,,,696,696,,,696,,,',
',,,,,,,,,,,,,,,696,696,696,696,696,696,,,,696,696,,,,,,,696,,,696,696',
'696,,,696,696,701,701,701,,701,,,,701,701,,,,701,,701,701,701,701,701',
'701,701,,,,,,701,701,701,701,701,701,701,,,701,,,,,,,701,,,701,701,701',
'701,701,701,701,701,,701,701,701,,701,701,,701,701,701,,,,,,,,,,,,,',
',,,,,,701,,,701,,,701,701,,,701,,701,,,,701,,,,,,,,701,,,,,701,701,701',
'701,701,701,,,,701,701,,,,,,,701,,,701,701,701,,,701,701,721,721,721',
',721,,,,721,721,,,,721,,721,721,721,721,721,721,721,,,,,,721,721,721',
'721,721,721,721,,,721,,,,,,,721,,,721,721,721,721,721,721,721,721,,721',
'721,721,,721,721,,721,721,721,,,,,,,,,,,,,,,,,,,,721,,,721,,,721,721',
',,721,,,,,,721,,,,,,,,721,,,,,721,721,721,721,721,721,,,,721,721,,,',
',,,721,,,721,721,721,,,721,721,741,741,741,,741,,,,741,741,,,,741,,741',
'741,741,741,741,741,741,,,,,,741,741,741,741,741,741,741,,,741,,,,,',
',741,,,741,741,741,741,741,741,741,741,,741,741,741,,741,741,,741,741',
'741,,,,,,,,,,,,,,,,,,,,741,,,741,,,741,741,,,741,,741,,,,741,,,,,,,',
'741,,,,,741,741,741,741,741,741,,,,741,741,,,,,,,741,,,741,741,741,',
',741,741,747,747,747,,747,,,,747,747,,,,747,,747,747,747,747,747,747',
'747,,,,,,747,747,747,747,747,747,747,,,747,,,,,,,747,,,747,747,747,747',
'747,747,747,747,,747,747,747,,747,747,,747,747,747,,,,,,,,,,,,,,,,,',
',,747,,,747,,,747,747,,,747,,,,,,747,,,,,,,,747,,,,,747,747,747,747',
'747,747,,,,747,747,,,,,,,747,,,747,747,747,,,747,747,753,753,753,,753',
',,,753,753,,,,753,,753,753,753,753,753,753,753,,,,,,753,753,753,753',
'753,753,753,,,753,,,,,,,753,,,753,753,753,753,753,753,753,753,753,753',
'753,753,,753,753,,753,753,753,,,,,,,,,,,,,,,,,,,,753,,,753,,,753,753',
',,753,,753,,753,,753,,,,,,,,753,,,,,753,753,753,753,753,753,,,,753,753',
',,,,,,753,,753,753,753,753,,,753,753,775,775,775,,775,,,,775,775,,,',
'775,,775,775,775,775,775,775,775,,,,,,775,775,775,775,775,775,775,,',
'775,,,,,,,775,,,775,775,775,775,775,775,775,775,,775,775,775,,775,775',
',775,775,775,,,,,,,,,,,,,,,,,,,,775,,,775,,,775,775,,,775,,,,,,775,',
',,,,,,775,,,,,775,775,775,775,775,775,,,,775,775,,,,,,,775,,,775,775',
'775,,,775,775,777,777,777,,777,,,,777,777,,,,777,,777,777,777,777,777',
'777,777,,,,,,777,777,777,777,777,777,777,,,777,,,,,,,777,,,777,777,777',
'777,777,777,777,777,,777,777,777,,777,777,,777,777,777,,,,,,,,,,,,,',
',,,,,,777,,,777,,,777,777,,,777,,,,,,777,,,,,,,,777,,,,,777,777,777',
'777,777,777,,,,777,777,,,,,,,777,,,777,777,777,,,777,777,791,791,791',
',791,,,,791,791,,,,791,,791,791,791,791,791,791,791,,,,,,791,791,791',
'791,791,791,791,,,791,,,,,,,791,,,791,791,791,791,791,791,791,791,,791',
'791,791,,791,791,,791,791,791,,,,,,,,,,,,,,,,,,,,791,,,791,,,791,791',
',,791,,,,,,791,,,,,,,,791,,,,,791,791,791,791,791,791,,,,791,791,,,',
',,,791,,,791,791,791,,,791,791,792,792,792,,792,,,,792,792,,,,792,,792',
'792,792,792,792,792,792,,,,,,792,792,792,792,792,792,792,,,792,,,,,',
',792,,,792,792,792,792,792,792,792,792,,792,792,792,,792,792,,792,792',
'792,,,,,,,,,,,,,,,,,,,,792,,,792,,,792,792,,,792,,,,,,792,,,,,,,,792',
',,,,792,792,792,792,792,792,,,,792,792,,,,,,,792,,,792,792,792,,,792',
'792,793,793,793,,793,,,,793,793,,,,793,,793,793,793,793,793,793,793',
',,,,,793,793,793,793,793,793,793,,,793,,,,,,,793,,,793,793,793,793,793',
'793,793,793,,793,793,793,,793,793,,793,793,793,,,,,,,,,,,,,,,,,,,,793',
',,793,,,793,793,,,793,,,,,,793,,,,,,,,793,,,,,793,793,793,793,793,793',
',,,793,793,,,,,,,793,,,793,793,793,,,793,793,794,794,794,,794,,,,794',
'794,,,,794,,794,794,794,794,794,794,794,,,,,,794,794,794,794,794,794',
'794,,,794,,,,,,,794,,,794,794,794,794,794,794,794,794,,794,794,794,',
'794,794,,794,794,794,,,,,,,,,,,,,,,,,,,,794,,,794,,,794,794,,,794,,',
',,,794,,,,,,,,794,,,,,794,794,794,794,794,794,,,,794,794,,,,,,,794,',
',794,794,794,,,794,794,796,796,796,,796,,,,796,796,,,,796,,796,796,796',
'796,796,796,796,,,,,,796,796,796,796,796,796,796,,,796,,,,,,,796,,,796',
'796,796,796,796,796,796,796,,796,796,796,,796,796,,796,796,796,,,,,',
',,,,,,,,,,,,,,796,,,796,,,796,796,,,796,,,,,,796,,,,,,,,796,,,,,796',
'796,796,796,796,796,,,,796,796,,,,,,,796,,,796,796,796,,,796,796,808',
'808,808,,808,,,,808,808,,,,808,,808,808,808,808,808,808,808,,,,,,808',
'808,808,808,808,808,808,,,808,,,,,,,808,,,808,808,808,808,808,808,808',
'808,,808,808,808,,808,808,,,,808,,,,,,,,,,,,,,,,,,,,808,,,808,,,808',
'808,,,808,,,,,,,,,,,,,,,,,,,808,808,808,808,808,808,,,,808,808,,,,,',
',808,,,808,808,808,,,808,808,856,856,856,,856,,,,856,856,,,,856,,856',
'856,856,856,856,856,856,,,,,,856,856,856,856,856,856,856,,,856,,,,,',
',856,,,856,856,856,856,856,856,856,856,,856,856,856,,856,856,,856,856',
'856,,,,,,,,,,,,,,,,,,,,856,,,856,,,856,856,,,856,,,,,,856,,,,,,,,856',
',,,,856,856,856,856,856,856,,,,856,856,,,,,,,856,,,856,856,856,,,856',
'856,869,869,869,,869,,,,869,869,,,,869,,869,869,869,869,869,869,869',
',,,,,869,869,869,869,869,869,869,,,869,,,,,,,869,,,869,869,869,869,869',
'869,869,869,,869,869,869,,869,869,,869,869,869,,,,,,,,,,,,,,,,,,,,869',
',,869,,,869,869,,,869,,,,,,869,,,,,,,,869,,,,,869,869,869,869,869,869',
',,,869,869,,,,,,,869,,,869,869,869,,,869,869,887,887,887,,887,,,,887',
'887,,,,887,,887,887,887,887,887,887,887,,,,,,887,887,887,887,887,887',
'887,,,887,,,,,,,887,,,887,887,887,887,887,887,887,887,887,887,887,887',
',887,887,,887,887,887,,,,,,,,,,,,,,,,,,,,887,,,887,,,887,887,,,887,',
',,887,,887,,,,,,,,887,,,,,887,887,887,887,887,887,,,,887,887,,,,,,,887',
',887,887,887,887,,,887,887,888,888,888,,888,,,,888,888,,,,888,,888,888',
'888,888,888,888,888,,,,,,888,888,888,888,888,888,888,,,888,,,,,,,888',
',,888,888,888,888,888,888,888,888,,888,888,888,,888,888,,888,888,888',
',,,,,,,,,,,,,,,,,,,888,,,888,,,888,888,,,888,,,,,,888,,,,,,,,888,,,',
',888,888,888,888,888,888,,,,888,888,,,,,,,888,,,888,888,888,,,888,888',
'903,903,903,,903,,,,903,903,,,,903,,903,903,903,903,903,903,903,,,,',
',903,903,903,903,903,903,903,,,903,,,,,,,903,,,903,903,903,903,903,903',
'903,903,,903,903,903,,903,903,,,,903,,,,,,,,,,,,,,,,,,,,903,,,903,,',
'903,903,,,903,,,,,,,,,,,,,,,,,,,903,903,903,903,903,903,,,,903,903,',
',,,,,903,,,903,903,903,,,903,903,915,915,915,,915,,,,915,915,,,,915',
',915,915,915,915,915,915,915,,,,,,915,915,915,915,915,915,915,,,915',
',,,,,,915,,,915,915,915,915,915,915,915,915,,915,915,915,,915,915,,',
',915,,,,,,,,,,,,,,,,,,,,915,,,915,,,915,915,,,915,,,,,,,,,,,,,,,,,,',
'915,915,915,915,915,915,,,,915,915,,,,,,,915,,,915,915,915,,,915,915',
'940,940,940,,940,,,,940,940,,,,940,,940,940,940,940,940,940,940,,,,',
',940,940,940,940,940,940,940,,,940,,,,,,,940,,,940,940,940,940,940,940',
'940,940,,940,940,940,,940,940,,940,940,940,,,,,,,,,,,,,,,,,,,,940,,',
'940,,,940,940,,,940,,940,,,,940,,,,,,,,940,,,,,940,940,940,940,940,940',
',,,940,940,,,,,,,940,,,940,940,940,,,940,940,1015,1015,1015,,1015,,',
',1015,1015,,,,1015,,1015,1015,1015,1015,1015,1015,1015,,,,,,1015,1015',
'1015,1015,1015,1015,1015,,,1015,,,,,,,1015,,,1015,1015,1015,1015,1015',
'1015,1015,1015,1015,1015,1015,1015,,1015,1015,,1015,1015,1015,,,,,,',
',,,,,,,,,,,,,1015,,,1015,,,1015,1015,,,1015,,1015,,1015,,1015,,,,,,',
',1015,,,,,1015,1015,1015,1015,1015,1015,,,,1015,1015,,,,,,,1015,,1015',
'1015,1015,1015,,,1015,1015,11,11,11,11,11,11,11,11,11,11,11,11,11,11',
'11,11,11,11,11,11,11,11,11,11,,,,11,11,11,11,11,11,11,11,11,11,,,,,',
'11,11,11,11,11,11,11,11,11,11,,11,,,,,,,,,11,11,,11,11,11,11,11,11,11',
',,11,11,,,,11,11,11,11,,,,,,,,,,,,,,11,11,,11,11,11,11,11,11,11,11,11',
'11,11,,,11,11,,,,,,,,,,11,,,,,,,,,11,12,12,12,12,12,12,12,12,12,12,12',
'12,12,12,12,12,12,12,12,12,12,12,12,12,,,,12,12,12,12,12,12,12,12,12',
'12,,,,,,12,12,12,12,12,12,12,12,12,,,12,,,,,,,,,12,12,,12,12,12,12,12',
'12,12,,,12,12,,,,12,12,12,12,,,,,,,,,,,,,,12,12,,12,12,12,12,12,12,12',
'12,12,12,12,,,12,12,,,,,,,,,,12,,,,,,,,,12,74,74,74,74,74,74,74,74,74',
'74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,,,,74,74,74,74,74,74,74',
'74,74,74,,,,,,74,74,74,74,74,74,74,74,74,74,74,74,,74,,,,,,,74,74,,74',
'74,74,74,74,74,74,,,74,74,,,,74,74,74,74,,,,,,74,,,,,,,,74,74,,74,74',
'74,74,74,74,74,74,74,74,74,,,74,,,,,,,,,,,,,,,,,,,,74,91,91,91,91,91',
'91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,,,,91,91,91',
'91,91,91,91,91,91,91,,,,,,91,91,91,91,91,91,91,91,91,91,91,91,,91,,',
',,,,91,91,,91,91,91,91,91,91,91,,,91,91,,,,91,91,91,91,,,,,,,,,,,,,',
'91,91,,91,91,91,91,91,91,91,91,91,91,91,,,91,,,,,,,,,,,,,,,,,,,,91,408',
'408,408,408,408,408,408,408,408,408,408,408,408,408,408,408,408,408',
'408,408,408,408,408,408,,,,408,408,408,408,408,408,408,408,408,408,',
',,,,408,408,408,408,408,408,408,408,408,,,408,,,,,,,,,408,408,,408,408',
'408,408,408,408,408,,,408,408,,,,408,408,408,408,,,,,,,,,,,,,,408,408',
',408,408,408,408,408,408,408,408,408,408,408,,,408,408,,,,,,,,,,408',
',,,,,,,,408,634,634,634,634,634,634,634,634,634,634,634,634,634,634',
'634,634,634,634,634,634,634,634,634,634,,,,634,634,634,634,634,634,634',
'634,634,634,,,,,,634,634,634,634,634,634,634,634,634,,,634,,,,,,,,,634',
'634,,634,634,634,634,634,634,634,,,634,634,,,,634,634,634,634,,,,,,',
',,,,,,,634,634,,634,634,634,634,634,634,634,634,634,634,634,,,634,634',
',,,,,,,,,634,,,,,,,,,634,763,763,763,763,763,763,763,763,763,763,763',
'763,763,763,763,763,763,763,763,763,763,763,763,763,,,,763,763,763,763',
'763,763,763,763,763,763,,,,,,763,763,763,763,763,763,763,763,763,,,763',
',,,,,,,,763,763,,763,763,763,763,763,763,763,,,763,763,,,,763,763,763',
'763,,,,,,,,,,,,,,763,763,,763,763,763,763,763,763,763,763,763,763,763',
'487,,763,,,,,487,487,487,,,487,487,487,715,487,715,715,715,715,715,763',
',,487,487,,,,,715,,,,,487,487,,487,487,487,487,487,,,,,,,,,,715,,719',
',719,719,719,719,719,715,715,715,715,,,,,,719,,,,,,,487,,,,,,,487,,',
',,487,487,,719,,,,,715,,,,213,213,719,719,213,,,,,,487,487,,213,213',
',213,213,213,213,213,213,213,,487,213,213,,,487,213,213,213,213,,,719',
',,213,,,,,,,,213,213,,213,213,213,213,213,213,213,213,213,213,213,,',
'213,,,,,214,214,,,214,,,,,,,,,214,214,213,214,214,214,214,214,214,214',
',,214,214,,,,214,214,214,214,,,,,,214,,,,,,,,214,214,,214,214,214,214',
'214,214,214,214,214,214,214,,,214,,,,,264,264,,,264,,,,,,,,,264,264',
'214,264,264,264,264,264,264,264,,,264,264,,,,264,264,264,264,,,,,,,',
',,,,,,264,264,,264,264,264,264,264,264,264,264,264,264,264,,,264,,,',
',453,453,,,453,,,,,,,,,453,453,264,453,453,453,453,453,453,453,,,453',
'453,,,,453,453,453,453,,,,,,453,,,,,,,,453,453,,453,453,453,453,453',
'453,453,453,453,453,453,,,453,,,,,454,454,,,454,,,,,,,,,454,454,453',
'454,454,454,454,454,454,454,,,454,454,,,,454,454,454,454,,,,,,454,,',
',,,,,454,454,,454,454,454,454,454,454,454,454,454,454,454,,,454,,,,',
'522,522,,,522,,,,,,,,,522,522,454,522,522,522,522,522,522,522,,,522',
'522,,,,522,522,522,522,,,,,,522,,,,,,,,522,522,,522,522,522,522,522',
'522,522,522,522,522,522,,,522,,,,,523,523,,,523,,,,,,,,,523,523,522',
'523,523,523,523,523,523,523,,,523,523,,,,523,523,523,523,,,,,,523,,',
',,,,,523,523,,523,523,523,523,523,523,523,523,523,523,523,,,523,,,,',
'532,532,,,532,,,,,,,,,532,532,523,532,532,532,532,532,532,532,,,532',
'532,,,,532,532,532,532,,,,,,532,,,,,,,,532,532,,532,532,532,532,532',
'532,532,532,532,532,532,,,532,,,,,533,533,,,533,,,,,,,,,533,533,532',
'533,533,533,533,533,533,533,,,533,533,,,,533,533,533,533,,,,,,533,,',
',,,,,533,533,,533,533,533,533,533,533,533,533,533,533,533,,,533,,,,',
'593,593,,,593,,,,,,,,,593,593,533,593,593,593,593,593,593,593,,,593',
'593,,,,593,593,593,593,,,,,,593,,,,,,,,593,593,,593,593,593,593,593',
'593,593,593,593,593,593,,,593,,,,,594,594,,,594,,,,,,,,,594,594,593',
'594,594,594,594,594,594,594,,,594,594,,,,594,594,594,594,,,,,,594,,',
',,,,,594,594,,594,594,594,594,594,594,594,594,594,594,594,,717,594,717',
'717,717,717,717,,,,,,,,,,717,,,,,594,,,,,,,,,898,,898,898,898,898,898',
',717,751,751,,,751,,,898,717,717,717,717,,751,751,,751,751,751,751,751',
'751,751,,,751,751,,,898,751,751,751,751,,,,,,751,898,898,,,717,,,751',
'751,,751,751,751,751,751,751,751,751,751,751,751,,,751,,,,,752,752,',
',752,,898,,,,,,,752,752,751,752,752,752,752,752,752,752,,,752,752,,',
',752,752,752,752,,,,,,752,,,,,,,,752,752,,752,752,752,752,752,752,752',
'752,752,752,752,,761,752,761,761,761,761,761,893,,893,893,893,893,893',
',,761,,,,,752,,893,896,,896,896,896,896,896,,,,,,,,761,,896,,,,,893',
',761,761,761,761,,,,893,893,893,893,,,,921,896,921,921,921,921,921,',
',,896,896,896,896,,923,921,923,923,923,923,923,761,,,,,,,893,,923,,',
',,,,921,925,,925,925,925,925,925,896,921,921,921,921,,,923,927,925,927',
'927,927,927,927,,,,923,923,,,,950,927,950,950,950,950,950,,925,,,,,',
'921,,950,,,925,925,,,927,,,,,,923,,,,,927,927,,,950,950,,967,967,,,967',
',950,950,950,950,,,925,967,967,,967,967,967,967,967,967,967,,,967,967',
'927,,,967,967,967,967,,,,,,967,,,950,,,,,967,967,,967,967,967,967,967',
'967,967,967,967,967,967,,1000,967,1000,1000,1000,1000,1000,1002,,1002',
'1002,1002,1002,1002,,,1000,,,,,967,,1002,1004,,1004,1004,1004,1004,1004',
',,,,,,,1000,,1004,,,,,1002,,1000,1000,1000,1000,,,,,,1002,1002,,,,1006',
'1004,1006,1006,1006,1006,1006,,,,,,1004,1004,,,1006,,,,,,1000,,,,,,',
'1002,,,,,,,,,1006,1016,1016,,,1016,,,1004,,,1006,1006,,1016,1016,,1016',
'1016,1016,1016,1016,1016,1016,,,1016,1016,,,,1016,1016,1016,1016,,,',
',,1016,,,,,1006,,,1016,1016,,1016,1016,1016,1016,1016,1016,1016,1016',
'1016,1016,1016,,,1016,,,,,1017,1017,,,1017,,,,,,,,,1017,1017,1016,1017',
'1017,1017,1017,1017,1017,1017,,,1017,1017,,,,1017,1017,1017,1017,,,',
',,1017,,,,,,,,1017,1017,,1017,1017,1017,1017,1017,1017,1017,1017,1017',
'1017,1017,,1019,1017,1019,1019,1019,1019,1019,1050,,1050,1050,1050,1050',
'1050,,,1019,,,,,1017,,1050,,,,,,,,,,,,,,,1019,,,,,,,1050,,,,1019,1019',
',,,,,1050,1050,,,,,,,,,,,,,,,,,,,,,,,,,,1019,,,,,,,1050' ]
        racc_action_check = arr = ::Array.new(26474, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

racc_action_pointer = [
   nil,    60,     0,   100,   nil,   318,   nil,   nil,  5657,  1128,
   nil, 23997, 24130,     2,   nil,    -5,    72,   348,   147,    53,
   668,   nil,   190,  5797,  1992,   236,   nil,   113,   nil,   273,
   796,   921,  5937,  6077,  6217,   nil,  1569,  6357,  6497,   nil,
   160,   278,   361,   275,   378,  6637,  6777,  6917,   208,   574,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,  1046,
   nil,    30,  7057,   nil,    87,   nil,  7197,  7337,   nil,   nil,
  7477,  7617,   268,   nil, 24263,   nil,   nil,   nil,   nil,   nil,
   334,   nil,   nil,   nil,   nil,   nil,   nil,   270,   276,   288,
   313, 24396,   nil,   nil,   nil,   nil,   nil,   nil,     0,   nil,
   nil,   138,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,  7757,   nil,   nil,   nil,   nil,  7897,
  8037,  8177,  8317,  8457,   342,   nil,   603,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   356,   nil,  1710,
  8597,  8737,  8877, 24958, 25026,   nil,   nil,  9017,  9157,  9297,
  9437,  9577,  9717,   nil,   nil,   625,   149,   218,   432,   245,
   349,   408,   nil,  9857,  1851,   407,  9997, 10137, 10277, 10417,
 10557, 10697, 10837, 10977, 11117, 11257, 11397, 11537, 11677, 11817,
 11957, 12097, 12237, 12377, 12517, 12657, 12797, 12937, 13077, 13217,
 13357, 13497,   nil,   nil, 25094,   nil,   nil,   412, 13637,   nil,
   421,   nil,   nil,   nil, 13777,   nil,   nil, 13917,   nil,  2133,
   nil,   384,   388,   nil, 14057,   435, 14197,   nil, 14337,   nil,
   399, 14477,   nil,   nil,   668,   nil,  1141, 14617,   398,  1992,
   428,   467,   457, 14757,  2133,   630,   712,   735,   546,   763,
   nil,   526,   496,   138,   nil,   nil,   nil,   544,   390,   515,
 14897,   nil,   525,   593,   767,   nil,   621,   nil, 15037,  2274,
   nil, 15177,   599,   nil,   426,   443,   601, 15317,   nil,   nil,
   622,   781,   122,   130, 15457, 15597,   685,   690,   587,     1,
    66,   768,   684,    98,   724,   nil,   nil, 15737,   nil, 15877,
   282,   465,   528,   572,   602,   624,   629,   662,   666,   nil,
   710,   nil,   nil,   nil,   nil,   nil,   334,   nil,   338,   nil,
   653,   nil,   631,   518,   nil,   635,   560,   nil,   637,   136,
   nil,   647,   192,   nil,   570,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,  2415, 24529,   nil,
   nil,   nil,   nil,   659,   nil,   nil,   647, 16017,   649,   nil,
   nil,  1710,   672,   nil,   nil,   671,   701,   663,   769,  1178,
   nil,   nil,   nil,   270,   395,   744,   nil,   nil,  1303,  1435,
   nil,  2274,   nil,   714,   nil,   nil,  1569,   nil,   nil,   nil,
   nil,   284,   nil, 25162, 25230, 16157,   281, 16297, 16437, 16577,
  3966,  4107,  1234,  1286,   810,   818,   821,   825,  5657,  5797,
  4413,  4248,  1251,  1385,  4389,  4530,  4671,  4812,  4953,  5094,
  5235,  1133,  1221,  5376,  5517,  2415,    85, 24907,   nil,   nil,
   nil,   nil,   nil,   nil,   281,   283,   768,   770,   nil,   nil,
 16717,   nil,   nil, 16857,   nil, 16997,   nil,   393,   nil, 17137,
   nil,   nil, 17277,  1385,   786,   786,   nil,   nil,   790, 17417,
   798, 17557, 25298, 25366,   860,   836,   nil, 17697,   803,   nil,
 17837, 17977, 25434, 25502,  2556, 18117,   929,   933,   814,   nil,
   nil, 18257,   nil,   nil, 18397,   nil,   831,   nil,   509,   863,
   127,   726,   nil,   824,   826,   nil,   838,   840,   845,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   832,  1046,   nil,
   nil, 18537,   nil,   nil,   nil,   928,   nil,   nil,   nil,   930,
   nil,   nil,   932,  2556,   973,   nil,  2697,   131,   198,   971,
   993,   nil, 18677, 25570, 25638,   146,   nil,   334,   398,   117,
   nil,   865,   nil,    62, 18817,   nil,  1109,   nil, 18957,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   452,   nil,   nil,   515,   nil,   nil,   nil,   877,   nil,   nil,
   880,   nil,   900,   nil, 24662,   nil,   888, 19097, 19237,   802,
   924, 19377, 19517, 19657, 19797,   924,   nil,   nil,   nil, 19937,
 20077,   926,   nil, 20217, 20357,   nil,   283,   285,   520,   658,
   913,  1851,   915,   nil,   nil,  1366,   nil,   nil,  1018,   142,
   372,   nil,   nil,   nil,   nil,   920,   nil,   963, 20497,   nil,
   nil, 20637,   nil,  1398,   301, 20777,   927,   nil,   931,    32,
    57,   971,   129,   888,   975,   937, 20917,  2697,  1000,   289,
  1055, 21057,   nil,   945,   702,   nil,   nil,   nil,  2838,  2979,
   951,   484,   nil,   nil,   782, 24871,   nil, 25700,   nil, 24911,
   nil, 21197,   nil,  1176,   nil,   949,   513,   954,   nil,   nil,
   nil,   nil,   927,   nil,  1067,   nil,   nil,   nil,   nil,  1083,
   nil, 21337,   967,   166,   168,   204,   276, 21477,   nil,   871,
   nil, 25739, 25807, 21617,   nil,   nil,   nil,   688,   935,  3120,
  3261, 25869,   716, 24795,   291,  1037,  3402,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   969, 21757,  2838, 21897,   nil,   973,
   nil,  2979,   nil,  3120,   nil,   nil,  3261,   nil,  3402,   nil,
  3543, 22037, 22177, 22317, 22457,   297, 22597,   976,   980,   nil,
   982,   983,   998,   nil,  1023,  1010,  1007,   995, 22737,   nil,
   nil,  3543,   nil,   nil,   nil,  3684,  3825,   nil,   nil,   nil,
  1017,    58,   nil,   nil,  1140,   nil,  3966,  1027,  1070,   nil,
   nil,   nil,   nil,  1048,  1179,  1067,  1066,   nil,   nil,   nil,
  1067,  1068,   nil,  1072,  1073,   nil,  1077,   nil,   nil,  1085,
  1243,  1083,   863,   nil,  1204,   nil, 22877,  1207,  4107,  4248,
   nil,   159,   206,   205,   459,   890,   nil,  1097,  4389, 23017,
   nil,   718,  1225,  1226,  1114,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,  1128,  1113,   nil,  3684, 23157, 23297,  3825,
   509,   nil,   nil, 25876,   nil,   nil, 25893,   nil, 25730,   nil,
   nil,  1135,  1428, 23437,   892,  1204,  1255,  4530,  1154,  1261,
   nil,  4671,   nil,   nil,   161, 23577,   nil,   nil,   nil,   nil,
   nil, 25930,   nil, 25945,   nil, 25969,   nil, 25984,   nil,   nil,
   nil,   nil,   526,   987,  1142,   nil,   170,   nil,  1267,  1269,
 23717,  4812,   nil,   nil,  1271,   728,   nil,   nil,   nil,   nil,
 25999,   nil,  1163,   nil,   nil,  1164,  1166,  1170,  1173,   nil,
  1177,   nil,   714,   nil,   nil,   nil,   985, 26040,   nil,   nil,
  1195,   nil,   nil,   nil,  4953,   173,   177,   990,  1258,   188,
   nil,  1185,  1193,  1194,  1207,  1218,  1053,  1219,  1171,  5094,
   nil,   nil,   nil,   224,  5235,   nil,   nil,  5376,  5517,   nil,
 26102,   nil, 26109,   nil, 26126,   nil, 26163,   nil,   nil,   nil,
  1444,  1259,  1261,   nil,  1351, 23857, 26202, 26270,   191, 26332,
   nil,   nil,   nil,   nil,  1310,  1230,  1023,   nil,   nil,   nil,
  1357,  1359,  1360,  1255,  1263,  1264,  1266,   nil,   nil,  1270,
   192,   256,   262,   290,  1272,  1274,   nil,   nil,   nil,   nil,
 26339,   nil,   nil,   nil,   nil,   260,   nil,  1276,   nil ]

racc_action_default = [
    -1,  -628,  -627,  -628,    -2,  -614,    -4,    -5,  -628,    -8,
    -9,  -628,  -628,  -628,   -29,  -628,  -628,  -628,  -280,  -628,
   -40,   -43,  -616,  -628,   -48,   -50,   -51,   -52,   -57,  -257,
  -257,  -257,  -294,  -333,  -334,   -69,  -627,   -73,   -81,   -83,
  -628,  -516,  -517,  -628,  -628,  -628,  -628,  -628,  -616,  -238,
  -271,  -272,  -273,  -274,  -275,  -276,  -277,  -278,  -279,  -602,
  -282,  -285,  -627,  -292,  -302,  -405,  -628,  -628,  -307,  -310,
  -614,  -628,  -318,  -325,  -628,  -335,  -336,  -447,  -448,  -449,
  -450,  -451,  -452,  -627,  -455,  -627,  -627,  -627,  -627,  -627,
  -627,  -627,  -492,  -498,  -500,  -501,  -502,  -503,  -600,  -505,
  -506,  -601,  -508,  -509,  -510,  -511,  -512,  -513,  -514,  -515,
  -520,  -521,  1059,    -3,  -615,  -623,  -624,  -625,    -7,  -628,
  -628,  -628,  -628,  -628,  -628,   -17,  -628,  -112,  -113,  -114,
  -115,  -116,  -117,  -118,  -119,  -120,  -124,  -125,  -126,  -127,
  -128,  -129,  -130,  -131,  -132,  -133,  -134,  -135,  -136,  -137,
  -138,  -139,  -140,  -141,  -142,  -143,  -144,  -145,  -146,  -147,
  -148,  -149,  -150,  -151,  -152,  -153,  -154,  -155,  -156,  -157,
  -158,  -159,  -160,  -161,  -162,  -163,  -164,  -165,  -166,  -167,
  -168,  -169,  -170,  -171,  -172,  -173,  -174,  -175,  -176,  -177,
  -178,  -179,  -180,  -181,  -182,  -183,  -184,  -185,  -186,  -187,
  -188,  -189,  -190,  -191,  -192,  -193,  -194,   -22,  -121,  -627,
  -628,  -628,  -627,  -628,  -628,  -612,  -613,  -628,  -628,  -628,
  -628,  -628,  -616,  -617,   -47,  -628,  -516,  -517,  -628,  -280,
  -628,  -628,  -230,  -628,  -627,  -628,  -628,  -628,  -628,  -628,
  -628,  -628,  -628,  -628,  -628,  -628,  -628,  -628,  -628,  -628,
  -628,  -628,  -628,  -628,  -628,  -628,  -628,  -628,  -628,  -628,
  -628,  -628,  -411,  -414,  -628,  -610,  -611,   -58,  -628,  -301,
  -628,  -428,  -431,   -64,  -627,  -425,   -65,  -616,   -66,  -239,
  -252,  -627,  -627,  -256,  -628,  -262,  -628,  -627,  -492,  -593,
  -616,  -628,   -67,   -68,  -614,   -13,   -14,  -628,   -71,  -627,
  -616,  -628,   -74,   -77,  -627,   -89,   -90,  -628,  -628,   -97,
  -294,  -297,  -616,  -418,  -333,  -334,  -337,  -426,  -628,   -79,
  -628,   -85,  -290,  -499,  -628,  -215,  -216,  -231,  -628,  -627,
  -284,  -628,  -628,  -240,  -620,  -620,  -628,  -627,  -303,  -304,
  -548,   -49,  -628,  -628,  -628,  -628,  -614,  -628,  -615,  -516,
  -517,  -628,  -628,  -280,  -628,  -358,  -359,  -628,  -321,  -628,
  -112,  -113,  -154,  -155,  -156,  -172,  -177,  -184,  -187,  -328,
  -628,  -516,  -517,  -588,  -589,  -453,  -628,  -476,  -628,  -478,
  -628,  -480,  -628,  -628,  -460,  -628,  -628,  -466,  -628,  -628,
  -472,  -628,  -628,  -474,  -628,  -491,  -493,  -494,  -495,  -496,
    -6,  -626,   -23,   -24,   -25,   -26,   -27,  -627,  -628,   -19,
   -20,   -21,  -122,  -628,   -30,   -39,  -267,  -628,  -628,  -266,
   -31,  -197,  -616,  -247,  -248,  -627,  -627,  -603,  -604,  -257,
  -423,  -605,  -606,  -604,  -603,  -257,  -422,  -424,  -605,  -606,
   -37,  -205,   -38,  -628,   -41,   -42,  -195,  -262,   -44,   -45,
   -46,  -616,  -300,  -628,  -628,  -627,  -290,  -628,  -628,  -628,
  -206,  -207,  -208,  -209,  -210,  -211,  -212,  -213,  -217,  -218,
  -219,  -220,  -221,  -222,  -223,  -224,  -225,  -226,  -227,  -228,
  -229,  -232,  -233,  -234,  -235,  -616,  -627,  -257,  -603,  -604,
   -54,   -59,  -258,  -419,  -627,  -627,  -616,  -616,  -296,  -253,
  -628,  -261,  -254,  -628,  -259,  -628,  -263,  -628,  -598,  -628,
  -599,   -12,  -615,   -16,  -616,   -70,  -288,   -86,   -75,  -628,
  -616,  -627,  -628,  -628,   -96,  -628,  -499,  -628,   -82,   -87,
  -628,  -628,  -628,  -628,  -236,  -628,  -439,  -628,  -286,  -618,
  -241,  -622,  -621,  -243,  -622,  -291,  -628,  -591,  -620,  -628,
  -628,  -548,  -408,  -587,  -587,  -531,  -533,  -533,  -533,  -547,
  -549,  -550,  -551,  -552,  -553,  -554,  -555,  -556,  -628,  -558,
  -560,  -562,  -567,  -569,  -570,  -572,  -577,  -579,  -580,  -582,
  -583,  -584,  -628,  -627,  -349,  -350,  -627,  -628,  -628,  -628,
  -628,  -434,  -627,  -628,  -628,  -290,  -315,  -107,  -108,  -628,
  -110,  -628,  -280,  -628,  -628,  -326,  -548,  -330,  -628,  -454,
  -477,  -482,  -483,  -485,  -456,  -479,  -457,  -481,  -458,  -459,
  -628,  -462,  -464,  -628,  -465,  -468,  -469,  -628,  -470,  -471,
  -628,  -497,  -628,   -18,  -628,   -28,  -270,  -628,  -628,  -427,
  -628,  -249,  -251,  -628,  -628,   -60,  -245,  -246,  -420,  -628,
  -628,   -62,  -421,  -628,  -628,  -299,  -603,  -604,  -603,  -604,
  -616,  -195,  -628,  -394,  -395,  -616,  -397,  -412,   -53,  -415,
  -627,  -429,  -432,  -244,  -295,  -627,  -260,  -264,  -628,  -594,
  -595,  -628,  -596,   -15,   -72,  -628,   -78,   -84,  -616,  -603,
  -604,  -627,  -607,   -95,  -628,   -80,  -628,  -204,  -214,  -616,
  -627,  -627,  -283,  -616,  -620,  -293,  -592,  -406,  -627,  -627,
  -616,  -628,  -529,  -530,  -628,  -628,  -540,  -628,  -543,  -628,
  -545,  -628,  -360,  -628,  -362,  -364,  -371,  -616,  -561,  -571,
  -581,  -585,  -627,  -351,  -627,  -308,  -352,  -353,  -311,  -628,
  -314,  -628,  -616,  -603,  -604,  -607,  -289,  -628,  -107,  -108,
  -109,  -628,  -628,  -627,  -319,  -522,  -523,  -628,  -322,  -627,
  -627,  -548,  -628,  -628,  -616,  -628,  -627,  -461,  -463,  -467,
  -473,  -475,   -10,  -123,  -268,  -628,  -198,  -628,  -619,  -627,
   -33,  -200,   -34,  -201,   -61,   -35,  -203,   -36,  -202,   -63,
  -196,  -628,  -628,  -628,  -628,  -427,  -628,  -587,  -587,  -376,
  -627,  -627,  -627,  -393,  -628,  -616,  -399,  -556,  -564,  -565,
  -575,  -627,  -417,  -416,   -55,  -627,  -627,  -255,  -265,  -597,
   -76,  -427,   -88,  -298,  -627,  -356,  -627,  -440,  -627,  -441,
  -442,  -287,  -242,  -628,  -628,  -616,  -587,  -568,  -586,  -532,
  -533,  -533,  -559,  -533,  -533,  -578,  -533,  -556,  -573,  -616,
  -628,  -369,  -628,  -557,  -628,  -354,  -628,  -628,  -627,  -627,
  -313,  -628,  -427,  -628,  -107,  -108,  -111,  -616,  -627,  -628,
  -525,  -628,  -628,  -628,  -616,  -527,  -331,  -590,  -484,  -487,
  -488,  -489,  -490,  -628,  -269,   -32,  -199,  -250,  -628,  -237,
  -628,  -374,  -375,  -384,  -378,  -386,  -628,  -389,  -628,  -391,
  -396,  -628,  -628,  -628,  -563,  -628,  -628,  -627,  -628,  -628,
   -11,  -627,  -446,  -357,  -628,  -628,  -444,  -409,  -410,  -407,
  -528,  -628,  -536,  -628,  -538,  -628,  -541,  -628,  -544,  -546,
  -361,  -363,  -367,  -628,  -372,  -305,  -628,  -306,  -628,  -628,
  -628,  -627,  -316,  -427,  -628,  -628,  -323,  -327,  -329,  -526,
  -548,  -486,  -587,  -566,  -377,  -627,  -627,  -627,  -627,  -576,
  -627,  -398,  -616,  -401,  -403,  -404,  -574,  -628,  -290,  -413,
  -628,  -430,  -433,  -445,  -627,  -516,  -517,  -628,  -628,  -280,
  -443,  -533,  -533,  -533,  -533,  -365,  -628,  -370,  -628,  -627,
  -309,  -312,  -264,  -627,  -627,  -320,  -524,  -627,  -627,  -373,
  -628,  -381,  -628,  -383,  -628,  -387,  -628,  -390,  -392,  -400,
  -628,  -289,  -607,   -56,  -439,  -627,  -628,  -628,  -290,  -628,
  -534,  -537,  -539,  -542,  -628,  -368,  -627,  -435,  -436,  -437,
  -628,  -628,  -628,  -627,  -627,  -627,  -627,  -402,  -438,  -616,
  -603,  -604,  -607,  -289,  -533,  -366,  -355,  -317,  -324,  -332,
  -628,  -379,  -382,  -385,  -388,  -427,  -535,  -627,  -380 ]

clist = [
'6,316,316,221,224,422,213,369,302,263,280,280,280,537,502,590,125,208',
'281,281,281,445,342,343,396,419,346,338,117,328,700,133,133,442,552',
'316,639,4,559,130,130,264,330,676,583,586,676,491,334,429,435,760,275',
'341,341,135,135,341,9,323,333,298,712,713,9,113,842,496,267,273,276',
'854,114,300,727,402,403,404,405,824,679,377,801,379,381,384,387,390',
'393,379,735,738,804,117,567,540,543,319,750,376,487,959,130,931,845',
'963,341,341,341,341,282,282,282,857,716,718,720,965,118,130,378,679',
'620,528,1,623,394,603,2,605,347,278,292,293,124,910,615,835,617,934',
'335,621,667,207,621,356,415,408,670,907,671,672,615,634,336,669,373',
'546,502,339,354,754,370,329,331,802,703,337,344,858,9,345,859,747,994',
'357,868,604,871,406,997,359,759,606,676,676,763,950,803,805,280,414',
'420,962,550,707,418,340,440,444,486,811,494,452,418,959,448,449,450',
'451,423,815,495,1037,453,841,816,843,1027,679,987,741,828,914,400,965',
'375,380,383,849,17,386,901,389,392,430,17,878,765,722,766,931,439,395',
'842,710,280,869,660,559,866,225,280,840,281,280,837,739,498,953,225',
'225,225,281,17,307,307,316,608,,,509,423,1025,795,,,,842,501,501,515',
',,316,377,,,,429,435,529,493,525,225,225,522,,225,351,587,588,821,507',
'559,567,891,892,845,706,955,1045,,532,688,,,117,538,,,316,686,316,298',
',814,,,298,695,341,341,526,,547,514,,,275,593,520,17,,,920,282,225,225',
'225,225,17,,513,511,282,862,842,691,,567,512,518,,,1046,942,492,691',
'117,,,1028,,,,497,,768,,,768,,,607,742,,,,,,,,956,722,998,957,851,922',
'924,,926,928,640,929,6,589,817,,895,897,899,,633,,548,,,,807,,981,,501',
'501,784,,646,133,691,676,789,655,280,,,130,17,225,225,225,,632,872,873',
'225,225,225,225,225,225,647,135,423,,874,445,652,,559,,999,17,9,679',
'832,662,,645,567,,567,,,651,430,,673,674,,,943,439,316,663,646,,,820',
',529,316,663,663,,684,225,,529,280,1033,687,225,,,225,,,1038,647,,817',
',,,567,829,,,423,,722,699,722,,17,668,17,,,,307,17,,,,,,,1020,1021,1022',
'1023,16,430,,867,,307,16,,439,944,,430,301,,17,,225,,439,798,941,1001',
'1003,1005,1007,683,1008,280,,225,225,,,,16,675,,,,,,,601,,601,691,,423',
'758,,,,764,,,,,,,1056,985,722,,,,836,,736,736,,,,430,974,,,704,,,439',
',780,782,755,,,,785,787,813,,444,17,,,989,773,,640,1051,1052,1053,1054',
'806,807,559,316,807,,812,1055,133,16,529,722,,722,316,1029,130,,16,799',
'1058,822,663,640,,,,501,,567,,,135,,823,1031,1032,225,831,,,418,,646',
',806,,,,722,876,,825,830,,,,863,567,,,,853,,,838,,647,838,,652,,,779',
',,,640,,,,861,413,,825,280,825,,341,,,,,,17,,,,,877,,307,,225,16,423',
',301,807,307,,,885,,,,,225,,,,,,,,,316,,430,16,,501,,439,870,,,,,875',
'806,952,,,798,130,,798,,798,,,894,894,894,,,,,,,,1039,,,17,936,,17,',
'919,,301,,225,,912,301,,945,916,,,,930,,225,,,,225,,16,,16,,,341,,16',
',,640,,,,691,29,,949,341,,,29,,,800,,,,,316,,,16,225,225,,29,,,225,225',
'316,,225,,29,29,29,736,29,,,838,,,799,946,,799,798,799,798,,798,,798',
',808,,,,,,,,307,844,,846,29,29,,,29,,,307,,,,,,,,,,,,17,17,,,,,,1009',
',,,798,16,,,,,894,894,894,894,,894,,,,,,,29,1016,,996,,29,29,29,29,29',
'225,,,,,,225,,,,,,17,17,,,825,,280,17,439,,,,,799,,799,,799,225,799',
',,,,,,423,,,,,,,640,,,,825,,,,,,,894,894,894,894,,904,,430,17,,18,,17',
'17,439,,18,,,799,,,16,17,894,,,,,29,29,29,29,,,,,29,29,29,29,29,29,',
'18,309,309,,,,,,,225,29,17,17,,,,,,958,,960,17,225,,,,,732,,,734,,,',
',353,,,,,,,19,982,29,983,,984,19,16,29,,16,29,,808,966,,808,,17,808',
',808,17,,,,977,,,,,29,,29,19,,18,,29,,,,,,,18,,,,,,,17,,,,,,,,,,,29',
',29,,,,355,,,,,,,,,29,29,1034,,1035,,1036,17,,,,,,,,,,,,,,1044,17,,',
',,17,,,17,17,833,834,19,,,,,,,,,19,,808,,808,225,808,,808,1057,18,16',
'16,,,,,,,,29,,,,,,,,,,,,,,,18,,,,,,,,,,,,883,,,,,808,,,,,,,,,,16,16',
',,,,29,16,,,,,,,,,,,,,,,,,19,,,,,,906,,,443,908,909,18,,18,,,,309,18',
',913,,,,19,,,16,,,,16,16,,309,,,,29,,,,16,18,,,,29,,,,,938,939,,,,,',
',,29,,,,,,,,,,602,,602,16,16,,,,,,,,,16,,,19,,19,,,,,19,,,,,,,970,,',
',973,,,,29,,,29,,,,,,29,19,,18,,16,,,,16,,,29,,,,29,993,,41,,,,,,41',
',,,,,,,,,,,,,16,,42,,,,,,42,,,1014,29,29,41,305,305,,29,29,,,29,,,,1026',
',,,,1030,,16,,,42,306,306,,19,,,,,,,,16,349,,,371,16,,,16,16,,,,,,,',
',,,,18,,350,,,372,,309,29,29,,,,,,309,,,,,,,,41,,,,,,,,,41,,,,416,,',
',,,,,447,42,,29,,,,,,29,42,,,,,29,29,,,,,,29,,,,,18,,,18,,19,29,,,,',
',,,,,,,,,,,,,,,,,,,,,,,,,,,,504,29,506,,508,29,29,510,41,,,,,,,,29,',
',,,,,,,,,,,,42,,,41,,,,19,,,19,,,,,,29,,29,29,,,,549,,42,,,29,29,,,',
'309,,,,,,,,,,,309,,,,,,,,,,,,18,18,,,,,,,,,41,29,41,,,29,305,41,,,,443',
',,,,,,,,,,42,305,42,,,,306,42,,,41,,,29,,636,,,,18,18,,,306,,882,18',
',,,,,42,,,,,,371,,371,,,,19,19,29,,,,,,,,,,,,,,372,29,372,,,,29,,602',
'29,29,18,,,,18,18,,,,,,,,,,18,29,41,,,,,,,19,19,,677,,,549,19,680,,',
',682,,,42,,,,,,,,18,18,,,,,,,,,18,,,,,,,,,,,677,,,549,,,,,19,,,,19,19',
',,,,,,,,,19,602,,,,18,,728,,18,,,,979,,,,,,,,,,,,,,,,,,41,19,19,,,,',
'305,18,,,19,,,,305,,,,,,,42,,,,,,,306,,,,,,,,306,,,,18,774,,,,677,549',
',,19,,,,19,,18,,980,,,18,,,18,18,,,,,,41,,,41,,,,,,,,,818,19,,819,,',
',,,,42,,,42,,,,,,,,,,827,,,,,,,,,,,19,,,,,,,,,848,,,,,,19,,,,,19,,,19',
'19,,,,,447,,,,,,,,,,,,,,,,,,,,,,,,,,,305,,,,,,,884,,,,305,,,,,,,,,,',
'306,41,41,,,,,,,,,306,,,,,,,,,,,,42,42,,,,,,,,,,,,,,,,,,,,,,,,,,,,41',
'41,,,,,,41,,,,,,,,,,,,,,,42,42,,,,,,42,,,,,,,,,,,,,,,,549,,,,371,,,41',
'232,,,41,41,,,,,279,279,279,,,41,,,,372,,,42,325,326,327,42,42,,,,,',
',,,,42,,,279,,,,,,992,41,41,,,,,,,,,41,,,,,,,,,,,,42,42,,,,,,,,,42,',
',,,,,,,,,,,371,,,,41,,,,41,,,,975,,,,,,,,,,372,,,,42,,,,42,,,,976,,',
',41,,,,,,,,,,,,,,,,,,,,,,42,,,,,,,,,,,41,,,,,,,,,,,,,,,41,,,,,41,,42',
'41,41,279,421,279,,,,,441,446,,,,42,,,,,42,,,42,42,,232,,,460,461,462',
'463,464,465,466,467,468,469,470,471,472,473,474,475,476,477,478,479',
'480,481,482,483,484,485,,,,,,,279,,,,,,279,,,279,,,,,,,279,,279,,279',
',,279,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,534,,,,,,,,,279,,,,,,,,,,',
',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,',
',279,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,279,,441,661,421,,,,,,,,,',
',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,279,,,279,,279,,,,279,,,,,,,,,,,,279',
',,,,,,,,697,698,,,,,,,,,,279,,,279,,,,,,,,,,,,,,,,,,,,,,,,,,,279,,,',
',,,,,,,,,,,,,,,,,279,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,279',
'776,,,279,279,781,783,,,,,786,788,,,661,790,,,,,,,,,,,,,,,,,,,,,,,,279',
',,279,,,,,,,,,,,,,,,,,,,,279,,,,,,,,,,,,,,,,,,,,279,,,,,,,,,,,,,,,,',
',,,279,,,,,,,,,,,,279,,,,,,,,,,,,,,,,,,,,,,279,,886,,,,,,,,,,,,,,781',
'783,788,786,,889,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,',
',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,279,886,,,,,,,,,,,,,,,,,,,,,',
',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,279,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,',
',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,279' ]
        racc_goto_table = arr = ::Array.new(3265, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

clist = [
'6,68,68,34,22,25,27,60,53,155,36,36,36,10,76,95,17,17,71,71,71,20,19',
'19,60,30,19,89,98,34,13,64,64,30,154,68,26,2,185,61,61,39,51,77,92,92',
'77,42,71,40,40,99,74,32,32,65,65,32,9,67,6,49,139,139,9,5,190,25,41',
'41,41,93,8,50,134,19,19,19,19,14,200,6,144,6,6,6,6,6,6,6,94,94,147,98',
'189,72,72,54,58,171,40,196,61,132,195,149,32,32,32,32,73,73,73,14,187',
'187,187,150,7,61,172,200,175,55,1,175,172,59,3,59,5,48,48,48,11,15,176',
'147,176,135,73,176,43,18,176,21,31,33,45,46,43,43,176,66,70,75,87,88',
'76,91,96,97,100,101,102,145,103,104,105,106,9,107,108,109,110,111,112',
'113,114,9,115,116,117,118,77,77,119,120,136,142,36,22,22,148,151,152',
'71,153,22,22,156,157,160,51,71,196,32,32,32,32,6,161,162,149,27,145',
'163,145,164,200,135,165,166,167,7,150,170,173,174,134,24,177,147,178',
'179,74,24,180,181,133,182,132,61,183,190,154,36,184,25,185,58,24,36',
'188,71,36,192,95,51,193,24,24,24,71,24,24,24,68,199,,,34,6,135,26,,',
',190,6,6,51,,,68,6,,,,40,40,53,74,34,24,24,27,,24,24,19,19,26,171,185',
'189,139,139,195,72,144,135,,27,25,,,98,32,,,68,55,68,49,,43,,,49,55',
'32,32,67,,6,50,,,74,27,50,24,,,139,73,24,24,24,24,24,,9,5,73,26,190',
'40,,189,8,54,,,93,94,48,40,98,,,14,,,,48,,176,,,176,,,39,25,,,,,,,,145',
'133,99,145,133,187,187,,187,187,34,187,6,5,76,,141,141,141,,17,,73,',
',,189,,145,,6,6,42,,6,64,40,77,42,51,36,,,61,24,24,24,24,,2,10,10,24',
'24,24,24,24,24,74,65,6,,154,20,74,,185,,139,24,9,200,72,34,,41,189,',
'189,,,41,74,,51,51,,,26,61,68,6,6,,,55,,53,68,6,6,,51,24,,53,36,145',
'51,24,,,24,,,13,74,,76,,,,189,30,,,6,,133,32,133,,24,41,24,,,,24,24',
',,,,,,187,187,187,187,23,74,,25,,24,23,,61,10,,74,12,,24,,24,,61,138',
'92,141,141,141,141,9,141,36,,24,24,,,,23,73,,,,,,,24,,24,40,,6,32,,',
',32,,,,,,,187,133,133,,,,138,,98,98,,,,74,92,,,73,,,61,,22,22,98,,,',
'22,22,89,,22,24,,,92,17,,34,141,141,141,141,34,189,185,68,189,,155,26',
'64,23,53,133,,133,68,95,61,,23,140,141,53,6,34,,,,6,,189,,,65,,51,10',
'10,24,51,,,71,,6,,34,,,,133,60,,6,6,,,,19,189,,,,51,,,140,,74,140,,74',
',,73,,,,34,,,,71,12,,6,36,6,,32,,,,,,24,,,,,51,,24,,24,23,6,,12,189',
'24,,,22,,,,,24,,,,,,,,,68,,74,23,,6,,61,98,,,,,98,34,138,,,138,61,,138',
',138,,,6,6,6,,,,,,,,25,,,24,19,,24,,51,,12,,24,,6,12,,19,6,,,,51,,24',
',,,24,,23,,23,,,32,,23,,,34,,,,40,44,,51,32,,,44,,,143,,,,,68,,,23,24',
'24,,44,,,24,24,68,,24,,44,44,44,98,44,,,140,,,140,98,,140,138,140,138',
',138,,138,,191,,,,,,,,24,143,,143,44,44,,,44,,,24,,,,,,,,,,,,24,24,',
',,,,34,,,,138,23,,,,,6,6,6,6,,6,,,,,,,44,27,,98,,44,44,44,44,44,24,',
',,,,24,,,,,,24,24,,,6,,36,24,61,,,,,140,,140,,140,24,140,,,,,,,6,,,',
',,,34,,,,6,,,,,,,6,6,6,6,,24,,74,24,,28,,24,24,61,,28,,,140,,,23,24',
'6,,,,,44,44,44,44,,,,,44,44,44,44,44,44,,28,28,28,,,,,,,24,44,24,24',
',,,,,143,,143,24,24,,,,,12,,,12,,,,,28,,,,,,,29,143,44,143,,143,29,23',
'44,,23,44,,191,24,,191,,24,191,,191,24,,,,24,,,,,44,,44,29,,28,,44,',
',,,,,28,,,,,,,24,,,,,,,,,,,44,,44,,,,29,,,,,,,,,44,44,143,,143,,143',
'24,,,,,,,,,,,,,,143,24,,,,,24,,,24,24,12,12,29,,,,,,,,,29,,191,,191',
'24,191,,191,143,28,23,23,,,,,,,,44,,,,,,,,,,,,,,,28,,,,,,,,,,,,12,,',
',,191,,,,,,,,,,23,23,,,,,44,23,,,,,,,,,,,,,,,,,29,,,,,,12,,,29,12,12',
'28,,28,,,,28,28,,12,,,,29,,,23,,,,23,23,,28,,,,44,,,,23,28,,,,44,,,',
',12,12,,,,,,,,44,,,,,,,,,,28,,28,23,23,,,,,,,,,23,,,29,,29,,,,,29,,',
',,,,12,,,,12,,,,44,,,44,,,,,,44,29,,28,,23,,,,23,,,44,,,,44,12,,56,',
',,,,56,,,,,,,,,,,,,,23,,57,,,,,,57,,,12,44,44,56,56,56,,44,44,,,44,',
',,12,,,,,12,,23,,,57,57,57,,29,,,,,,,,23,56,,,56,23,,,23,23,,,,,,,,',
',,,28,,57,,,57,,28,44,44,,,,,,28,,,,,,,,56,,,,,,,,,56,,,,69,,,,,,,,69',
'57,,44,,,,,,44,57,,,,,44,44,,,,,,44,,,,,28,,,28,,29,44,,,,,,,,,,,,,',
',,,,,,,,,,,,,,,,,,,69,44,69,,69,44,44,69,56,,,,,,,,44,,,,,,,,,,,,,,57',
',,56,,,,29,,,29,,,,,,44,,44,44,,,,69,,57,,,44,44,,,,28,,,,,,,,,,,28',
',,,,,,,,,,,28,28,,,,,,,,,56,44,56,,,44,56,56,,,,29,,,,,,,,,,,57,56,57',
',,,57,57,,,56,,,44,,69,,,,28,28,,,57,,28,28,,,,,,57,,,,,,56,,56,,,,29',
'29,44,,,,,,,,,,,,,,57,44,57,,,,44,,28,44,44,28,,,,28,28,,,,,,,,,,28',
'44,56,,,,,,,29,29,,69,,,69,29,69,,,,69,,,57,,,,,,,,28,28,,,,,,,,,28',
',,,,,,,,,,69,,,69,,,,,29,,,,29,29,,,,,,,,,,29,28,,,,28,,69,,28,,,,28',
',,,,,,,,,,,,,,,,,56,29,29,,,,,56,28,,,29,,,,56,,,,,,,57,,,,,,,57,,,',
',,,,57,,,,28,69,,,,69,69,,,29,,,,29,,28,,29,,,28,,,28,28,,,,,,56,,,56',
',,,,,,,,69,29,,69,,,,,,,57,,,57,,,,,,,,,,69,,,,,,,,,,,29,,,,,,,,,69',
',,,,,29,,,,,29,,,29,29,,,,,69,,,,,,,,,,,,,,,,,,,,,,,,,,,56,,,,,,,69',
',,,56,,,,,,,,,,,57,56,56,,,,,,,,,57,,,,,,,,,,,,57,57,,,,,,,,,,,,,,,',
',,,,,,,,,,,,56,56,,,,,,56,,,,,,,,,,,,,,,57,57,,,,,,57,,,,,,,,,,,,,,',
',69,,,,56,,,56,35,,,56,56,,,,,35,35,35,,,56,,,,57,,,57,35,35,35,57,57',
',,,,,,,,,57,,,35,,,,,,69,56,56,,,,,,,,,56,,,,,,,,,,,,57,57,,,,,,,,,57',
',,,,,,,,,,,,56,,,,56,,,,56,,,,56,,,,,,,,,,57,,,,57,,,,57,,,,57,,,,56',
',,,,,,,,,,,,,,,,,,,,,57,,,,,,,,,,,56,,,,,,,,,,,,,,,56,,,,,56,,57,56',
'56,35,35,35,,,,,35,35,,,,57,,,,,57,,,57,57,,35,,,35,35,35,35,35,35,35',
'35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,,,,,,,35,,',
',,,35,,,35,,,,,,,35,,35,,35,,,35,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,',
',35,,,,,,,,,35,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,',
',,,,,,,,,,,,,,,,,,,,,,,,,,35,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,35',
',35,35,35,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,35,,,35,,35,,,,35',
',,,,,,,,,,,35,,,,,,,,,35,35,,,,,,,,,,35,,,35,,,,,,,,,,,,,,,,,,,,,,,',
',,,35,,,,,,,,,,,,,,,,,,,,,35,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,',
',,,,,35,35,,,35,35,35,35,,,,,35,35,,,35,35,,,,,,,,,,,,,,,,,,,,,,,,35',
',,35,,,,,,,,,,,,,,,,,,,,35,,,,,,,,,,,,,,,,,,,,35,,,,,,,,,,,,,,,,,,,',
'35,,,,,,,,,,,,35,,,,,,,,,,,,,,,,,,,,,,35,,35,,,,,,,,,,,,,,35,35,35,35',
',35,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,',
',,,,,,,,,,,,,,,,,,,,,,,,,,35,35,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,',
',,,,,,,,,,,,,,,35,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,',
',,,,,,,,,,,,,,,,,,,,,,,,35' ]
        racc_goto_check = arr = ::Array.new(3265, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

racc_goto_pointer = [
   nil,   124,    35,   128,   nil,    60,    -2,   110,    67,    56,
  -316,   124,   519,  -506,  -621,  -689,   nil,     5,   131,   -44,
  -197,    74,   -19,   541,   228,  -207,  -386,   -11,  1039,  1115,
  -185,   -64,   -13,    22,   -19,  2249,   -22,   nil,   nil,    14,
  -164,    39,  -220,  -344,   851,  -342,  -665,   nil,    99,    25,
    37,   -19,   nil,   -29,    59,  -197,  1460,  1482,  -501,  -230,
   -67,    28,   nil,   nil,    20,    44,  -259,    15,   -36,  1377,
    92,   -14,  -239,    78,    22,  -332,  -268,  -457,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,    82,  -180,   -37,
   nil,    94,  -298,  -661,  -497,  -332,    89,  -442,    23,  -555,
    88,   103,   103,  -372,   104,   100,  -566,   102,  -566,  -423,
  -768,   103,  -578,  -181,  -580,  -766,   108,  -423,  -186,  -421,
  -689,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,  -747,  -329,  -494,  -713,  -477,   nil,  -103,  -491,
     0,  -391,  -476,   197,  -583,  -500,   nil,  -573,  -709,  -797,
  -785,  -146,  -355,   132,  -306,   -16,   -62,  -466,   nil,   nil,
   -69,  -460,   -60,  -456,  -775,  -370,  -479,  -605,   nil,   nil,
   146,    16,    35,   141,   141,  -261,  -242,   143,   144,   144,
  -528,  -374,  -373,   152,  -509,  -302,   nil,  -442,  -462,  -246,
  -649,   240,  -455,  -631,   nil,  -613,  -795,   nil,   nil,  -106,
  -423 ]

racc_goto_default = [
   nil,   nil,   nil,   nil,     5,   nil,   295,     7,   348,   296,
   nil,   nil,   536,   nil,   855,   nil,   294,   nil,   nil,   nil,
    14,    15,    21,   231,   324,   nil,   nil,   752,   229,   230,
   nil,   nil,    20,   nil,   332,    24,    25,    26,    27,   nil,
   694,   nil,   nil,   nil,   313,   nil,   nil,    28,   424,    35,
   nil,   nil,    37,    40,    39,   nil,   226,   227,   600,   nil,
   132,   432,   131,   134,    78,    79,   nil,    93,    49,   285,
   nil,   425,   nil,   426,   437,   648,   499,   283,   268,    50,
    51,    52,    53,    54,    55,    56,    57,    58,   nil,   269,
    64,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   584,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   724,   566,   nil,   725,   954,   797,   554,   nil,
   555,   nil,   nil,   556,   nil,   558,   664,   nil,   nil,   nil,
   564,   nil,   nil,   nil,   762,   nil,   nil,   nil,   436,   270,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    77,    80,
    82,   nil,   nil,   nil,   nil,   nil,   610,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   839,   553,   nil,   557,   847,
   569,   571,   572,   809,   575,   576,   810,   579,   582,   nil,
   289 ]

racc_reduce_table = [
  0, 0, :racc_error,
  0, 149, :_reduce_1,
  2, 147, :_reduce_2,
  2, 148, :_reduce_3,
  1, 150, :_reduce_none,
  1, 150, :_reduce_none,
  3, 150, :_reduce_6,
  2, 150, :_reduce_none,
  1, 153, :_reduce_8,
  0, 157, :_reduce_9,
  5, 153, :_reduce_10,
  4, 156, :_reduce_11,
  2, 158, :_reduce_12,
  1, 162, :_reduce_none,
  1, 162, :_reduce_none,
  3, 162, :_reduce_15,
  2, 162, :_reduce_16,
  0, 179, :_reduce_17,
  4, 155, :_reduce_18,
  3, 155, :_reduce_19,
  3, 155, :_reduce_20,
  3, 155, :_reduce_21,
  2, 155, :_reduce_22,
  3, 155, :_reduce_23,
  3, 155, :_reduce_24,
  3, 155, :_reduce_25,
  3, 155, :_reduce_26,
  3, 155, :_reduce_27,
  4, 155, :_reduce_28,
  1, 155, :_reduce_none,
  3, 155, :_reduce_30,
  3, 155, :_reduce_31,
  6, 155, :_reduce_32,
  5, 155, :_reduce_33,
  5, 155, :_reduce_34,
  5, 155, :_reduce_35,
  5, 155, :_reduce_36,
  3, 155, :_reduce_37,
  3, 155, :_reduce_38,
  3, 155, :_reduce_39,
  1, 155, :_reduce_none,
  3, 166, :_reduce_41,
  3, 166, :_reduce_42,
  1, 178, :_reduce_none,
  3, 178, :_reduce_44,
  3, 178, :_reduce_45,
  3, 178, :_reduce_46,
  2, 178, :_reduce_47,
  1, 178, :_reduce_none,
  1, 165, :_reduce_49,
  1, 168, :_reduce_none,
  1, 168, :_reduce_none,
  1, 183, :_reduce_none,
  4, 183, :_reduce_53,
  0, 191, :_reduce_54,
  0, 192, :_reduce_55,
  6, 188, :_reduce_56,
  1, 190, :_reduce_57,
  2, 182, :_reduce_58,
  3, 182, :_reduce_59,
  4, 182, :_reduce_60,
  5, 182, :_reduce_61,
  4, 182, :_reduce_62,
  5, 182, :_reduce_63,
  2, 182, :_reduce_64,
  2, 182, :_reduce_65,
  2, 182, :_reduce_66,
  2, 182, :_reduce_67,
  2, 182, :_reduce_68,
  1, 167, :_reduce_none,
  3, 167, :_reduce_70,
  1, 196, :_reduce_none,
  3, 196, :_reduce_72,
  1, 195, :_reduce_73,
  2, 195, :_reduce_74,
  3, 195, :_reduce_75,
  5, 195, :_reduce_76,
  2, 195, :_reduce_77,
  4, 195, :_reduce_78,
  2, 195, :_reduce_79,
  4, 195, :_reduce_80,
  1, 195, :_reduce_81,
  3, 195, :_reduce_82,
  1, 199, :_reduce_none,
  3, 199, :_reduce_84,
  2, 198, :_reduce_85,
  3, 198, :_reduce_86,
  1, 201, :_reduce_87,
  3, 201, :_reduce_88,
  1, 200, :_reduce_89,
  1, 200, :_reduce_90,
  4, 200, :_reduce_91,
  3, 200, :_reduce_92,
  3, 200, :_reduce_93,
  3, 200, :_reduce_94,
  3, 200, :_reduce_95,
  2, 200, :_reduce_96,
  1, 200, :_reduce_97,
  1, 175, :_reduce_98,
  1, 175, :_reduce_99,
  4, 175, :_reduce_100,
  3, 175, :_reduce_101,
  3, 175, :_reduce_102,
  3, 175, :_reduce_103,
  3, 175, :_reduce_104,
  2, 175, :_reduce_105,
  1, 175, :_reduce_106,
  1, 204, :_reduce_107,
  1, 204, :_reduce_none,
  2, 205, :_reduce_109,
  1, 205, :_reduce_110,
  3, 205, :_reduce_111,
  1, 206, :_reduce_none,
  1, 206, :_reduce_none,
  1, 206, :_reduce_none,
  1, 206, :_reduce_115,
  1, 206, :_reduce_116,
  1, 209, :_reduce_none,
  1, 209, :_reduce_none,
  1, 163, :_reduce_119,
  1, 163, :_reduce_none,
  1, 164, :_reduce_121,
  0, 212, :_reduce_122,
  4, 164, :_reduce_123,
  1, 207, :_reduce_none,
  1, 207, :_reduce_none,
  1, 207, :_reduce_none,
  1, 207, :_reduce_none,
  1, 207, :_reduce_none,
  1, 207, :_reduce_none,
  1, 207, :_reduce_none,
  1, 207, :_reduce_none,
  1, 207, :_reduce_none,
  1, 207, :_reduce_none,
  1, 207, :_reduce_none,
  1, 207, :_reduce_none,
  1, 207, :_reduce_none,
  1, 207, :_reduce_none,
  1, 207, :_reduce_none,
  1, 207, :_reduce_none,
  1, 207, :_reduce_none,
  1, 207, :_reduce_none,
  1, 207, :_reduce_none,
  1, 207, :_reduce_none,
  1, 207, :_reduce_none,
  1, 207, :_reduce_none,
  1, 207, :_reduce_none,
  1, 207, :_reduce_none,
  1, 207, :_reduce_none,
  1, 207, :_reduce_none,
  1, 207, :_reduce_none,
  1, 207, :_reduce_none,
  1, 207, :_reduce_none,
  1, 207, :_reduce_none,
  1, 208, :_reduce_none,
  1, 208, :_reduce_none,
  1, 208, :_reduce_none,
  1, 208, :_reduce_none,
  1, 208, :_reduce_none,
  1, 208, :_reduce_none,
  1, 208, :_reduce_none,
  1, 208, :_reduce_none,
  1, 208, :_reduce_none,
  1, 208, :_reduce_none,
  1, 208, :_reduce_none,
  1, 208, :_reduce_none,
  1, 208, :_reduce_none,
  1, 208, :_reduce_none,
  1, 208, :_reduce_none,
  1, 208, :_reduce_none,
  1, 208, :_reduce_none,
  1, 208, :_reduce_none,
  1, 208, :_reduce_none,
  1, 208, :_reduce_none,
  1, 208, :_reduce_none,
  1, 208, :_reduce_none,
  1, 208, :_reduce_none,
  1, 208, :_reduce_none,
  1, 208, :_reduce_none,
  1, 208, :_reduce_none,
  1, 208, :_reduce_none,
  1, 208, :_reduce_none,
  1, 208, :_reduce_none,
  1, 208, :_reduce_none,
  1, 208, :_reduce_none,
  1, 208, :_reduce_none,
  1, 208, :_reduce_none,
  1, 208, :_reduce_none,
  1, 208, :_reduce_none,
  1, 208, :_reduce_none,
  1, 208, :_reduce_none,
  1, 208, :_reduce_none,
  1, 208, :_reduce_none,
  1, 208, :_reduce_none,
  1, 208, :_reduce_none,
  3, 181, :_reduce_195,
  5, 181, :_reduce_196,
  3, 181, :_reduce_197,
  5, 181, :_reduce_198,
  6, 181, :_reduce_199,
  5, 181, :_reduce_200,
  5, 181, :_reduce_201,
  5, 181, :_reduce_202,
  5, 181, :_reduce_203,
  4, 181, :_reduce_204,
  3, 181, :_reduce_205,
  3, 181, :_reduce_206,
  3, 181, :_reduce_207,
  3, 181, :_reduce_208,
  3, 181, :_reduce_209,
  3, 181, :_reduce_210,
  3, 181, :_reduce_211,
  3, 181, :_reduce_212,
  3, 181, :_reduce_213,
  4, 181, :_reduce_214,
  2, 181, :_reduce_215,
  2, 181, :_reduce_216,
  3, 181, :_reduce_217,
  3, 181, :_reduce_218,
  3, 181, :_reduce_219,
  3, 181, :_reduce_220,
  3, 181, :_reduce_221,
  3, 181, :_reduce_222,
  3, 181, :_reduce_223,
  3, 181, :_reduce_224,
  3, 181, :_reduce_225,
  3, 181, :_reduce_226,
  3, 181, :_reduce_227,
  3, 181, :_reduce_228,
  3, 181, :_reduce_229,
  2, 181, :_reduce_230,
  2, 181, :_reduce_231,
  3, 181, :_reduce_232,
  3, 181, :_reduce_233,
  3, 181, :_reduce_234,
  3, 181, :_reduce_235,
  3, 181, :_reduce_236,
  6, 181, :_reduce_237,
  1, 181, :_reduce_none,
  1, 215, :_reduce_239,
  1, 216, :_reduce_none,
  2, 216, :_reduce_241,
  4, 216, :_reduce_242,
  2, 216, :_reduce_243,
  3, 220, :_reduce_244,
  1, 221, :_reduce_none,
  1, 221, :_reduce_none,
  1, 171, :_reduce_247,
  1, 171, :_reduce_248,
  2, 171, :_reduce_249,
  4, 171, :_reduce_250,
  2, 171, :_reduce_251,
  1, 194, :_reduce_252,
  2, 194, :_reduce_253,
  2, 194, :_reduce_254,
  4, 194, :_reduce_255,
  1, 194, :_reduce_256,
  0, 224, :_reduce_257,
  2, 187, :_reduce_258,
  2, 223, :_reduce_259,
  2, 222, :_reduce_260,
  1, 222, :_reduce_none,
  1, 217, :_reduce_262,
  2, 217, :_reduce_263,
  3, 217, :_reduce_264,
  4, 217, :_reduce_265,
  1, 177, :_reduce_266,
  1, 177, :_reduce_267,
  3, 176, :_reduce_268,
  4, 176, :_reduce_269,
  2, 176, :_reduce_270,
  1, 214, :_reduce_none,
  1, 214, :_reduce_none,
  1, 214, :_reduce_none,
  1, 214, :_reduce_none,
  1, 214, :_reduce_none,
  1, 214, :_reduce_none,
  1, 214, :_reduce_none,
  1, 214, :_reduce_none,
  1, 214, :_reduce_none,
  1, 214, :_reduce_none,
  1, 214, :_reduce_281,
  0, 247, :_reduce_282,
  4, 214, :_reduce_283,
  2, 214, :_reduce_284,
  0, 248, :_reduce_285,
  0, 249, :_reduce_286,
  5, 214, :_reduce_287,
  3, 214, :_reduce_288,
  3, 214, :_reduce_289,
  2, 214, :_reduce_290,
  3, 214, :_reduce_291,
  0, 250, :_reduce_292,
  4, 214, :_reduce_293,
  1, 214, :_reduce_294,
  4, 214, :_reduce_295,
  3, 214, :_reduce_296,
  1, 214, :_reduce_297,
  5, 214, :_reduce_298,
  4, 214, :_reduce_299,
  3, 214, :_reduce_300,
  2, 214, :_reduce_301,
  1, 214, :_reduce_none,
  2, 214, :_reduce_303,
  2, 214, :_reduce_304,
  6, 214, :_reduce_305,
  6, 214, :_reduce_306,
  0, 251, :_reduce_307,
  0, 252, :_reduce_308,
  7, 214, :_reduce_309,
  0, 253, :_reduce_310,
  0, 254, :_reduce_311,
  7, 214, :_reduce_312,
  5, 214, :_reduce_313,
  4, 214, :_reduce_314,
  0, 255, :_reduce_315,
  0, 256, :_reduce_316,
  9, 214, :_reduce_317,
  0, 257, :_reduce_318,
  0, 258, :_reduce_319,
  7, 214, :_reduce_320,
  0, 259, :_reduce_321,
  0, 260, :_reduce_322,
  0, 261, :_reduce_323,
  9, 214, :_reduce_324,
  0, 262, :_reduce_325,
  0, 263, :_reduce_326,
  6, 214, :_reduce_327,
  0, 264, :_reduce_328,
  6, 214, :_reduce_329,
  0, 265, :_reduce_330,
  0, 266, :_reduce_331,
  9, 214, :_reduce_332,
  1, 214, :_reduce_333,
  1, 214, :_reduce_334,
  1, 214, :_reduce_335,
  1, 214, :_reduce_336,
  1, 170, :_reduce_337,
  1, 267, :_reduce_none,
  1, 268, :_reduce_none,
  1, 269, :_reduce_none,
  1, 270, :_reduce_none,
  1, 271, :_reduce_none,
  1, 272, :_reduce_none,
  1, 273, :_reduce_none,
  1, 274, :_reduce_none,
  1, 275, :_reduce_none,
  1, 276, :_reduce_none,
  1, 277, :_reduce_none,
  1, 238, :_reduce_none,
  1, 238, :_reduce_none,
  2, 238, :_reduce_none,
  1, 240, :_reduce_none,
  1, 240, :_reduce_none,
  1, 239, :_reduce_none,
  5, 239, :_reduce_355,
  1, 160, :_reduce_none,
  2, 160, :_reduce_357,
  1, 242, :_reduce_none,
  1, 242, :_reduce_359,
  1, 278, :_reduce_none,
  3, 278, :_reduce_361,
  1, 281, :_reduce_362,
  3, 281, :_reduce_363,
  1, 280, :_reduce_364,
  4, 280, :_reduce_365,
  6, 280, :_reduce_366,
  3, 280, :_reduce_367,
  5, 280, :_reduce_368,
  2, 280, :_reduce_369,
  4, 280, :_reduce_370,
  1, 280, :_reduce_371,
  3, 280, :_reduce_372,
  4, 282, :_reduce_373,
  2, 282, :_reduce_374,
  2, 282, :_reduce_375,
  1, 282, :_reduce_376,
  2, 287, :_reduce_377,
  1, 287, :_reduce_none,
  6, 288, :_reduce_379,
  8, 288, :_reduce_380,
  4, 288, :_reduce_381,
  6, 288, :_reduce_382,
  4, 288, :_reduce_383,
  2, 288, :_reduce_384,
  6, 288, :_reduce_385,
  2, 288, :_reduce_386,
  4, 288, :_reduce_387,
  6, 288, :_reduce_388,
  2, 288, :_reduce_389,
  4, 288, :_reduce_390,
  2, 288, :_reduce_391,
  4, 288, :_reduce_392,
  1, 288, :_reduce_393,
  1, 189, :_reduce_394,
  1, 189, :_reduce_none,
  3, 292, :_reduce_396,
  1, 292, :_reduce_397,
  4, 292, :_reduce_398,
  1, 293, :_reduce_none,
  4, 293, :_reduce_400,
  1, 294, :_reduce_401,
  3, 294, :_reduce_402,
  1, 295, :_reduce_403,
  1, 295, :_reduce_none,
  0, 299, :_reduce_405,
  3, 237, :_reduce_406,
  4, 297, :_reduce_407,
  1, 297, :_reduce_408,
  3, 298, :_reduce_409,
  3, 298, :_reduce_410,
  0, 302, :_reduce_411,
  0, 303, :_reduce_412,
  6, 301, :_reduce_413,
  2, 184, :_reduce_414,
  4, 184, :_reduce_415,
  5, 184, :_reduce_416,
  5, 184, :_reduce_417,
  0, 305, :_reduce_418,
  3, 236, :_reduce_419,
  4, 236, :_reduce_420,
  4, 236, :_reduce_421,
  3, 236, :_reduce_422,
  3, 236, :_reduce_423,
  3, 236, :_reduce_424,
  2, 236, :_reduce_425,
  1, 236, :_reduce_426,
  4, 236, :_reduce_427,
  0, 306, :_reduce_428,
  0, 307, :_reduce_429,
  6, 235, :_reduce_430,
  0, 308, :_reduce_431,
  0, 309, :_reduce_432,
  6, 235, :_reduce_433,
  0, 311, :_reduce_434,
  6, 241, :_reduce_435,
  1, 310, :_reduce_none,
  1, 310, :_reduce_none,
  6, 159, :_reduce_438,
  0, 159, :_reduce_439,
  1, 312, :_reduce_440,
  1, 312, :_reduce_none,
  1, 312, :_reduce_none,
  2, 313, :_reduce_443,
  1, 313, :_reduce_none,
  2, 161, :_reduce_445,
  1, 161, :_reduce_none,
  1, 225, :_reduce_447,
  1, 225, :_reduce_448,
  1, 225, :_reduce_none,
  1, 226, :_reduce_450,
  1, 315, :_reduce_451,
  1, 315, :_reduce_none,
  2, 315, :_reduce_453,
  3, 316, :_reduce_454,
  1, 316, :_reduce_455,
  3, 227, :_reduce_456,
  3, 228, :_reduce_457,
  3, 229, :_reduce_458,
  3, 229, :_reduce_459,
  1, 320, :_reduce_460,
  3, 320, :_reduce_461,
  1, 321, :_reduce_none,
  2, 321, :_reduce_463,
  3, 231, :_reduce_464,
  3, 231, :_reduce_465,
  1, 323, :_reduce_466,
  3, 323, :_reduce_467,
  3, 230, :_reduce_468,
  3, 230, :_reduce_469,
  3, 232, :_reduce_470,
  3, 232, :_reduce_471,
  1, 324, :_reduce_472,
  3, 324, :_reduce_473,
  1, 325, :_reduce_474,
  3, 325, :_reduce_475,
  1, 317, :_reduce_476,
  2, 317, :_reduce_477,
  1, 318, :_reduce_478,
  2, 318, :_reduce_479,
  1, 319, :_reduce_480,
  2, 319, :_reduce_481,
  1, 322, :_reduce_482,
  0, 327, :_reduce_483,
  3, 322, :_reduce_484,
  0, 328, :_reduce_485,
  4, 322, :_reduce_486,
  1, 326, :_reduce_487,
  1, 326, :_reduce_488,
  1, 326, :_reduce_489,
  1, 326, :_reduce_none,
  2, 210, :_reduce_491,
  1, 210, :_reduce_492,
  1, 329, :_reduce_none,
  1, 329, :_reduce_none,
  1, 329, :_reduce_none,
  1, 329, :_reduce_none,
  3, 211, :_reduce_497,
  1, 314, :_reduce_none,
  2, 314, :_reduce_499,
  1, 213, :_reduce_none,
  1, 213, :_reduce_none,
  1, 213, :_reduce_none,
  1, 213, :_reduce_none,
  1, 202, :_reduce_none,
  1, 202, :_reduce_none,
  1, 202, :_reduce_none,
  1, 202, :_reduce_none,
  1, 202, :_reduce_none,
  1, 203, :_reduce_509,
  1, 203, :_reduce_510,
  1, 203, :_reduce_511,
  1, 203, :_reduce_512,
  1, 203, :_reduce_513,
  1, 203, :_reduce_514,
  1, 203, :_reduce_515,
  1, 233, :_reduce_516,
  1, 233, :_reduce_517,
  1, 169, :_reduce_518,
  1, 169, :_reduce_519,
  1, 174, :_reduce_520,
  1, 174, :_reduce_521,
  1, 243, :_reduce_522,
  0, 330, :_reduce_523,
  4, 243, :_reduce_524,
  2, 243, :_reduce_525,
  3, 245, :_reduce_526,
  2, 245, :_reduce_527,
  4, 331, :_reduce_528,
  2, 331, :_reduce_529,
  2, 331, :_reduce_530,
  1, 331, :_reduce_none,
  2, 333, :_reduce_532,
  0, 333, :_reduce_533,
  6, 300, :_reduce_534,
  8, 300, :_reduce_535,
  4, 300, :_reduce_536,
  6, 300, :_reduce_537,
  4, 300, :_reduce_538,
  6, 300, :_reduce_539,
  2, 300, :_reduce_540,
  4, 300, :_reduce_541,
  6, 300, :_reduce_542,
  2, 300, :_reduce_543,
  4, 300, :_reduce_544,
  2, 300, :_reduce_545,
  4, 300, :_reduce_546,
  1, 300, :_reduce_547,
  0, 300, :_reduce_548,
  1, 296, :_reduce_549,
  1, 296, :_reduce_550,
  1, 296, :_reduce_551,
  1, 296, :_reduce_552,
  1, 279, :_reduce_none,
  1, 279, :_reduce_554,
  1, 335, :_reduce_none,
  1, 336, :_reduce_none,
  3, 336, :_reduce_557,
  1, 289, :_reduce_558,
  3, 289, :_reduce_559,
  1, 337, :_reduce_none,
  2, 338, :_reduce_561,
  1, 338, :_reduce_562,
  2, 339, :_reduce_563,
  1, 339, :_reduce_564,
  1, 283, :_reduce_none,
  3, 283, :_reduce_566,
  1, 332, :_reduce_none,
  3, 332, :_reduce_568,
  1, 340, :_reduce_none,
  1, 340, :_reduce_none,
  2, 284, :_reduce_571,
  1, 284, :_reduce_572,
  3, 341, :_reduce_573,
  3, 342, :_reduce_574,
  1, 290, :_reduce_575,
  3, 290, :_reduce_576,
  1, 334, :_reduce_577,
  3, 334, :_reduce_578,
  1, 343, :_reduce_none,
  1, 343, :_reduce_none,
  2, 291, :_reduce_581,
  1, 291, :_reduce_582,
  1, 344, :_reduce_none,
  1, 344, :_reduce_none,
  2, 286, :_reduce_585,
  2, 285, :_reduce_586,
  0, 285, :_reduce_587,
  1, 246, :_reduce_none,
  0, 345, :_reduce_589,
  4, 246, :_reduce_590,
  1, 234, :_reduce_591,
  2, 234, :_reduce_592,
  1, 219, :_reduce_none,
  3, 219, :_reduce_594,
  3, 346, :_reduce_595,
  3, 346, :_reduce_596,
  4, 346, :_reduce_597,
  2, 346, :_reduce_598,
  2, 346, :_reduce_599,
  1, 193, :_reduce_none,
  1, 193, :_reduce_none,
  1, 193, :_reduce_none,
  1, 186, :_reduce_none,
  1, 186, :_reduce_none,
  1, 186, :_reduce_none,
  1, 186, :_reduce_none,
  1, 304, :_reduce_none,
  1, 304, :_reduce_none,
  1, 304, :_reduce_none,
  1, 185, :_reduce_none,
  1, 185, :_reduce_none,
  1, 173, :_reduce_none,
  1, 173, :_reduce_none,
  0, 151, :_reduce_none,
  1, 151, :_reduce_none,
  0, 180, :_reduce_none,
  1, 180, :_reduce_none,
  2, 197, :_reduce_none,
  2, 172, :_reduce_none,
  0, 218, :_reduce_none,
  1, 218, :_reduce_none,
  1, 218, :_reduce_none,
  1, 244, :_reduce_623,
  1, 244, :_reduce_none,
  1, 154, :_reduce_none,
  2, 154, :_reduce_626,
  0, 152, :_reduce_627 ]

racc_reduce_n = 628

racc_shift_n = 1059

racc_token_table = {
  false => 0,
  :error => 1,
  :kCLASS => 2,
  :kMODULE => 3,
  :kDEF => 4,
  :kUNDEF => 5,
  :kBEGIN => 6,
  :kRESCUE => 7,
  :kENSURE => 8,
  :kEND => 9,
  :kIF => 10,
  :kUNLESS => 11,
  :kTHEN => 12,
  :kELSIF => 13,
  :kELSE => 14,
  :kCASE => 15,
  :kWHEN => 16,
  :kWHILE => 17,
  :kUNTIL => 18,
  :kFOR => 19,
  :kBREAK => 20,
  :kNEXT => 21,
  :kREDO => 22,
  :kRETRY => 23,
  :kIN => 24,
  :kDO => 25,
  :kDO_COND => 26,
  :kDO_BLOCK => 27,
  :kDO_LAMBDA => 28,
  :kRETURN => 29,
  :kYIELD => 30,
  :kSUPER => 31,
  :kSELF => 32,
  :kNIL => 33,
  :kTRUE => 34,
  :kFALSE => 35,
  :kAND => 36,
  :kOR => 37,
  :kNOT => 38,
  :kIF_MOD => 39,
  :kUNLESS_MOD => 40,
  :kWHILE_MOD => 41,
  :kUNTIL_MOD => 42,
  :kRESCUE_MOD => 43,
  :kALIAS => 44,
  :kDEFINED => 45,
  :klBEGIN => 46,
  :klEND => 47,
  :k__LINE__ => 48,
  :k__FILE__ => 49,
  :k__ENCODING__ => 50,
  :tIDENTIFIER => 51,
  :tFID => 52,
  :tGVAR => 53,
  :tIVAR => 54,
  :tCONSTANT => 55,
  :tLABEL => 56,
  :tCVAR => 57,
  :tNTH_REF => 58,
  :tBACK_REF => 59,
  :tSTRING_CONTENT => 60,
  :tINTEGER => 61,
  :tFLOAT => 62,
  :tREGEXP_END => 63,
  :tUPLUS => 64,
  :tUMINUS => 65,
  :tUMINUS_NUM => 66,
  :tPOW => 67,
  :tCMP => 68,
  :tEQ => 69,
  :tEQQ => 70,
  :tNEQ => 71,
  :tGEQ => 72,
  :tLEQ => 73,
  :tANDOP => 74,
  :tOROP => 75,
  :tMATCH => 76,
  :tNMATCH => 77,
  :tDOT => 78,
  :tDOT2 => 79,
  :tDOT3 => 80,
  :tAREF => 81,
  :tASET => 82,
  :tLSHFT => 83,
  :tRSHFT => 84,
  :tCOLON2 => 85,
  :tCOLON3 => 86,
  :tOP_ASGN => 87,
  :tASSOC => 88,
  :tLPAREN => 89,
  :tLPAREN2 => 90,
  :tRPAREN => 91,
  :tLPAREN_ARG => 92,
  :tLBRACK => 93,
  :tLBRACK2 => 94,
  :tRBRACK => 95,
  :tLBRACE => 96,
  :tLBRACE_ARG => 97,
  :tSTAR => 98,
  :tSTAR2 => 99,
  :tAMPER => 100,
  :tAMPER2 => 101,
  :tTILDE => 102,
  :tPERCENT => 103,
  :tDIVIDE => 104,
  :tPLUS => 105,
  :tMINUS => 106,
  :tLT => 107,
  :tGT => 108,
  :tPIPE => 109,
  :tBANG => 110,
  :tCARET => 111,
  :tLCURLY => 112,
  :tRCURLY => 113,
  :tBACK_REF2 => 114,
  :tSYMBEG => 115,
  :tSTRING_BEG => 116,
  :tXSTRING_BEG => 117,
  :tREGEXP_BEG => 118,
  :tWORDS_BEG => 119,
  :tQWORDS_BEG => 120,
  :tSTRING_DBEG => 121,
  :tSTRING_DVAR => 122,
  :tSTRING_END => 123,
  :tSTRING => 124,
  :tSYMBOL => 125,
  :tNL => 126,
  :tEH => 127,
  :tCOLON => 128,
  :tCOMMA => 129,
  :tSPACE => 130,
  :tSEMI => 131,
  :tLAMBDA => 132,
  :tLAMBEG => 133,
  :tDSTAR => 134,
  :tCHAR => 135,
  :tSYMBOLS_BEG => 136,
  :tQSYMBOLS_BEG => 137,
  :tSTRING_DEND => 138,
  :tUBANG => 139,
  :tRATIONAL => 140,
  :tIMAGINARY => 141,
  :tLABEL_END => 142,
  :tLONELY => 143,
  :tEQL => 144,
  :tLOWEST => 145 }

racc_nt_base = 146

racc_use_result_var = true

Racc_arg = [
  racc_action_table,
  racc_action_check,
  racc_action_default,
  racc_action_pointer,
  racc_goto_table,
  racc_goto_check,
  racc_goto_default,
  racc_goto_pointer,
  racc_nt_base,
  racc_reduce_table,
  racc_token_table,
  racc_shift_n,
  racc_reduce_n,
  racc_use_result_var ]

Racc_token_to_s_table = [
  "$end",
  "error",
  "kCLASS",
  "kMODULE",
  "kDEF",
  "kUNDEF",
  "kBEGIN",
  "kRESCUE",
  "kENSURE",
  "kEND",
  "kIF",
  "kUNLESS",
  "kTHEN",
  "kELSIF",
  "kELSE",
  "kCASE",
  "kWHEN",
  "kWHILE",
  "kUNTIL",
  "kFOR",
  "kBREAK",
  "kNEXT",
  "kREDO",
  "kRETRY",
  "kIN",
  "kDO",
  "kDO_COND",
  "kDO_BLOCK",
  "kDO_LAMBDA",
  "kRETURN",
  "kYIELD",
  "kSUPER",
  "kSELF",
  "kNIL",
  "kTRUE",
  "kFALSE",
  "kAND",
  "kOR",
  "kNOT",
  "kIF_MOD",
  "kUNLESS_MOD",
  "kWHILE_MOD",
  "kUNTIL_MOD",
  "kRESCUE_MOD",
  "kALIAS",
  "kDEFINED",
  "klBEGIN",
  "klEND",
  "k__LINE__",
  "k__FILE__",
  "k__ENCODING__",
  "tIDENTIFIER",
  "tFID",
  "tGVAR",
  "tIVAR",
  "tCONSTANT",
  "tLABEL",
  "tCVAR",
  "tNTH_REF",
  "tBACK_REF",
  "tSTRING_CONTENT",
  "tINTEGER",
  "tFLOAT",
  "tREGEXP_END",
  "tUPLUS",
  "tUMINUS",
  "tUMINUS_NUM",
  "tPOW",
  "tCMP",
  "tEQ",
  "tEQQ",
  "tNEQ",
  "tGEQ",
  "tLEQ",
  "tANDOP",
  "tOROP",
  "tMATCH",
  "tNMATCH",
  "tDOT",
  "tDOT2",
  "tDOT3",
  "tAREF",
  "tASET",
  "tLSHFT",
  "tRSHFT",
  "tCOLON2",
  "tCOLON3",
  "tOP_ASGN",
  "tASSOC",
  "tLPAREN",
  "tLPAREN2",
  "tRPAREN",
  "tLPAREN_ARG",
  "tLBRACK",
  "tLBRACK2",
  "tRBRACK",
  "tLBRACE",
  "tLBRACE_ARG",
  "tSTAR",
  "tSTAR2",
  "tAMPER",
  "tAMPER2",
  "tTILDE",
  "tPERCENT",
  "tDIVIDE",
  "tPLUS",
  "tMINUS",
  "tLT",
  "tGT",
  "tPIPE",
  "tBANG",
  "tCARET",
  "tLCURLY",
  "tRCURLY",
  "tBACK_REF2",
  "tSYMBEG",
  "tSTRING_BEG",
  "tXSTRING_BEG",
  "tREGEXP_BEG",
  "tWORDS_BEG",
  "tQWORDS_BEG",
  "tSTRING_DBEG",
  "tSTRING_DVAR",
  "tSTRING_END",
  "tSTRING",
  "tSYMBOL",
  "tNL",
  "tEH",
  "tCOLON",
  "tCOMMA",
  "tSPACE",
  "tSEMI",
  "tLAMBDA",
  "tLAMBEG",
  "tDSTAR",
  "tCHAR",
  "tSYMBOLS_BEG",
  "tQSYMBOLS_BEG",
  "tSTRING_DEND",
  "tUBANG",
  "tRATIONAL",
  "tIMAGINARY",
  "tLABEL_END",
  "tLONELY",
  "tEQL",
  "tLOWEST",
  "$start",
  "program",
  "top_compstmt",
  "@1",
  "top_stmts",
  "opt_terms",
  "none",
  "top_stmt",
  "terms",
  "stmt",
  "bodystmt",
  "@2",
  "compstmt",
  "opt_rescue",
  "opt_else",
  "opt_ensure",
  "stmts",
  "fitem",
  "undef_list",
  "expr_value",
  "command_asgn",
  "mlhs",
  "command_call",
  "var_lhs",
  "primary_value",
  "opt_call_args",
  "rbracket",
  "call_op",
  "backref",
  "lhs",
  "mrhs",
  "mrhs_arg",
  "expr",
  "@3",
  "opt_nl",
  "arg",
  "command",
  "block_command",
  "block_call",
  "dot_or_colon",
  "operation2",
  "command_args",
  "cmd_brace_block",
  "opt_block_param",
  "fcall",
  "@4",
  "@5",
  "operation",
  "call_args",
  "mlhs_basic",
  "mlhs_inner",
  "rparen",
  "mlhs_head",
  "mlhs_item",
  "mlhs_node",
  "mlhs_post",
  "user_variable",
  "keyword_variable",
  "cname",
  "cpath",
  "fname",
  "op",
  "reswords",
  "fsym",
  "symbol",
  "dsym",
  "@6",
  "simple_numeric",
  "primary",
  "arg_value",
  "aref_args",
  "args",
  "trailer",
  "assocs",
  "paren_args",
  "opt_paren_args",
  "opt_block_arg",
  "block_arg",
  "@7",
  "literal",
  "strings",
  "xstring",
  "regexp",
  "words",
  "qwords",
  "symbols",
  "qsymbols",
  "var_ref",
  "assoc_list",
  "brace_block",
  "method_call",
  "lambda",
  "then",
  "if_tail",
  "do",
  "case_body",
  "for_var",
  "superclass",
  "term",
  "f_arglist",
  "singleton",
  "@8",
  "@9",
  "@10",
  "@11",
  "@12",
  "@13",
  "@14",
  "@15",
  "@16",
  "@17",
  "@18",
  "@19",
  "@20",
  "@21",
  "@22",
  "@23",
  "@24",
  "@25",
  "@26",
  "@27",
  "k_begin",
  "k_if",
  "k_unless",
  "k_while",
  "k_until",
  "k_case",
  "k_for",
  "k_class",
  "k_module",
  "k_def",
  "k_end",
  "f_marg",
  "f_norm_arg",
  "f_margs",
  "f_marg_list",
  "block_args_tail",
  "f_block_kwarg",
  "f_kwrest",
  "opt_f_block_arg",
  "f_block_arg",
  "opt_block_args_tail",
  "block_param",
  "f_arg",
  "f_block_optarg",
  "f_rest_arg",
  "block_param_def",
  "opt_bv_decl",
  "bv_decls",
  "bvar",
  "f_bad_arg",
  "f_larglist",
  "lambda_body",
  "@28",
  "f_args",
  "do_block",
  "@29",
  "@30",
  "operation3",
  "@31",
  "@32",
  "@33",
  "@34",
  "@35",
  "cases",
  "@36",
  "exc_list",
  "exc_var",
  "numeric",
  "string",
  "string1",
  "string_contents",
  "xstring_contents",
  "regexp_contents",
  "word_list",
  "word",
  "string_content",
  "symbol_list",
  "qword_list",
  "qsym_list",
  "string_dvar",
  "@37",
  "@38",
  "sym",
  "@39",
  "args_tail",
  "f_kwarg",
  "opt_args_tail",
  "f_optarg",
  "f_arg_asgn",
  "f_arg_item",
  "f_label",
  "f_kw",
  "f_block_kw",
  "kwrest_mark",
  "f_opt",
  "f_block_opt",
  "restarg_mark",
  "blkarg_mark",
  "@40",
  "assoc" ]

Racc_debug_parser = false

##### State transition tables end #####

# reduce 0 omitted

def _reduce_1(val, _values, result)
                      self.lexer.lex_state = :expr_beg
                    
    result
end

def _reduce_2(val, _values, result)
                      result = new_compstmt val
                    
    result
end

def _reduce_3(val, _values, result)
                      result = val[0]
                    
    result
end

# reduce 4 omitted

# reduce 5 omitted

def _reduce_6(val, _values, result)
                      result = self.block_append val[0], val[2]
                    
    result
end

# reduce 7 omitted

def _reduce_8(val, _values, result)
                      result = val[0]

                      # TODO: remove once I have more confidence this is fixed
                      # result.each_of_type :call_args do |s|
                      #   debug20 666, s, result
                      # end
                    
    result
end

def _reduce_9(val, _values, result)
                      if (self.in_def || self.in_single > 0) then
                        debug20 1
                        yyerror "BEGIN in method"
                      end
                      self.env.extend
                    
    result
end

def _reduce_10(val, _values, result)
                      result = new_iter s(:preexe), nil, val[3]
                    
    result
end

def _reduce_11(val, _values, result)
                      result = new_body val
                    
    result
end

def _reduce_12(val, _values, result)
                      result = new_compstmt val
                    
    result
end

# reduce 13 omitted

# reduce 14 omitted

def _reduce_15(val, _values, result)
                      result = self.block_append val[0], val[2]
                    
    result
end

def _reduce_16(val, _values, result)
                      result = val[1]
                      debug20 2, val, result
                    
    result
end

def _reduce_17(val, _values, result)
                      lexer.lex_state = :expr_fname
                      result = self.lexer.lineno
                    
    result
end

def _reduce_18(val, _values, result)
                      result = s(:alias, val[1], val[3]).line(val[2])
                    
    result
end

def _reduce_19(val, _values, result)
                      result = s(:valias, val[1].to_sym, val[2].to_sym)
                    
    result
end

def _reduce_20(val, _values, result)
                      result = s(:valias, val[1].to_sym, :"$#{val[2]}")
                    
    result
end

def _reduce_21(val, _values, result)
                      yyerror "can't make alias for the number variables"
                    
    result
end

def _reduce_22(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_23(val, _values, result)
                      result = new_if val[2], val[0], nil
                    
    result
end

def _reduce_24(val, _values, result)
                      result = new_if val[2], nil, val[0]
                    
    result
end

def _reduce_25(val, _values, result)
                      result = new_while val[0], val[2], true
                    
    result
end

def _reduce_26(val, _values, result)
                      result = new_until val[0], val[2], true
                    
    result
end

def _reduce_27(val, _values, result)
                      result = s(:rescue, val[0], new_resbody(s(:array), val[2]))
                    
    result
end

def _reduce_28(val, _values, result)
                      if (self.in_def || self.in_single > 0) then
                        debug20 3
                        yyerror "END in method; use at_exit"
                      end
                      result = new_iter s(:postexe), 0, val[2]
                    
    result
end

# reduce 29 omitted

def _reduce_30(val, _values, result)
                      result = new_masgn val[0], val[2], :wrap
                    
    result
end

def _reduce_31(val, _values, result)
                      result = new_op_asgn val
                    
    result
end

def _reduce_32(val, _values, result)
                      result = s(:op_asgn1, val[0], val[2], val[4].to_sym, val[5])
                    
    result
end

def _reduce_33(val, _values, result)
                      result = s(:op_asgn, val[0], val[4], val[2].to_sym, val[3].to_sym)
                      if val[1] == '&.'
                        result.sexp_type = :safe_op_asgn
                      end
                      result.line = val[0].line
                    
    result
end

def _reduce_34(val, _values, result)
                      result = s(:op_asgn, val[0], val[4], val[2].to_sym, val[3].to_sym)
                      if val[1] == '&.'
                        result.sexp_type = :safe_op_asgn
                      end
                      result.line = val[0].line
                    
    result
end

def _reduce_35(val, _values, result)
                      result = s(:op_asgn, val[0], val[4], val[2], val[3])
                      debug20 4, val, result
                    
    result
end

def _reduce_36(val, _values, result)
                      result = s(:op_asgn, val[0], val[4], val[2], val[3])
                      debug20 5, val, result
                    
    result
end

def _reduce_37(val, _values, result)
                      self.backref_assign_error val[0]
                    
    result
end

def _reduce_38(val, _values, result)
                      result = new_assign val[0], s(:svalue, val[2])
                    
    result
end

def _reduce_39(val, _values, result)
                      result = new_masgn val[0], val[2]
                    
    result
end

# reduce 40 omitted

def _reduce_41(val, _values, result)
                      result = new_assign val[0], val[2]
                    
    result
end

def _reduce_42(val, _values, result)
                      result = new_assign val[0], val[2]
                    
    result
end

# reduce 43 omitted

def _reduce_44(val, _values, result)
                      result = logical_op :and, val[0], val[2]
                    
    result
end

def _reduce_45(val, _values, result)
                      result = logical_op :or, val[0], val[2]
                    
    result
end

def _reduce_46(val, _values, result)
                      result = s(:call, val[2], :"!")
                    
    result
end

def _reduce_47(val, _values, result)
                      result = s(:call, val[1], :"!")
                    
    result
end

# reduce 48 omitted

def _reduce_49(val, _values, result)
                      result = value_expr(val[0])
                    
    result
end

# reduce 50 omitted

# reduce 51 omitted

# reduce 52 omitted

def _reduce_53(val, _values, result)
                      result = new_call val[0], val[2].to_sym, val[3]
                    
    result
end

def _reduce_54(val, _values, result)
                      self.env.extend(:dynamic)
                      result = self.lexer.lineno
                    
    result
end

def _reduce_55(val, _values, result)
                      result = nil # self.env.dynamic.keys
                    
    result
end

def _reduce_56(val, _values, result)
                      result = new_iter nil, val[2], val[4]
                      result.line = val[1]

                      self.env.unextend
                    
    result
end

def _reduce_57(val, _values, result)
                      result = new_call nil, val[0].to_sym
                    
    result
end

def _reduce_58(val, _values, result)
                      result = val[0].concat val[1].sexp_body # REFACTOR pattern
                    
    result
end

def _reduce_59(val, _values, result)
                      result = val[0].concat val[1].sexp_body
                      if val[2] then
                        block_dup_check result, val[2]

                        result, operation = val[2], result
                        result.insert 1, operation
                      end
                    
    result
end

def _reduce_60(val, _values, result)
                      result = new_call val[0], val[2].to_sym, val[3], val[1]
                    
    result
end

def _reduce_61(val, _values, result)
                      recv, _, msg, args, block = val
                      call = new_call recv, msg.to_sym, args, val[1]

                      block_dup_check call, block

                      block.insert 1, call
                      result = block
                    
    result
end

def _reduce_62(val, _values, result)
                      result = new_call val[0], val[2].to_sym, val[3]
                    
    result
end

def _reduce_63(val, _values, result)
                      recv, _, msg, args, block = val
                      call = new_call recv, msg.to_sym, args

                      block_dup_check call, block

                      block.insert 1, call
                      result = block
                    
    result
end

def _reduce_64(val, _values, result)
                      result = new_super val[1]
                    
    result
end

def _reduce_65(val, _values, result)
                      result = new_yield val[1]
                    
    result
end

def _reduce_66(val, _values, result)
                      line = val[0].last
                      result = s(:return, ret_args(val[1])).line(line)
                    
    result
end

def _reduce_67(val, _values, result)
                      line = val[0].last
                      result = s(:break, ret_args(val[1])).line(line)
                    
    result
end

def _reduce_68(val, _values, result)
                      line = val[0].last
                      result = s(:next, ret_args(val[1])).line(line)
                    
    result
end

# reduce 69 omitted

def _reduce_70(val, _values, result)
                      result = val[1]
                    
    result
end

# reduce 71 omitted

def _reduce_72(val, _values, result)
                      result = s(:masgn, s(:array, val[1]))
                    
    result
end

def _reduce_73(val, _values, result)
                      result = s(:masgn, val[0])
                    
    result
end

def _reduce_74(val, _values, result)
                      result = s(:masgn, val[0] << val[1].compact)
                    
    result
end

def _reduce_75(val, _values, result)
                      result = s(:masgn, val[0] << s(:splat, val[2]))
                    
    result
end

def _reduce_76(val, _values, result)
                      ary1, _, splat, _, ary2 = val

                      result = list_append ary1, s(:splat, splat)
                      result.concat ary2.sexp_body
                      result = s(:masgn, result)
                    
    result
end

def _reduce_77(val, _values, result)
                      result = s(:masgn, val[0] << s(:splat))
                    
    result
end

def _reduce_78(val, _values, result)
                      ary = list_append val[0], s(:splat)
                      ary.concat val[3].sexp_body
                      result = s(:masgn, ary)
                    
    result
end

def _reduce_79(val, _values, result)
                      result = s(:masgn, s(:array, s(:splat, val[1])))
                    
    result
end

def _reduce_80(val, _values, result)
                      ary = s(:array, s(:splat, val[1]))
                      ary.concat val[3].sexp_body
                      result = s(:masgn, ary)
                    
    result
end

def _reduce_81(val, _values, result)
                      result = s(:masgn, s(:array, s(:splat)))
                    
    result
end

def _reduce_82(val, _values, result)
                      result = s(:masgn, s(:array, s(:splat), *val[2].sexp_body))
                    
    result
end

# reduce 83 omitted

def _reduce_84(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_85(val, _values, result)
                      result = s(:array, val[0])
                    
    result
end

def _reduce_86(val, _values, result)
                      result = val[0] << val[1].compact
                    
    result
end

def _reduce_87(val, _values, result)
                      result = s(:array, val[0])
                    
    result
end

def _reduce_88(val, _values, result)
                      result = list_append val[0], val[2]
                    
    result
end

def _reduce_89(val, _values, result)
                      result = self.assignable val[0]
                    
    result
end

def _reduce_90(val, _values, result)
                      result = self.assignable val[0]
                    
    result
end

def _reduce_91(val, _values, result)
                      result = self.aryset val[0], val[2]
                    
    result
end

def _reduce_92(val, _values, result)
                      result = new_attrasgn val[0], val[2], val[1]
                    
    result
end

def _reduce_93(val, _values, result)
                      result = s(:attrasgn, val[0], :"#{val[2]}=")
                    
    result
end

def _reduce_94(val, _values, result)
                      result = new_attrasgn val[0], val[2], val[1]
                    
    result
end

def _reduce_95(val, _values, result)
                      if (self.in_def || self.in_single > 0) then
                        debug20 7
                        yyerror "dynamic constant assignment"
                      end

                      result = s(:const, s(:colon2, val[0], val[2].to_sym), nil)
                    
    result
end

def _reduce_96(val, _values, result)
                      if (self.in_def || self.in_single > 0) then
                        debug20 8
                        yyerror "dynamic constant assignment"
                      end

                      result = s(:const, nil, s(:colon3, val[1].to_sym))
                    
    result
end

def _reduce_97(val, _values, result)
                      self.backref_assign_error val[0]
                    
    result
end

def _reduce_98(val, _values, result)
                      result = self.assignable val[0]
                    
    result
end

def _reduce_99(val, _values, result)
                      result = self.assignable val[0]
                      debug20 9, val, result
                    
    result
end

def _reduce_100(val, _values, result)
                      result = self.aryset val[0], val[2]
                    
    result
end

def _reduce_101(val, _values, result)
                      result = new_attrasgn val[0], val[2], val[1]
                    
    result
end

def _reduce_102(val, _values, result)
                      result = s(:attrasgn, val[0], :"#{val[2]}=")
                    
    result
end

def _reduce_103(val, _values, result)
                      result = new_attrasgn val[0], val[2], val[1]
                    
    result
end

def _reduce_104(val, _values, result)
                      if (self.in_def || self.in_single > 0) then
                        debug20 10
                        yyerror "dynamic constant assignment"
                      end

                      result = s(:const, s(:colon2, val[0], val[2].to_sym))
                    
    result
end

def _reduce_105(val, _values, result)
                      if (self.in_def || self.in_single > 0) then
                        debug20 11
                        yyerror "dynamic constant assignment"
                      end

                      result = s(:const, s(:colon3, val[1].to_sym))
                    
    result
end

def _reduce_106(val, _values, result)
                      self.backref_assign_error val[0]
                    
    result
end

def _reduce_107(val, _values, result)
                      yyerror "class/module name must be CONSTANT"
                    
    result
end

# reduce 108 omitted

def _reduce_109(val, _values, result)
                      result = s(:colon3, val[1].to_sym)
                    
    result
end

def _reduce_110(val, _values, result)
                      result = val[0].to_sym
                    
    result
end

def _reduce_111(val, _values, result)
                      result = s(:colon2, val[0], val[2].to_sym)
                    
    result
end

# reduce 112 omitted

# reduce 113 omitted

# reduce 114 omitted

def _reduce_115(val, _values, result)
                      lexer.lex_state = :expr_end
                      result = val[0]
                    
    result
end

def _reduce_116(val, _values, result)
                      lexer.lex_state = :expr_end
                      result = val[0]
                    
    result
end

# reduce 117 omitted

# reduce 118 omitted

def _reduce_119(val, _values, result)
                      result = s(:lit, val[0].to_sym)
                    
    result
end

# reduce 120 omitted

def _reduce_121(val, _values, result)
                      result = new_undef val[0]
                    
    result
end

def _reduce_122(val, _values, result)
                      lexer.lex_state = :expr_fname
                    
    result
end

def _reduce_123(val, _values, result)
                      result = new_undef val[0], val[3]
                    
    result
end

# reduce 124 omitted

# reduce 125 omitted

# reduce 126 omitted

# reduce 127 omitted

# reduce 128 omitted

# reduce 129 omitted

# reduce 130 omitted

# reduce 131 omitted

# reduce 132 omitted

# reduce 133 omitted

# reduce 134 omitted

# reduce 135 omitted

# reduce 136 omitted

# reduce 137 omitted

# reduce 138 omitted

# reduce 139 omitted

# reduce 140 omitted

# reduce 141 omitted

# reduce 142 omitted

# reduce 143 omitted

# reduce 144 omitted

# reduce 145 omitted

# reduce 146 omitted

# reduce 147 omitted

# reduce 148 omitted

# reduce 149 omitted

# reduce 150 omitted

# reduce 151 omitted

# reduce 152 omitted

# reduce 153 omitted

# reduce 154 omitted

# reduce 155 omitted

# reduce 156 omitted

# reduce 157 omitted

# reduce 158 omitted

# reduce 159 omitted

# reduce 160 omitted

# reduce 161 omitted

# reduce 162 omitted

# reduce 163 omitted

# reduce 164 omitted

# reduce 165 omitted

# reduce 166 omitted

# reduce 167 omitted

# reduce 168 omitted

# reduce 169 omitted

# reduce 170 omitted

# reduce 171 omitted

# reduce 172 omitted

# reduce 173 omitted

# reduce 174 omitted

# reduce 175 omitted

# reduce 176 omitted

# reduce 177 omitted

# reduce 178 omitted

# reduce 179 omitted

# reduce 180 omitted

# reduce 181 omitted

# reduce 182 omitted

# reduce 183 omitted

# reduce 184 omitted

# reduce 185 omitted

# reduce 186 omitted

# reduce 187 omitted

# reduce 188 omitted

# reduce 189 omitted

# reduce 190 omitted

# reduce 191 omitted

# reduce 192 omitted

# reduce 193 omitted

# reduce 194 omitted

def _reduce_195(val, _values, result)
                      result = new_assign val[0], val[2]
                    
    result
end

def _reduce_196(val, _values, result)
                      result = new_assign val[0], s(:rescue, val[2], new_resbody(s(:array), val[4]))
                    
    result
end

def _reduce_197(val, _values, result)
                      result = new_op_asgn val
                    
    result
end

def _reduce_198(val, _values, result)
                      result = new_op_asgn val
                      result = s(:rescue, result, new_resbody(s(:array), val[4]))
                    
    result
end

def _reduce_199(val, _values, result)
                      val[2].sexp_type = :arglist if val[2]
                      result = s(:op_asgn1, val[0], val[2], val[4].to_sym, val[5])
                    
    result
end

def _reduce_200(val, _values, result)
                      result = new_op_asgn2 val
                    
    result
end

def _reduce_201(val, _values, result)
                      result = new_op_asgn2 val
                    
    result
end

def _reduce_202(val, _values, result)
                      result = s(:op_asgn, val[0], val[4], val[2].to_sym, val[3].to_sym)
                    
    result
end

def _reduce_203(val, _values, result)
                      yyerror "constant re-assignment"
                    
    result
end

def _reduce_204(val, _values, result)
                      yyerror "constant re-assignment"
                    
    result
end

def _reduce_205(val, _values, result)
                      self.backref_assign_error val[0]
                    
    result
end

def _reduce_206(val, _values, result)
                      v1, v2 = val[0], val[2]
                      if v1.node_type == :lit and v2.node_type == :lit and Integer === v1.last and Integer === v2.last then
                        result = s(:lit, (v1.last)..(v2.last))
                      else
                        result = s(:dot2, v1, v2)
                      end
                    
    result
end

def _reduce_207(val, _values, result)
                      v1, v2 = val[0], val[2]
                      if v1.node_type == :lit and v2.node_type == :lit and Integer === v1.last and Integer === v2.last then
                        result = s(:lit, (v1.last)...(v2.last))
                      else
                        result = s(:dot3, v1, v2)
                      end
                    
    result
end

def _reduce_208(val, _values, result)
                      result = new_call val[0], :+, argl(val[2])
                    
    result
end

def _reduce_209(val, _values, result)
                      result = new_call val[0], :-, argl(val[2])
                    
    result
end

def _reduce_210(val, _values, result)
                      result = new_call val[0], :*, argl(val[2])
                    
    result
end

def _reduce_211(val, _values, result)
                      result = new_call val[0], :"/", argl(val[2])
                    
    result
end

def _reduce_212(val, _values, result)
                      result = new_call val[0], :"%", argl(val[2])
                    
    result
end

def _reduce_213(val, _values, result)
                      result = new_call val[0], :**, argl(val[2])
                    
    result
end

def _reduce_214(val, _values, result)
                      result = new_call(new_call(s(:lit, val[1]), :"**", argl(val[3])), :"-@")
                    
    result
end

def _reduce_215(val, _values, result)
                      result = new_call val[1], :"+@"
                    
    result
end

def _reduce_216(val, _values, result)
                      result = new_call val[1], :"-@"
                    
    result
end

def _reduce_217(val, _values, result)
                      result = new_call val[0], :"|", argl(val[2])
                    
    result
end

def _reduce_218(val, _values, result)
                      result = new_call val[0], :"^", argl(val[2])
                    
    result
end

def _reduce_219(val, _values, result)
                      result = new_call val[0], :"&", argl(val[2])
                    
    result
end

def _reduce_220(val, _values, result)
                      result = new_call val[0], :"<=>", argl(val[2])
                    
    result
end

def _reduce_221(val, _values, result)
                      result = new_call val[0], :">", argl(val[2])
                    
    result
end

def _reduce_222(val, _values, result)
                      result = new_call val[0], :">=", argl(val[2])
                    
    result
end

def _reduce_223(val, _values, result)
                      result = new_call val[0], :"<", argl(val[2])
                    
    result
end

def _reduce_224(val, _values, result)
                      result = new_call val[0], :"<=", argl(val[2])
                    
    result
end

def _reduce_225(val, _values, result)
                      result = new_call val[0], :"==", argl(val[2])
                    
    result
end

def _reduce_226(val, _values, result)
                      result = new_call val[0], :"===", argl(val[2])
                    
    result
end

def _reduce_227(val, _values, result)
                      result = new_call val[0], :"!=", argl(val[2])
                    
    result
end

def _reduce_228(val, _values, result)
                      result = new_match val[0], val[2]
                    
    result
end

def _reduce_229(val, _values, result)
                      result = s(:not, new_match(val[0], val[2]))
                    
    result
end

def _reduce_230(val, _values, result)
                      result = new_call val[1], :"!"
                    
    result
end

def _reduce_231(val, _values, result)
                      result = new_call value_expr(val[1]), :"~"
                    
    result
end

def _reduce_232(val, _values, result)
                      val[0] = value_expr val[0]
                      val[2] = value_expr val[2]
                      result = new_call val[0], :"\<\<", argl(val[2])
                    
    result
end

def _reduce_233(val, _values, result)
                      val[0] = value_expr val[0]
                      val[2] = value_expr val[2]
                      result = new_call val[0], :">>", argl(val[2])
                    
    result
end

def _reduce_234(val, _values, result)
                      result = logical_op :and, val[0], val[2]
                    
    result
end

def _reduce_235(val, _values, result)
                      result = logical_op :or, val[0], val[2]
                    
    result
end

def _reduce_236(val, _values, result)
                      result = s(:defined, val[2])
                    
    result
end

def _reduce_237(val, _values, result)
                      result = s(:if, val[0], val[2], val[5])
                    
    result
end

# reduce 238 omitted

def _reduce_239(val, _values, result)
                      result = value_expr(val[0])
                    
    result
end

# reduce 240 omitted

def _reduce_241(val, _values, result)
                      result = args [val[0]]
                    
    result
end

def _reduce_242(val, _values, result)
                      result = args [val[0], array_to_hash(val[2])]
                    
    result
end

def _reduce_243(val, _values, result)
                      result = args [array_to_hash(val[0])]
                    
    result
end

def _reduce_244(val, _values, result)
                      result = val[1]
                    
    result
end

# reduce 245 omitted

# reduce 246 omitted

def _reduce_247(val, _values, result)
                      result = val[0]
                    
    result
end

def _reduce_248(val, _values, result)
                      result = val[0]
                    
    result
end

def _reduce_249(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_250(val, _values, result)
                      result = args [val[0], array_to_hash(val[2])]
                    
    result
end

def _reduce_251(val, _values, result)
                      result = args [array_to_hash(val[0])]
                    
    result
end

def _reduce_252(val, _values, result)
                      warning "parenthesize argument(s) for future version"
                      result = call_args val
                    
    result
end

def _reduce_253(val, _values, result)
                      result = call_args val
                      result = self.arg_blk_pass val[0], val[1]
                    
    result
end

def _reduce_254(val, _values, result)
                      result = call_args [array_to_hash(val[0])]
                      result = self.arg_blk_pass result, val[1]
                    
    result
end

def _reduce_255(val, _values, result)
                      result = call_args [val[0], array_to_hash(val[2])]
                      result = self.arg_blk_pass result, val[3]
                    
    result
end

def _reduce_256(val, _values, result)
                      result = call_args val
                    
    result
end

def _reduce_257(val, _values, result)
                      result = lexer.cmdarg.stack.dup # TODO: smell?
                      lexer.cmdarg.push true
                    
    result
end

def _reduce_258(val, _values, result)
                      lexer.cmdarg.stack.replace val[0]
                      result = val[1]
                    
    result
end

def _reduce_259(val, _values, result)
                      result = s(:block_pass, val[1])
                    
    result
end

def _reduce_260(val, _values, result)
                      result = val[1]
                    
    result
end

# reduce 261 omitted

def _reduce_262(val, _values, result)
                      result = s(:array, val[0])
                    
    result
end

def _reduce_263(val, _values, result)
                      result = s(:array, s(:splat, val[1]))
                    
    result
end

def _reduce_264(val, _values, result)
                      result = self.list_append val[0], val[2]
                    
    result
end

def _reduce_265(val, _values, result)
                      result = self.list_append val[0], s(:splat, val[3])
                    
    result
end

def _reduce_266(val, _values, result)
                      result = new_masgn_arg val[0]
                    
    result
end

def _reduce_267(val, _values, result)
                      result = new_masgn_arg val[0], :wrap
                    
    result
end

def _reduce_268(val, _values, result)
                      result = val[0] << val[2]
                    
    result
end

def _reduce_269(val, _values, result)
                      result = self.arg_concat val[0], val[3]
                    
    result
end

def _reduce_270(val, _values, result)
                      result = s(:splat, val[1])
                    
    result
end

# reduce 271 omitted

# reduce 272 omitted

# reduce 273 omitted

# reduce 274 omitted

# reduce 275 omitted

# reduce 276 omitted

# reduce 277 omitted

# reduce 278 omitted

# reduce 279 omitted

# reduce 280 omitted

def _reduce_281(val, _values, result)
                      result = new_call nil, val[0].to_sym
                    
    result
end

def _reduce_282(val, _values, result)
                      result = self.lexer.lineno
                    
    result
end

def _reduce_283(val, _values, result)
                      unless val[2] then
                        result = s(:nil)
                      else
                        result = s(:begin, val[2])
                      end

                      result.line = val[1]
                    
    result
end

def _reduce_284(val, _values, result)
                      debug20 13, val, result
                    
    result
end

def _reduce_285(val, _values, result)
                      result = self.lexer.cmdarg.stack.dup
                      lexer.cmdarg.stack.replace [false] # TODO add api for these
                    
    result
end

def _reduce_286(val, _values, result)
                      lexer.lex_state = :expr_endarg
                    
    result
end

def _reduce_287(val, _values, result)
                      warning "(...) interpreted as grouped expression"
                      lexer.cmdarg.stack.replace val[1]
                      result = val[2]
                    
    result
end

def _reduce_288(val, _values, result)
                      result = val[1] || s(:nil)
                      result.paren = true
                    
    result
end

def _reduce_289(val, _values, result)
                      result = s(:colon2, val[0], val[2].to_sym)
                    
    result
end

def _reduce_290(val, _values, result)
                      result = s(:colon3, val[1].to_sym)
                    
    result
end

def _reduce_291(val, _values, result)
                      result = val[1] || s(:array)
                      result.sexp_type = :array # aref_args is :args
                    
    result
end

def _reduce_292(val, _values, result)
                      result = self.lexer.lineno
                    
    result
end

def _reduce_293(val, _values, result)
                      result = new_hash val
                    
    result
end

def _reduce_294(val, _values, result)
                      result = s(:return)
                    
    result
end

def _reduce_295(val, _values, result)
                      result = new_yield val[2]
                    
    result
end

def _reduce_296(val, _values, result)
                      result = new_yield
                    
    result
end

def _reduce_297(val, _values, result)
                      result = new_yield
                    
    result
end

def _reduce_298(val, _values, result)
                      result = s(:defined, val[3])
                    
    result
end

def _reduce_299(val, _values, result)
                      result = s(:call, val[2], :"!")
                    
    result
end

def _reduce_300(val, _values, result)
                      debug20 14, val, result
                    
    result
end

def _reduce_301(val, _values, result)
                      oper, iter = val[0], val[1]
                      call = oper # FIX
                      iter.insert 1, call
                      result = iter
                      call.line = iter.line
                    
    result
end

# reduce 302 omitted

def _reduce_303(val, _values, result)
                      call, iter = val[0], val[1]
                      block_dup_check call, iter
                      iter.insert 1, call # FIX
                      result = iter
                    
    result
end

def _reduce_304(val, _values, result)
                      result = val[1] # TODO: fix lineno
                    
    result
end

def _reduce_305(val, _values, result)
                      result = new_if val[1], val[3], val[4]
                    
    result
end

def _reduce_306(val, _values, result)
                      result = new_if val[1], val[4], val[3]
                    
    result
end

def _reduce_307(val, _values, result)
                      lexer.cond.push true
                    
    result
end

def _reduce_308(val, _values, result)
                      lexer.cond.pop
                    
    result
end

def _reduce_309(val, _values, result)
                      result = new_while val[5], val[2], true
                    
    result
end

def _reduce_310(val, _values, result)
                      lexer.cond.push true
                    
    result
end

def _reduce_311(val, _values, result)
                      lexer.cond.pop
                    
    result
end

def _reduce_312(val, _values, result)
                      result = new_until val[5], val[2], true
                    
    result
end

def _reduce_313(val, _values, result)
                      (_, line), expr, _, body, _ = val
                      result = new_case expr, body, line
                    
    result
end

def _reduce_314(val, _values, result)
                      (_, line), _, body, _ = val
                      result = new_case nil, body, line
                    
    result
end

def _reduce_315(val, _values, result)
                      lexer.cond.push true
                    
    result
end

def _reduce_316(val, _values, result)
                      lexer.cond.pop
                    
    result
end

def _reduce_317(val, _values, result)
                      result = new_for val[4], val[1], val[7]
                    
    result
end

def _reduce_318(val, _values, result)
                      result = self.lexer.lineno
                    
    result
end

def _reduce_319(val, _values, result)
                      self.comments.push self.lexer.comments
                      if (self.in_def || self.in_single > 0) then
                        yyerror "class definition in method body"
                      end
                      self.env.extend
                    
    result
end

def _reduce_320(val, _values, result)
                      result = new_class val
                      self.env.unextend
                      self.lexer.comments # we don't care about comments in the body
                    
    result
end

def _reduce_321(val, _values, result)
                      result = self.lexer.lineno
                    
    result
end

def _reduce_322(val, _values, result)
                      result = self.in_def
                      self.in_def = false
                    
    result
end

def _reduce_323(val, _values, result)
                      result = self.in_single
                      self.in_single = 0
                      self.env.extend
                    
    result
end

def _reduce_324(val, _values, result)
                      result = new_sclass val
                      self.env.unextend
                      self.lexer.comments # we don't care about comments in the body
                    
    result
end

def _reduce_325(val, _values, result)
                      result = self.lexer.lineno
                    
    result
end

def _reduce_326(val, _values, result)
                      self.comments.push self.lexer.comments
                      yyerror "module definition in method body" if
                        self.in_def or self.in_single > 0

                      self.env.extend
                    
    result
end

def _reduce_327(val, _values, result)
                      result = new_module val
                      self.env.unextend
                      self.lexer.comments # we don't care about comments in the body
                    
    result
end

def _reduce_328(val, _values, result)
                      result = [self.in_def, self.lexer.cmdarg.stack.dup]

                      self.comments.push self.lexer.comments
                      self.in_def = true
                      self.env.extend
                      # TODO: local->cmdargs = cmdarg_stack;
                      # TODO: port local_push_gen and local_pop_gen
                      lexer.cmdarg.stack.replace [false]
                    
    result
end

def _reduce_329(val, _values, result)
                      in_def, cmdarg = val[2]

                      result = new_defn val

                      lexer.cmdarg.stack.replace cmdarg
                      self.env.unextend
                      self.in_def = in_def
                      self.lexer.comments # we don't care about comments in the body
                    
    result
end

def _reduce_330(val, _values, result)
                      self.comments.push self.lexer.comments
                      lexer.lex_state = :expr_fname
                    
    result
end

def _reduce_331(val, _values, result)
                      self.in_single += 1
                      self.env.extend
                      lexer.lex_state = :expr_endfn # force for args
                      result = [lexer.lineno, self.lexer.cmdarg.stack.dup]
                      lexer.cmdarg.stack.replace [false]
                    
    result
end

def _reduce_332(val, _values, result)
                      line, cmdarg = val[5]
                      result = new_defs val
                      result[3].line line

                      lexer.cmdarg.stack.replace cmdarg

                      self.env.unextend
                      self.in_single -= 1
                      self.lexer.comments # we don't care about comments in the body
                    
    result
end

def _reduce_333(val, _values, result)
                      result = s(:break)
                    
    result
end

def _reduce_334(val, _values, result)
                      result = s(:next)
                    
    result
end

def _reduce_335(val, _values, result)
                      result = s(:redo)
                    
    result
end

def _reduce_336(val, _values, result)
                      result = s(:retry)
                    
    result
end

def _reduce_337(val, _values, result)
                      result = value_expr(val[0])
                    
    result
end

# reduce 338 omitted

# reduce 339 omitted

# reduce 340 omitted

# reduce 341 omitted

# reduce 342 omitted

# reduce 343 omitted

# reduce 344 omitted

# reduce 345 omitted

# reduce 346 omitted

# reduce 347 omitted

# reduce 348 omitted

# reduce 349 omitted

# reduce 350 omitted

# reduce 351 omitted

# reduce 352 omitted

# reduce 353 omitted

# reduce 354 omitted

def _reduce_355(val, _values, result)
                      result = s(:if, val[1], val[3], val[4])
                    
    result
end

# reduce 356 omitted

def _reduce_357(val, _values, result)
                      result = val[1]
                    
    result
end

# reduce 358 omitted

def _reduce_359(val, _values, result)
                      val[0].delete_at 1 if val[0][1].nil? # HACK
                    
    result
end

# reduce 360 omitted

def _reduce_361(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_362(val, _values, result)
                      result = s(:array, val[0])
                    
    result
end

def _reduce_363(val, _values, result)
                      result = list_append val[0], val[2]
                    
    result
end

def _reduce_364(val, _values, result)
                      args, = val

                      result = block_var args
                    
    result
end

def _reduce_365(val, _values, result)
                      args, _, _, splat = val

                      result = block_var args, "*#{splat}".to_sym
                    
    result
end

def _reduce_366(val, _values, result)
                      args, _, _, splat, _, args2 = val

                      result = block_var args, "*#{splat}".to_sym, args2
                    
    result
end

def _reduce_367(val, _values, result)
                      args, _, _ = val

                      result = block_var args, :*
                    
    result
end

def _reduce_368(val, _values, result)
                      args, _, _, _, args2 = val

                      result = block_var args, :*, args2
                    
    result
end

def _reduce_369(val, _values, result)
                      _, splat = val

                      result = block_var :"*#{splat}"
                    
    result
end

def _reduce_370(val, _values, result)
                      _, splat, _, args = val

                      result = block_var :"*#{splat}", args
                    
    result
end

def _reduce_371(val, _values, result)
                      result = block_var :*
                    
    result
end

def _reduce_372(val, _values, result)
                      _, _, args = val

                      result = block_var :*, args
                    
    result
end

def _reduce_373(val, _values, result)
                      result = call_args val
                    
    result
end

def _reduce_374(val, _values, result)
                      result = call_args val
                    
    result
end

def _reduce_375(val, _values, result)
                      result = call_args val
                    
    result
end

def _reduce_376(val, _values, result)
                      result = call_args val
                    
    result
end

def _reduce_377(val, _values, result)
                      result = args val
                    
    result
end

# reduce 378 omitted

def _reduce_379(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_380(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_381(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_382(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_383(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_384(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_385(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_386(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_387(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_388(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_389(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_390(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_391(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_392(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_393(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_394(val, _values, result)
 result = 0 
    result
end

# reduce 395 omitted

def _reduce_396(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_397(val, _values, result)
                      self.lexer.command_start = true
                      result = s(:args)
                    
    result
end

def _reduce_398(val, _values, result)
                      result = args val
                    
    result
end

# reduce 399 omitted

def _reduce_400(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_401(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_402(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_403(val, _values, result)
                      result = s(:shadow, val[0].to_sym)
                    
    result
end

# reduce 404 omitted

def _reduce_405(val, _values, result)
                      self.env.extend :dynamic
                      result = self.lexer.lineno

                      result = lexer.lpar_beg
                      lexer.paren_nest += 1
                      lexer.lpar_beg = lexer.paren_nest
                    
    result
end

def _reduce_406(val, _values, result)
                      lpar, args, body = val
                      lexer.lpar_beg = lpar

                      call = new_call nil, :lambda
                      result = new_iter call, args, body
                      self.env.unextend
                    
    result
end

def _reduce_407(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_408(val, _values, result)
                      result = val[0]
                      result = 0 if result == s(:args)
                    
    result
end

def _reduce_409(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_410(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_411(val, _values, result)
                      self.env.extend :dynamic
                      result = self.lexer.lineno
                    
    result
end

def _reduce_412(val, _values, result)
                      result = nil # self.env.dynamic.keys
                    
    result
end

def _reduce_413(val, _values, result)
                      args   = val[2]
                      body   = val[4]
                      result = new_iter nil, args, body
                      result.line = val[1]

                      self.env.unextend
                    
    result
end

def _reduce_414(val, _values, result)
                      # TODO:
                      ## if (nd_type($1) == NODE_YIELD) {
                      ##     compile_error(PARSER_ARG "block given to yield");

                      syntax_error "Both block arg and actual block given." if
                        val[0].block_pass?

                      val = invert_block_call val if inverted? val

                      result = val[1]
                      result.insert 1, val[0]
                    
    result
end

def _reduce_415(val, _values, result)
                      result = new_call val[0], val[2].to_sym, val[3]
                    
    result
end

def _reduce_416(val, _values, result)
                      iter1, _, name, args, iter2 = val

                      call = new_call iter1, name.to_sym, args
                      iter2.insert 1, call

                      result = iter2
                    
    result
end

def _reduce_417(val, _values, result)
                      iter1, _, name, args, iter2 = val

                      call = new_call iter1, name.to_sym, args
                      iter2.insert 1, call

                      result = iter2
                    
    result
end

def _reduce_418(val, _values, result)
                      result = self.lexer.lineno
                    
    result
end

def _reduce_419(val, _values, result)
                      args = self.call_args val[2..-1]
                      result = val[0].concat args.sexp_body
                    
    result
end

def _reduce_420(val, _values, result)
                      result = new_call val[0], val[2].to_sym, val[3], val[1]
                    
    result
end

def _reduce_421(val, _values, result)
                      result = new_call val[0], val[2].to_sym, val[3]
                    
    result
end

def _reduce_422(val, _values, result)
                      result = new_call val[0], val[2].to_sym
                    
    result
end

def _reduce_423(val, _values, result)
                      result = new_call val[0], :call, val[2], val[1]
                    
    result
end

def _reduce_424(val, _values, result)
                      result = new_call val[0], :call, val[2]
                    
    result
end

def _reduce_425(val, _values, result)
                      result = new_super val[1]
                    
    result
end

def _reduce_426(val, _values, result)
                      result = s(:zsuper)
                    
    result
end

def _reduce_427(val, _values, result)
                      result = new_aref val
                    
    result
end

def _reduce_428(val, _values, result)
                      self.env.extend :dynamic
                      result = self.lexer.lineno
                    
    result
end

def _reduce_429(val, _values, result)
                      result = nil # self.env.dynamic.keys
                    
    result
end

def _reduce_430(val, _values, result)
                      _, line, args, _, body, _ = val

                      result = new_iter nil, args, body
                      result.line = line

                      self.env.unextend
                    
    result
end

def _reduce_431(val, _values, result)
                      self.env.extend :dynamic
                      result = self.lexer.lineno
                    
    result
end

def _reduce_432(val, _values, result)
                      result = nil # self.env.dynamic.keys
                    
    result
end

def _reduce_433(val, _values, result)
                      _, line, args, _, body, _ = val

                      result = new_iter nil, args, body
                      result.line = line

                      self.env.unextend
                    
    result
end

def _reduce_434(val, _values, result)
                      result = self.lexer.lineno
                    
    result
end

def _reduce_435(val, _values, result)
                      result = new_when(val[2], val[4])
                      result.line = val[1]
                      result << val[5] if val[5]
                    
    result
end

# reduce 436 omitted

# reduce 437 omitted

def _reduce_438(val, _values, result)
                      (_, line), klasses, var, _, body, rest = val

                      klasses ||= s(:array)
                      klasses << new_assign(var, s(:gvar, :"$!")) if var
                      klasses.line line

                      result = new_resbody(klasses, body)
                      result << rest if rest # UGH, rewritten above
                    
    result
end

def _reduce_439(val, _values, result)
                      result = nil
                    
    result
end

def _reduce_440(val, _values, result)
                      result = s(:array, val[0])
                    
    result
end

# reduce 441 omitted

# reduce 442 omitted

def _reduce_443(val, _values, result)
                      result = val[1]
                    
    result
end

# reduce 444 omitted

def _reduce_445(val, _values, result)
                      _, body = val

                      result = body || s(:nil)
                    
    result
end

# reduce 446 omitted

def _reduce_447(val, _values, result)
                      result = s(:lit, val[0])
                    
    result
end

def _reduce_448(val, _values, result)
                      result = s(:lit, val[0])
                    
    result
end

# reduce 449 omitted

def _reduce_450(val, _values, result)
                      val[0] = s(:dstr, val[0].value) if val[0].sexp_type == :evstr
                      result = val[0]
                    
    result
end

def _reduce_451(val, _values, result)
                      debug20 23, val, result
                    
    result
end

# reduce 452 omitted

def _reduce_453(val, _values, result)
                      result = self.literal_concat val[0], val[1]
                    
    result
end

def _reduce_454(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_455(val, _values, result)
                      result = new_string val
                    
    result
end

def _reduce_456(val, _values, result)
                      result = new_xstring val[1]
                    
    result
end

def _reduce_457(val, _values, result)
                      result = new_regexp val
                    
    result
end

def _reduce_458(val, _values, result)
                      result = s(:array)
                    
    result
end

def _reduce_459(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_460(val, _values, result)
                      result = new_word_list
                    
    result
end

def _reduce_461(val, _values, result)
                      result = val[0].dup << new_word_list_entry(val)
                    
    result
end

# reduce 462 omitted

def _reduce_463(val, _values, result)
                      result = self.literal_concat val[0], val[1]
                    
    result
end

def _reduce_464(val, _values, result)
                      result = s(:array)
                    
    result
end

def _reduce_465(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_466(val, _values, result)
                      result = new_symbol_list
                    
    result
end

def _reduce_467(val, _values, result)
                      result = val[0].dup << new_symbol_list_entry(val)
                    
    result
end

def _reduce_468(val, _values, result)
                      result = s(:array)
                    
    result
end

def _reduce_469(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_470(val, _values, result)
                      result = s(:array)
                    
    result
end

def _reduce_471(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_472(val, _values, result)
                      result = new_qword_list
                    
    result
end

def _reduce_473(val, _values, result)
                      result = val[0].dup << new_qword_list_entry(val)
                    
    result
end

def _reduce_474(val, _values, result)
                      result = new_qsym_list
                    
    result
end

def _reduce_475(val, _values, result)
                      result = val[0].dup << new_qsym_list_entry(val)
                    
    result
end

def _reduce_476(val, _values, result)
                      result = s(:str, "")
                    
    result
end

def _reduce_477(val, _values, result)
                      result = literal_concat(val[0], val[1])
                    
    result
end

def _reduce_478(val, _values, result)
                      result = nil
                    
    result
end

def _reduce_479(val, _values, result)
                      result = literal_concat(val[0], val[1])
                    
    result
end

def _reduce_480(val, _values, result)
                      result = nil
                    
    result
end

def _reduce_481(val, _values, result)
                      result = literal_concat(val[0], val[1])
                    
    result
end

def _reduce_482(val, _values, result)
                      result = new_string val
                    
    result
end

def _reduce_483(val, _values, result)
                      result = lexer.lex_strterm

                      lexer.lex_strterm = nil
                      lexer.lex_state = :expr_beg # TODO: expr_value ?
                    
    result
end

def _reduce_484(val, _values, result)
                      lexer.lex_strterm = val[1]
                      result = s(:evstr, val[2])
                    
    result
end

def _reduce_485(val, _values, result)
                      result = [lexer.lex_strterm,
                                lexer.brace_nest,
                                lexer.string_nest, # TODO: remove
                                lexer.cond.store,
                                lexer.cmdarg.store,
                                lexer.lex_state,
                               ]

                      lexer.lex_strterm = nil
                      lexer.brace_nest  = 0
                      lexer.string_nest = 0

                      lexer.lex_state   = :expr_value
                    
    result
end

def _reduce_486(val, _values, result)
                      # TODO: tRCURLY -> tSTRING_END
                      _, memo, stmt, _ = val

                      lex_strterm, brace_nest, string_nest, oldcond, oldcmdarg, oldlex_state = memo

                      lexer.lex_strterm = lex_strterm
                      lexer.brace_nest  = brace_nest
                      lexer.string_nest = string_nest

                      lexer.cond.restore oldcond
                      lexer.cmdarg.restore oldcmdarg

                      lexer.lex_state = oldlex_state

                      case stmt
                      when Sexp then
                        case stmt.sexp_type
                        when :str, :dstr, :evstr then
                          result = stmt
                        else
                          result = s(:evstr, stmt)
                        end
                      when nil then
                        result = s(:evstr)
                      else
                        debug20 25
                        raise "unknown string body: #{stmt.inspect}"
                      end
                    
    result
end

def _reduce_487(val, _values, result)
 result = s(:gvar, val[0].to_sym) 
    result
end

def _reduce_488(val, _values, result)
 result = s(:ivar, val[0].to_sym) 
    result
end

def _reduce_489(val, _values, result)
 result = s(:cvar, val[0].to_sym) 
    result
end

# reduce 490 omitted

def _reduce_491(val, _values, result)
                      lexer.lex_state = :expr_end
                      result = val[1].to_sym
                    
    result
end

def _reduce_492(val, _values, result)
                      result = val[0].to_sym
                    
    result
end

# reduce 493 omitted

# reduce 494 omitted

# reduce 495 omitted

# reduce 496 omitted

def _reduce_497(val, _values, result)
                      lexer.lex_state = :expr_end
                      result = val[1]

                      result ||= s(:str, "")

                      case result.sexp_type
                      when :dstr then
                        result.sexp_type = :dsym
                      when :str then
                        result = s(:lit, result.last.to_sym)
                      when :evstr then
                        result = s(:dsym, "", result)
                      else
                        debug20 26, val, result
                      end
                    
    result
end

# reduce 498 omitted

def _reduce_499(val, _values, result)
                      result = -val[1] # TODO: pt_testcase
                    
    result
end

# reduce 500 omitted

# reduce 501 omitted

# reduce 502 omitted

# reduce 503 omitted

# reduce 504 omitted

# reduce 505 omitted

# reduce 506 omitted

# reduce 507 omitted

# reduce 508 omitted

def _reduce_509(val, _values, result)
 result = s(:nil)   
    result
end

def _reduce_510(val, _values, result)
 result = s(:self)  
    result
end

def _reduce_511(val, _values, result)
 result = s(:true)  
    result
end

def _reduce_512(val, _values, result)
 result = s(:false) 
    result
end

def _reduce_513(val, _values, result)
 result = s(:str, self.file) 
    result
end

def _reduce_514(val, _values, result)
 result = s(:lit, lexer.lineno) 
    result
end

def _reduce_515(val, _values, result)
                      result =
                        if defined? Encoding then
                          s(:colon2, s(:const, :Encoding), :UTF_8)
                        else
                          s(:str, "Unsupported!")
                        end
                    
    result
end

def _reduce_516(val, _values, result)
                      var = val[0]
                      result = Sexp === var ? var : self.gettable(var)
                    
    result
end

def _reduce_517(val, _values, result)
                      var = val[0]
                      result = Sexp === var ? var : self.gettable(var)
                    
    result
end

def _reduce_518(val, _values, result)
                      result = self.assignable val[0]
                    
    result
end

def _reduce_519(val, _values, result)
                      result = self.assignable val[0]
                      debug20 29, val, result
                    
    result
end

def _reduce_520(val, _values, result)
 result = s(:nth_ref,  val[0]) 
    result
end

def _reduce_521(val, _values, result)
 result = s(:back_ref, val[0]) 
    result
end

def _reduce_522(val, _values, result)
                      result = nil
                    
    result
end

def _reduce_523(val, _values, result)
                      lexer.lex_state = :expr_beg
                    
    result
end

def _reduce_524(val, _values, result)
                      result = val[2]
                    
    result
end

def _reduce_525(val, _values, result)
                      yyerrok
                      result = nil
                      debug20 30, val, result
                    
    result
end

def _reduce_526(val, _values, result)
                      result = val[1]
                      self.lexer.lex_state = :expr_beg
                      self.lexer.command_start = true
                      # TODO:
                      # $<num>$ = parser->parser_in_kwarg;
                      # parser->parser_in_kwarg = 1;
                    
    result
end

def _reduce_527(val, _values, result)
                      # TODO: parser->parser_in_kwarg = $<num>1;
                      result = val[0]
                      self.lexer.lex_state = :expr_beg
                      self.lexer.command_start = true
                    
    result
end

def _reduce_528(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_529(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_530(val, _values, result)
                      result = args val
                    
    result
end

# reduce 531 omitted

def _reduce_532(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_533(val, _values, result)
                      result = nil
                    
    result
end

def _reduce_534(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_535(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_536(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_537(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_538(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_539(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_540(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_541(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_542(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_543(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_544(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_545(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_546(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_547(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_548(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_549(val, _values, result)
                      yyerror "formal argument cannot be a constant"
                    
    result
end

def _reduce_550(val, _values, result)
                      yyerror "formal argument cannot be an instance variable"
                    
    result
end

def _reduce_551(val, _values, result)
                      yyerror "formal argument cannot be a global variable"
                    
    result
end

def _reduce_552(val, _values, result)
                      yyerror "formal argument cannot be a class variable"
                    
    result
end

# reduce 553 omitted

def _reduce_554(val, _values, result)
                      identifier = val[0].to_sym
                      self.env[identifier] = :lvar

                      result = identifier
                    
    result
end

# reduce 555 omitted

# reduce 556 omitted

def _reduce_557(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_558(val, _values, result)
                      case val[0]
                      when Symbol then
                        result = s(:args)
                        result << val[0]
                      when Sexp then
                        result = val[0]
                      else
                        debug20 32
                        raise "Unknown f_arg type: #{val.inspect}"
                      end
                    
    result
end

def _reduce_559(val, _values, result)
                      list, _, item = val

                      if list.sexp_type == :args then
                        result = list
                      else
                        result = s(:args, list)
                      end

                      result << item
                    
    result
end

# reduce 560 omitted

def _reduce_561(val, _values, result)
                      # TODO: call_args
                      label, _ = val[0] # TODO: fix lineno?
                      identifier = label.to_sym
                      self.env[identifier] = :lvar

                      result = s(:array, s(:kwarg, identifier, val[1]))
                    
    result
end

def _reduce_562(val, _values, result)
                      label, _ = val[0] # TODO: fix lineno?
                      identifier = label.to_sym
                      self.env[identifier] = :lvar

                      result = s(:array, s(:kwarg, identifier))
                    
    result
end

def _reduce_563(val, _values, result)
                      # TODO: call_args
                      label, _ = val[0] # TODO: fix lineno?
                      identifier = label.to_sym
                      self.env[identifier] = :lvar

                      result = s(:array, s(:kwarg, identifier, val[1]))
                    
    result
end

def _reduce_564(val, _values, result)
                      label, _ = val[0] # TODO: fix lineno?
                      identifier = label.to_sym
                      self.env[identifier] = :lvar

                      result = s(:array, s(:kwarg, identifier))
                    
    result
end

# reduce 565 omitted

def _reduce_566(val, _values, result)
                      list, _, item = val
                      result = list << item.last
                    
    result
end

# reduce 567 omitted

def _reduce_568(val, _values, result)
                      result = args val
                    
    result
end

# reduce 569 omitted

# reduce 570 omitted

def _reduce_571(val, _values, result)
                      result = :"**#{val[1]}"
                    
    result
end

def _reduce_572(val, _values, result)
                      result = :"**"
                    
    result
end

def _reduce_573(val, _values, result)
                      result = self.assignable val[0], val[2]
                      # TODO: detect duplicate names
                    
    result
end

def _reduce_574(val, _values, result)
                      result = self.assignable val[0], val[2]
                    
    result
end

def _reduce_575(val, _values, result)
                      result = s(:block, val[0])
                    
    result
end

def _reduce_576(val, _values, result)
                      result = val[0]
                      result << val[2]
                    
    result
end

def _reduce_577(val, _values, result)
                      result = s(:block, val[0])
                    
    result
end

def _reduce_578(val, _values, result)
                      result = self.block_append val[0], val[2]
                    
    result
end

# reduce 579 omitted

# reduce 580 omitted

def _reduce_581(val, _values, result)
                      # TODO: differs from parse.y - needs tests
                      name = val[1].to_sym
                      self.assignable name
                      result = :"*#{name}"
                    
    result
end

def _reduce_582(val, _values, result)
                      name = :"*"
                      self.env[name] = :lvar
                      result = name
                    
    result
end

# reduce 583 omitted

# reduce 584 omitted

def _reduce_585(val, _values, result)
                      identifier = val[1].to_sym

                      self.env[identifier] = :lvar
                      result = "&#{identifier}".to_sym
                    
    result
end

def _reduce_586(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_587(val, _values, result)
                      result = nil
                    
    result
end

# reduce 588 omitted

def _reduce_589(val, _values, result)
                      lexer.lex_state = :expr_beg
                    
    result
end

def _reduce_590(val, _values, result)
                      result = val[2]
                      yyerror "Can't define single method for literals." if
                        result.sexp_type == :lit
                    
    result
end

def _reduce_591(val, _values, result)
                      result = s(:array)
                    
    result
end

def _reduce_592(val, _values, result)
                      result = val[0]
                    
    result
end

# reduce 593 omitted

def _reduce_594(val, _values, result)
                      list = val[0].dup
                      more = val[2].sexp_body
                      list.push(*more) unless more.empty?
                      result = list
                      result.sexp_type = :hash
                    
    result
end

def _reduce_595(val, _values, result)
                      result = s(:array, val[0], val[2])
                    
    result
end

def _reduce_596(val, _values, result)
                      result = s(:array, s(:lit, val[0][0].to_sym), val.last)
                    
    result
end

def _reduce_597(val, _values, result)
                      _, sym, _, value = val
                      sym.sexp_type = :dsym
                      result = s(:array, sym, value)
                    
    result
end

def _reduce_598(val, _values, result)
                      raise "not yet: #{val.inspect}"
                      # result = s(:array, s(:lit, val[1].to_sym), val[1])
                    
    result
end

def _reduce_599(val, _values, result)
                      result = s(:array, s(:kwsplat, val[1]))
                    
    result
end

# reduce 600 omitted

# reduce 601 omitted

# reduce 602 omitted

# reduce 603 omitted

# reduce 604 omitted

# reduce 605 omitted

# reduce 606 omitted

# reduce 607 omitted

# reduce 608 omitted

# reduce 609 omitted

# reduce 610 omitted

# reduce 611 omitted

# reduce 612 omitted

# reduce 613 omitted

# reduce 614 omitted

# reduce 615 omitted

# reduce 616 omitted

# reduce 617 omitted

# reduce 618 omitted

# reduce 619 omitted

# reduce 620 omitted

# reduce 621 omitted

# reduce 622 omitted

def _reduce_623(val, _values, result)
 yyerrok 
    result
end

# reduce 624 omitted

# reduce 625 omitted

def _reduce_626(val, _values, result)
 yyerrok 
    result
end

def _reduce_627(val, _values, result)
 result = nil; 
    result
end

def _reduce_none(val, _values, result)
  val[0]
end

end   # class Ruby24Parser
